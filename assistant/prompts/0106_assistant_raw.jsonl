{"url": "https://stackoverflow.com/questions/75592766/finding-the-maximum-difference-between-columns-from-different-rows", "instance_id": "270_1", "selected_database": "financial", "query": "In the financial database, we have a table named 'order' that records details about orders given to clients. Each order is associated with an order_id and has attributes such as account_id, bank_to, account_to, and amount. We need to find all accounts that have placed at least two orders such that the difference between the highest and lowest amount for those orders exceeds 12000. This query aims to find such accounts, but the initial attempt produced incorrect results.", "error_sql": ["SELECT account_id, MAX(payments) AS max_payment, MIN(payments) AS min_payment FROM loan GROUP BY account_id HAVING COUNT(account_id) > 1 AND (MAX(payments) - MIN(payments)) > 2;"], "sol_sql": ["SELECT DISTINCT account_id FROM \"order\" GROUP BY account_id HAVING COUNT(order_id) > 1 AND (MAX(amount) - MIN(amount)) > 12000;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, we have a table named 'order' that records details about orders given to clients. Each order is associated with an order_id and has attributes such as account_id, bank_to, account_to, and amount. We need to find all accounts that have placed at least two orders such that the difference between the highest and lowest amount for those orders exceeds 12000. This query aims to find such accounts, but the initial attempt produced incorrect results.\n# Error SQL:\nSELECT account_id, MAX(payments) AS max_payment, MIN(payments) AS min_payment FROM loan GROUP BY account_id HAVING COUNT(account_id) > 1 AND (MAX(payments) - MIN(payments)) > 2;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74427638/how-to-extract-hhmmss-from-yyyy-mm-dd-hhmmss", "instance_id": "271_2", "selected_database": "codebase_community", "query": "I have a table named 'comments' in the 'codebase_community' database with a column 'CreationDate' of type 'datetime'. I want to extract only the 'hh:mm:ss' part from this column. My desired result should look like this:\n\n\n0:00:00\n10:00:00\n04:00:00\n\n\nHowever, when I tried to use the following SQL query, it didn't give me the expected result:\n\nsql\nSELECT CreationDate::time FROM comments;\n\n\nThis query returns the time part but includes leading zeros, which I don't want. How can I modify my query to achieve the desired result?", "error_sql": ["SELECT CreationDate::time FROM comments;"], "sol_sql": ["SELECT to_char(CreationDate, 'FMHH:MI:SS') FROM comments;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: codebase_community********************\nCREATE TABLE \"postlinks\" (\nid bigint NOT NULL,\ncreationdate timestamp with time zone NULL,\npostid bigint NULL,\nrelatedpostid bigint NULL,\nlinktypeid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id              creationdate  postid  relatedpostid  linktypeid\n108 2010-07-21 14:47:33+08:00     395            173           1\n145 2010-07-23 16:30:41+08:00     548            539           1\n217 2010-07-26 20:12:15+08:00     375             30           1\n==================================================\n\n\nCREATE TABLE \"posthistory\" (\nid bigint NOT NULL,\nposthistorytypeid bigint NULL,\npostid bigint NULL,\nrevisionguid text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\ntext text NULL,\ncomment text NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  posthistorytypeid  postid                         revisionguid              creationdate  userid comment userdisplayname\n  1                  2       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  2                  1       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  3                  3       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n==================================================\n\n\nCREATE TABLE \"badges\" (\nid bigint NOT NULL,\nuserid bigint NULL,\nname text NULL,\ndate timestamp with time zone NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  userid    name                      date\n  1       5 Teacher 2010-07-19 19:39:07+08:00\n  2       6 Teacher 2010-07-19 19:39:07+08:00\n  3       8 Teacher 2010-07-19 19:39:07+08:00\n==================================================\n\n\nCREATE TABLE \"posts\" (\nid bigint NOT NULL,\nposttypeid bigint NULL,\nacceptedanswerid bigint NULL,\ncreaiondate timestamp with time zone NULL,\nscore bigint NULL,\nviewcount bigint NULL,\nbody text NULL,\nowneruserid bigint NULL,\nlasactivitydate timestamp with time zone NULL,\ntitle text NULL,\ntags text NULL,\nanswercount bigint NULL,\ncommentcount bigint NULL,\nfavoritecount bigint NULL,\nlasteditoruserid bigint NULL,\nlasteditdate timestamp with time zone NULL,\ncommunityowneddate timestamp with time zone NULL,\nparentid bigint NULL,\ncloseddate timestamp with time zone NULL,\nownerdisplayname text NULL,\nlasteditordisplayname text NULL,\n    PRIMARY KEY (id),\n    FOREIGN KEY (lasteditoruserid) REFERENCES users(id),\n    FOREIGN KEY (owneruserid) REFERENCES users(id)\n);\n\nExample data:\n id  posttypeid  acceptedanswerid               creaiondate  score  viewcount  owneruserid           lasactivitydate                                                             title                           tags  answercount  commentcount  favoritecount  lasteditoruserid              lasteditdate        communityowneddate parentid closeddate ownerdisplayname lasteditordisplayname\n  1           1                15 2010-07-19 19:12:12+08:00     23       1278            8 2010-09-15 21:08:26+08:00                                     Eliciting priors from experts <bayesian><prior><elicitation>            5             1             14               NaN                       NaT                       NaT     None       None             None                  None\n  2           1                59 2010-07-19 19:12:57+08:00     22       8198           24 2012-11-12 09:21:54+08:00                                                What is normality?     <distributions><normality>            7             1              8              88.0 2010-08-07 17:56:44+08:00                       NaT     None       None             None                  None\n  3           1                 5 2010-07-19 19:13:28+08:00     54       3613           18 2013-05-27 14:48:36+08:00 What are some valuable Statistical Analysis open source projects?        <software><open-source>           19             4             36             183.0 2011-02-12 05:50:03+08:00 2010-07-19 19:13:28+08:00     None       None             None                  None\n==================================================\n\n\nCREATE TABLE \"users\" (\nid bigint NOT NULL,\nreputation bigint NULL,\ncreationdate timestamp with time zone NULL,\ndisplayname text NULL,\nlastaccessdate timestamp with time zone NULL,\nwebsiteurl text NULL,\nlocation text NULL,\naboutme text NULL,\nviews bigint NULL,\nupvotes bigint NULL,\ndownvotes bigint NULL,\naccountid bigint NULL,\nage bigint NULL,\nprofileimageurl text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  reputation              creationdate  displayname            lastaccessdate                     websiteurl           location  views  upvotes  downvotes  accountid  age\n -1           1 2010-07-19 06:55:26+08:00    Community 2010-07-19 06:55:26+08:00 http://meta.stackexchange.com/ on the server farm      0     5007       1920         -1  NaN\n  2         101 2010-07-19 14:01:36+08:00 Geoff Dalgas 2013-11-12 22:07:23+08:00       http://stackoverflow.com      Corvallis, OR     25        3          0          2 37.0\n  3         101 2010-07-19 15:34:50+08:00 Jarrod Dixon 2014-08-08 06:42:58+08:00       http://stackoverflow.com       New York, NY     22       19          0          3 35.0\n==================================================\n\n\nCREATE TABLE \"tags\" (\nid bigint NOT NULL,\ntagname text NULL,\ncount bigint NULL,\nexcerptpostid bigint NULL,\nwikipostid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id     tagname  count  excerptpostid  wikipostid\n  1    bayesian   1342        20258.0     20257.0\n  2       prior    168        62158.0     62157.0\n  3 elicitation      6            NaN         NaN\n==================================================\n\n\nCREATE TABLE \"votes\" (\nid bigint NOT NULL,\npostid bigint NULL,\nvotetypeid bigint NULL,\ncreationdate date NULL,\nuserid bigint NULL,\nbountyamount bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  votetypeid creationdate userid bountyamount\n  1       3           2   2010-07-19   None         None\n  2       2           2   2010-07-19   None         None\n  3       5           2   2010-07-19   None         None\n==================================================\n\n\nCREATE TABLE \"comments\" (\nid bigint NOT NULL,\npostid bigint NULL,\nscore bigint NULL,\ntext text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  score              creationdate  userid userdisplayname\n  1       3      5 2010-07-19 19:15:52+08:00      13            None\n  2       5      0 2010-07-19 19:16:14+08:00      13            None\n  3       9      0 2010-07-19 19:18:54+08:00      13            None\n==================================================\n\n********************Database: codebase_community********************\n\n# User Query:\nI have a table named 'comments' in the 'codebase_community' database with a column 'CreationDate' of type 'datetime'. I want to extract only the 'hh:mm:ss' part from this column. My desired result should look like this:\n\n\n0:00:00\n10:00:00\n04:00:00\n\n\nHowever, when I tried to use the following SQL query, it didn't give me the expected result:\n\nsql\nSELECT CreationDate::time FROM comments;\n\n\nThis query returns the time part but includes leading zeros, which I don't want. How can I modify my query to achieve the desired result?\n# Error SQL:\nSELECT CreationDate::time FROM comments;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/43570037/postgresql-trigger-after-update-of-a-specific-column", "instance_id": "333_1", "selected_database": "financial", "query": "I'm exploring triggers and want to create one that fires after an Update event on a `status` column in the `loan` table. The column contains text values representing loan statuses, so the user may update the loan status. I want the trigger function to calculate the number of loans with a specific status 'A' for a certain account. Then update `total_loan_count` in a `loan_summary` table. Here is my trigger (which is not working and I want to figure out why):", "error_sql": ["CREATE OR REPLACE FUNCTION total_loans()\n    RETURNS TRIGGER \n    AS $$ \n    BEGIN \n        UPDATE loan_summary \n        SET total_loan_count = (SELECT COUNT(CASE WHEN status = 'A' THEN 1 END) FROM loan WHERE loan_summary.account_id = loan.account_id) WHERE account_id = NEW.account_id; RETURN NEW; \n    END; \n    $$ LANGUAGE plpgsql;", "\n    CREATE TRIGGER tr_total_loans AFTER UPDATE OF status FOR EACH ROW EXECUTE PROCEDURE total_loans();\n    "], "sol_sql": ["\n    CREATE OR REPLACE FUNCTION total_loans()\n    RETURNS TRIGGER\n    AS $$\n    BEGIN \n        UPDATE loan_summary\n        SET total_loan_count = ( \n            SELECT COUNT(*) \n            FROM loan \n            WHERE loan.account_id = loan_summary.account_id\n              AND loan.status = 'A') \n        WHERE loan_summary.account_id = NEW.account_id; \n        RETURN NEW;\n    END;\n    $$ LANGUAGE plpgsql;\n    ", "\n    CREATE TRIGGER tr_total_loans AFTER UPDATE OF status ON loan FOR EACH ROW EXECUTE PROCEDURE total_loans();\n    "], "preprocess_sql": ["DROP TABLE IF EXISTS loan_summary;", "CREATE TABLE loan_summary (account_id INT PRIMARY KEY, total_loan_count INT);", "INSERT INTO loan_summary (account_id, total_loan_count) SELECT l.account_id, COUNT(*) FROM loan l WHERE l.status = 'A' GROUP BY l.account_id;"], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    res, _, _ = execute_queries([\"SELECT account_id, total_loan_count FROM loan_summary ORDER BY account_id LIMIT 1;\"], db_name,conn)\n    account_id, loan_count = res[0][0], res[0][1]\n    res, _, _ = execute_queries([f\"SELECT loan_id, account_id FROM loan WHERE account_id = {account_id} AND status = 'A' LIMIT 1;\"], db_name,conn)\n    loan_id = res[0][0]\n    check_sql = [f\"UPDATE loan SET status = 'B' WHERE loan_id = {loan_id};\"]\n    execute_queries(check_sql, db_name,conn)\n    res, _, _ = execute_queries([f\"SELECT total_loan_count FROM loan_summary WHERE account_id = {account_id};\"], db_name,conn)\n    new_count = res[0][0]\n    assert new_count == (loan_count - 1), f\"The trigger does not work.\"\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nI'm exploring triggers and want to create one that fires after an Update event on a `status` column in the `loan` table. The column contains text values representing loan statuses, so the user may update the loan status. I want the trigger function to calculate the number of loans with a specific status 'A' for a certain account. Then update `total_loan_count` in a `loan_summary` table. Here is my trigger (which is not working and I want to figure out why):\n# Error SQL:\nCREATE OR REPLACE FUNCTION total_loans()\n    RETURNS TRIGGER \n    AS $$ \n    BEGIN \n        UPDATE loan_summary \n        SET total_loan_count = (SELECT COUNT(CASE WHEN status = 'A' THEN 1 END) FROM loan WHERE loan_summary.account_id = loan.account_id) WHERE account_id = NEW.account_id; RETURN NEW; \n    END; \n    $$ LANGUAGE plpgsql;\n\n    CREATE TRIGGER tr_total_loans AFTER UPDATE OF status FOR EACH ROW EXECUTE PROCEDURE total_loans();\n    \nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/56942421/how-can-i-add-a-new-value-to-an-enum-in-postgres-without-locking-the-table", "instance_id": "335_2", "selected_database": "european_football_2", "query": "In the context of managing team attributes in the European Football database, a user attempted to add a new value 'Very Fast' to an existing ENUM type for 'buildupplayspeedclass' in the 'team_attributes' table. The user tried an approach: renaming the existing ENUM and creating a new one with the additional value, and switch the data type in place. The approach resulted in locks that caused application downtime, especially considering the table's size in the millions of rows. The user is seeking a solution that avoids such downtime, possibly by considering a different approach than using ENUMs.", "error_sql": ["ALTER TYPE buildupplayspeedclass RENAME TO buildupplayspeedclass_old;", "CREATE TYPE buildupplayspeedclass AS ENUM ('Slow', 'Balanced', 'Fast', 'Very Fast');", "ALTER TABLE Team_Attributes ALTER COLUMN buildupplayspeedclass SET DATA TYPE buildupplayspeedclass USING buildupplayspeedclass::text::buildupplayspeedclass;", "DROP TYPE buildupplayspeedclass;"], "sol_sql": ["ALTER TYPE buildupplayspeedclass_enum ADD VALUE 'Very Fast';"], "preprocess_sql": ["CREATE TYPE buildupplayspeedclass_enum AS ENUM ('Balanced', 'Fast', 'Slow');", "\n    ALTER TABLE team_attributes\n    ALTER COLUMN buildupplayspeedclass\n    TYPE buildupplayspeedclass_enum\n    USING buildupplayspeedclass::buildupplayspeedclass_enum;"], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    queries = [\"SELECT id FROM team_attributes LIMIT 1;\"]\n    res, _, _ = execute_queries(queries,  db_name, conn)\n    team_id = res[0][0]\n    queries = [f\"UPDATE team_attributes SET buildupplayspeedclass = 'Very Fast' WHERE id = {team_id};\"]\n    _, exec_err, time_err = execute_queries(queries, db_name, conn)\n    assert exec_err == False\n    \n    queries = [f\"UPDATE team_attributes SET buildupplayspeedclass = 'TEST' WHERE id = {team_id};\"]\n    res, exec_err, _ = execute_queries(queries, db_name, conn)\n    assert exec_err == True\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: european_football_2********************\nCREATE TABLE \"team_attributes\" (\nid bigint NOT NULL DEFAULT nextval('team_attributes_id_seq'::regclass),\nteam_fifa_api_id bigint NULL,\nteam_api_id bigint NULL,\ndate text NULL,\nbuildupplayspeed bigint NULL,\nbuildupplayspeedclass text NULL,\nbuildupplaydribbling bigint NULL,\nbuildupplaydribblingclass text NULL,\nbuildupplaypassing bigint NULL,\nbuildupplaypassingclass text NULL,\nbuildupplaypositioningclass text NULL,\nchancecreationpassing bigint NULL,\nchancecreationpassingclass text NULL,\nchancecreationcrossing bigint NULL,\nchancecreationcrossingclass text NULL,\nchancecreationshooting bigint NULL,\nchancecreationshootingclass text NULL,\nchancecreationpositioningclass text NULL,\ndefencepressure bigint NULL,\ndefencepressureclass text NULL,\ndefenceaggression bigint NULL,\ndefenceaggressionclass text NULL,\ndefenceteamwidth bigint NULL,\ndefenceteamwidthclass text NULL,\ndefencedefenderlineclass text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_fifa_api_id  team_api_id                date  buildupplayspeed buildupplayspeedclass  buildupplaydribbling buildupplaydribblingclass  buildupplaypassing buildupplaypassingclass buildupplaypositioningclass  chancecreationpassing chancecreationpassingclass  chancecreationcrossing chancecreationcrossingclass  chancecreationshooting chancecreationshootingclass chancecreationpositioningclass  defencepressure defencepressureclass  defenceaggression defenceaggressionclass  defenceteamwidth defenceteamwidthclass defencedefenderlineclass\n  1               434         9930 2010-02-22 00:00:00                60              Balanced                   NaN                    Little                  50                   Mixed                   Organised                     60                     Normal                      65                      Normal                      55                      Normal                      Organised               50               Medium                 55                  Press                45                Normal                    Cover\n  2               434         9930 2014-09-19 00:00:00                52              Balanced                  48.0                    Normal                  56                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n  3               434         9930 2015-09-10 00:00:00                47              Balanced                  41.0                    Normal                  54                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n==================================================\n\n\nCREATE TABLE \"player\" (\nid bigint NOT NULL DEFAULT nextval('player_id_seq'::regclass),\nplayer_api_id bigint NULL,\nplayer_name text NULL,\nplayer_fifa_api_id bigint NULL,\nbirthday text NULL,\nheight bigint NULL,\nweight bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_api_id        player_name  player_fifa_api_id            birthday  height  weight\n  1         505942 Aaron Appindangoye              218353 1992-02-29 00:00:00     182     187\n  2         155782    Aaron Cresswell              189615 1989-12-15 00:00:00     170     146\n  3         162549        Aaron Doran              186170 1991-05-13 00:00:00     170     163\n==================================================\n\n\nCREATE TABLE \"match\" (\nid bigint NOT NULL DEFAULT nextval('match_id_seq'::regclass),\ncountry_id bigint NULL,\nleague_id bigint NULL,\nseason text NULL,\nstage bigint NULL,\ndate text NULL,\nmatch_api_id bigint NULL,\nhome_team_api_id bigint NULL,\naway_team_api_id bigint NULL,\nhome_team_goal bigint NULL,\naway_team_goal bigint NULL,\ngoal text NULL,\nshoton text NULL,\nshotoff text NULL,\nfoulcommit text NULL,\ncard text NULL,\ncross text NULL,\ncorner text NULL,\npossession text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  country_id  league_id    season  stage                date  match_api_id  home_team_api_id  away_team_api_id  home_team_goal  away_team_goal\n  1           1          1 2008/2009      1 2008-08-17 00:00:00        492473              9987              9993               1               1\n  2           1          1 2008/2009      1 2008-08-16 00:00:00        492474             10000              9994               0               0\n  3           1          1 2008/2009      1 2008-08-16 00:00:00        492475              9984              8635               0               3\n==================================================\n\n\nCREATE TABLE \"league\" (\nid bigint NOT NULL DEFAULT nextval('league_id_seq'::regclass),\ncountry_id bigint NULL,\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id  country_id                   name\n   1           1 Belgium Jupiler League\n1729        1729 England Premier League\n4769        4769         France Ligue 1\n==================================================\n\n\nCREATE TABLE \"country\" (\nid bigint NOT NULL DEFAULT nextval('country_id_seq'::regclass),\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id    name\n   1 Belgium\n1729 England\n4769  France\n==================================================\n\n\nCREATE TABLE \"player_attributes\" (\nid bigint NOT NULL DEFAULT nextval('player_attributes_id_seq'::regclass),\nplayer_fifa_api_id bigint NULL,\nplayer_api_id bigint NULL,\ndate text NULL,\noverall_rating bigint NULL,\npotential bigint NULL,\npreferred_foot text NULL,\nattacking_work_rate text NULL,\ndefensive_work_rate text NULL,\ncrossing bigint NULL,\nfinishing bigint NULL,\nheading_accuracy bigint NULL,\nshort_passing bigint NULL,\nvolleys bigint NULL,\ndribbling bigint NULL,\ncurve bigint NULL,\nfree_kick_accuracy bigint NULL,\nlong_passing bigint NULL,\nball_control bigint NULL,\nacceleration bigint NULL,\nsprint_speed bigint NULL,\nagility bigint NULL,\nreactions bigint NULL,\nbalance bigint NULL,\nshot_power bigint NULL,\njumping bigint NULL,\nstamina bigint NULL,\nstrength bigint NULL,\nlong_shots bigint NULL,\naggression bigint NULL,\ninterceptions bigint NULL,\npositioning bigint NULL,\nvision bigint NULL,\npenalties bigint NULL,\nmarking bigint NULL,\nstanding_tackle bigint NULL,\nsliding_tackle bigint NULL,\ngk_diving bigint NULL,\ngk_handling bigint NULL,\ngk_kicking bigint NULL,\ngk_positioning bigint NULL,\ngk_reflexes bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_fifa_api_id  player_api_id                date  overall_rating  potential preferred_foot attacking_work_rate defensive_work_rate  crossing  finishing  heading_accuracy  short_passing  volleys  dribbling  curve  free_kick_accuracy  long_passing  ball_control  acceleration  sprint_speed  agility  reactions  balance  shot_power  jumping  stamina  strength  long_shots  aggression  interceptions  positioning  vision  penalties  marking  standing_tackle  sliding_tackle  gk_diving  gk_handling  gk_kicking  gk_positioning  gk_reflexes\n  1              218353         505942 2016-02-18 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  2              218353         505942 2015-11-19 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  3              218353         505942 2015-09-21 00:00:00              62         66          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          63             41           45      54         48       65               66              69          6           11          10               8            8\n==================================================\n\n\nCREATE TABLE \"team\" (\nid bigint NOT NULL DEFAULT nextval('team_id_seq'::regclass),\nteam_api_id bigint NULL,\nteam_fifa_api_id bigint NULL,\nteam_long_name text NULL,\nteam_short_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_api_id  team_fifa_api_id   team_long_name team_short_name\n  1         9987               673         KRC Genk             GEN\n  2         9993               675     Beerschot AC             BAC\n  3        10000             15005 SV Zulte-Waregem             ZUL\n==================================================\n\n********************Database: european_football_2********************\n\n# User Query:\nIn the context of managing team attributes in the European Football database, a user attempted to add a new value 'Very Fast' to an existing ENUM type for 'buildupplayspeedclass' in the 'team_attributes' table. The user tried an approach: renaming the existing ENUM and creating a new one with the additional value, and switch the data type in place. The approach resulted in locks that caused application downtime, especially considering the table's size in the millions of rows. The user is seeking a solution that avoids such downtime, possibly by considering a different approach than using ENUMs.\n# Error SQL:\nALTER TYPE buildupplayspeedclass RENAME TO buildupplayspeedclass_old;\nCREATE TYPE buildupplayspeedclass AS ENUM ('Slow', 'Balanced', 'Fast', 'Very Fast');\nALTER TABLE Team_Attributes ALTER COLUMN buildupplayspeedclass SET DATA TYPE buildupplayspeedclass USING buildupplayspeedclass::text::buildupplayspeedclass;\nDROP TYPE buildupplayspeedclass;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/42187157/postgresql-partial-indexes-and-upsert", "instance_id": "336_2", "selected_database": "student_club", "query": "In the student_club database, I created a unique index on the `event` table using the following queries 'CREATE UNIQUE INDEX unique_name ON event(event_name, event_date) where event_name is not null; CREATE UNIQUE INDEX unique_location ON event(location, event_date) where location is not null;'. However, when I attempt to insert a new record using an UPSERT operation using the query 'insert into event (event_id, event_name, location, event_date) values('test1', 'test_name', 'test_location', 'test_date')on conflict (event_name, location, event_date) do update set event_id = 'test1', event_name = 'test_name', location = 'test_location', event_date = 'test_date'', I encounter an error stating that there is no unique or exclusion constraint matching the ON CONFLICT specification.", "error_sql": ["CREATE UNIQUE INDEX unique_name ON event(event_name, event_date) where event_name is not null;CREATE UNIQUE INDEX unique_location ON event(location, event_date) where location is not null;"], "sol_sql": ["CREATE UNIQUE INDEX unique_name_location ON event(event_name, location, event_date) WHERE coalesce(event_name, location) is not null;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    check_queries = [\n        \"\"\"\n        INSERT INTO event (event_id, event_name, location, event_date)\n        VALUES ('test1', 'test_name', 'test_location', 'test_date');\n        \"\"\"\n    ]\n    execute_queries(check_queries, db_name, conn)\n    \n    check_queries = [\n        \"\"\"\n        insert into event (event_id, event_name, location, event_date)\n\n        values('test2', 'test_name', 'test_location', 'test_date')\n        on conflict (event_name, location, event_date)        \n        where coalesce(event_name, location) is not null \n        do update set\n            event_id = excluded.event_id,\n            event_name = excluded.event_name,\n            location = excluded.location,\n            event_date = excluded.event_date \"\"\"\n    ]\n    res, exec_err, _ = execute_queries(check_queries, db_name, conn)\n    assert exec_err == False\n    queries = [\"SELECT event_id, event_name, location, event_date FROM event WHERE event_name = 'test_name';\"]\n    res, _, _ = execute_queries(queries, db_name, conn)\n    assert len(res) == 1\n    assert res[0][0] == 'test2'\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: student_club********************\nCREATE TABLE \"income\" (\nincome_id text NOT NULL,\ndate_received text NULL,\namount bigint NULL,\nsource text NULL,\nnotes text NULL,\nlink_to_member text NULL,\n    PRIMARY KEY (income_id),\n    FOREIGN KEY (link_to_member) REFERENCES member(member_id)\n);\n\nExample data:\n        income_id date_received  amount source notes    link_to_member\nrec0s9ZrO15zhzUeE    2019-10-17      50   Dues  None reccW7q1KkhSKZsea\nrec7f5XMQZexgtQJo    2019-09-04      50   Dues  None recTjHY5xXhvkCdVT\nrec8BUJa8GXUjiglg    2019-10-08      50   Dues  None recUdRhbhcEO1Hk5r\n==================================================\n\n\nCREATE TABLE \"budget\" (\nbudget_id text NOT NULL,\ncategory text NULL,\nspent real NULL,\nremaining real NULL,\namount bigint NULL,\nevent_status text NULL,\nlink_to_event text NULL,\n    PRIMARY KEY (budget_id),\n    FOREIGN KEY (link_to_event) REFERENCES event(event_id)\n);\n\nExample data:\n        budget_id      category  spent  remaining  amount event_status     link_to_event\nrec0QmEc3cSQFQ6V2 Advertisement  67.81       7.19      75       Closed recI43CzsZ0Q625ma\nrec1bG6HSft7XIvTP          Food 121.14      28.86     150       Closed recggMW2eyCYceNcy\nrec1z6ISJU2HdIsVm          Food  20.20      -0.20      20       Closed recJ4Witp9tpjaugn\n==================================================\n\n\nCREATE TABLE \"zip_code\" (\nzip_code bigint NOT NULL,\ntype text NULL,\ncity text NULL,\ncounty text NULL,\nstate text NULL,\nshort_state text NULL,\n    PRIMARY KEY (zip_code)\n);\n\nExample data:\n zip_code     type       city             county       state short_state\n      501   Unique Holtsville     Suffolk County    New York          NY\n      544   Unique Holtsville     Suffolk County    New York          NY\n      601 Standard   Adjuntas Adjuntas Municipio Puerto Rico          PR\n==================================================\n\n\nCREATE TABLE \"expense\" (\nexpense_id text NOT NULL,\nexpense_description text NULL,\nexpense_date text NULL,\ncost real NULL,\napproved text NULL,\nlink_to_member text NULL,\nlink_to_budget text NULL,\n    PRIMARY KEY (expense_id)\n);\n\nExample data:\n       expense_id expense_description expense_date   cost approved    link_to_member    link_to_budget\nrec017x6R3hQqkLAo Post Cards, Posters   2019-08-20 122.06     true rec4BLdZHS2Blfp4v recvKTAWAFKkVNnXQ\nrec1nIjoZKTYayqZ6      Water, Cookies   2019-10-08  20.20     true recro8T1MPMwRadVH recy8KY5bUdzF81vv\nrec1oMgNFt7Y0G40x               Pizza   2019-09-10  51.81     true recD078PnS3x2doBe recwXIiKoBMjXJsGZ\n==================================================\n\n\nCREATE TABLE \"member\" (\nmember_id text NOT NULL,\nfirst_name text NULL,\nlast_name text NULL,\nemail text NULL,\nposition text NULL,\nt_shirt_size text NULL,\nphone text NULL,\nzip bigint NULL,\nlink_to_major text NULL,\n    PRIMARY KEY (member_id)\n);\n\nExample data:\n        member_id first_name last_name                  email position t_shirt_size          phone   zip     link_to_major\nrec1x5zBFIqoOuPW8     Angela   Sanders angela.sanders@lpu.edu   Member       Medium (651) 928-4507 55108 recxK3MHQFbR9J5uO\nrec280Sk7o31iG0Tx      Grant   Gilmour  grant.gilmour@lpu.edu   Member      X-Large   403-555-1310 29440 rec7BxKpjJ7bNph3O\nrec28ORZgcm1dtqBZ      Luisa     Guidi    luisa.guidi@lpu.edu   Member       Medium   442-555-5882 10002 recdIBgeU38UbV2sy\n==================================================\n\n\nCREATE TABLE \"attendance\" (\nlink_to_event text NOT NULL,\nlink_to_member text NOT NULL,\n    PRIMARY KEY (link_to_event, link_to_member)\n);\n\nExample data:\n    link_to_event    link_to_member\nrec2N69DMcrqN9PJC recD078PnS3x2doBe\nrec2N69DMcrqN9PJC recP6DJPyi5donvXL\nrec2N69DMcrqN9PJC rec28ORZgcm1dtqBZ\n==================================================\n\n\nCREATE TABLE \"event\" (\nevent_id text NOT NULL,\nevent_name text NULL,\nevent_date text NULL,\ntype text NULL,\nnotes text NULL,\nlocation text NULL,\nstatus text NULL,\n    PRIMARY KEY (event_id)\n);\n\nExample data:\n         event_id                 event_name          event_date     type location status\nrec0Si5cQ4rJRVzd6              March Meeting 2020-03-10T12:00:00  Meeting   MU 215   Open\nrec0akZnLLpGUloLH Officers meeting - January 2020-01-14T09:30:00  Meeting     None   Open\nrec0dZPcWXF0QjNnE           Spring Elections 2019-11-24T09:00:00 Election   MU 215   Open\n==================================================\n\n\nCREATE TABLE \"major\" (\nmajor_id text NOT NULL,\nmajor_name text NULL,\ndepartment text NULL,\ncollege text NULL,\n    PRIMARY KEY (major_id)\n);\n\nExample data:\n         major_id                             major_name                                           department                                     college\nrec06DF6vZ1CyPKpc Outdoor Product Design and Development School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec09LedkREyskCNv             Agricultural Communication School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec0Eanv576RhQllI         Fisheries and Aquatic Sciences                        Watershed Sciences Department                College of Natural Resources\n==================================================\n\n********************Database: student_club********************\n\n# User Query:\nIn the student_club database, I created a unique index on the `event` table using the following queries 'CREATE UNIQUE INDEX unique_name ON event(event_name, event_date) where event_name is not null; CREATE UNIQUE INDEX unique_location ON event(location, event_date) where location is not null;'. However, when I attempt to insert a new record using an UPSERT operation using the query 'insert into event (event_id, event_name, location, event_date) values('test1', 'test_name', 'test_location', 'test_date')on conflict (event_name, location, event_date) do update set event_id = 'test1', event_name = 'test_name', location = 'test_location', event_date = 'test_date'', I encounter an error stating that there is no unique or exclusion constraint matching the ON CONFLICT specification.\n# Error SQL:\nCREATE UNIQUE INDEX unique_name ON event(event_name, event_date) where event_name is not null;CREATE UNIQUE INDEX unique_location ON event(location, event_date) where location is not null;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/44773500/checking-if-a-value-exists-in-another-table-within-the-select-clause", "instance_id": "337_2", "selected_database": "card_games", "query": "I want to query language from the 'set_translations' table and also find if the language exists in the 'foreign_data' table. I have the following query but it doesn't seem to work. Any suggestions what I did wrong?", "error_sql": ["SELECT set_translations.language\n              CASE WHEN set_translations.language IN (SELECT foreign_data.language in foreign_data)\n              THEN 'common'\n              ELSE 'not common'\n              END\n        FROM set_translations\n    "], "sol_sql": ["\n    select set_translations.language, \n    CASE\n        WHEN EXISTS (select *\n                    from foreign_data\n                    where foreign_data.language = set_translations.language)\n        THEN 'common'\n        ELSE 'not common'\n    END\n    from\n    set_translations\n   "], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nI want to query language from the 'set_translations' table and also find if the language exists in the 'foreign_data' table. I have the following query but it doesn't seem to work. Any suggestions what I did wrong?\n# Error SQL:\nSELECT set_translations.language\n              CASE WHEN set_translations.language IN (SELECT foreign_data.language in foreign_data)\n              THEN 'common'\n              ELSE 'not common'\n              END\n        FROM set_translations\n    \nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/41202661/postgres-returning-clause-with-join", "instance_id": "338_1", "selected_database": "debit_card_specializing", "query": "In the following SQL, how could I make the `RETURNING` clause join to something else and return the joined row(s)? Here it only returns the row from `transactions_1k` that was updated, but I'd like it to return that row joined to something in another table, e.g. joined to `customers` tables and get both `transactions_1k.transactionid` and `customers.Segment` columns.", "error_sql": ["\n    UPDATE transactions_1k \n    SET Amount = 100 \n    FROM ( SELECT TransactionID FROM transactions_1k WHERE Amount = 50 ORDER BY Date LIMIT 100 FOR UPDATE ) sub \n    WHERE transactions_1k.TransactionID = sub.TransactionID RETURNING *;\n    "], "sol_sql": ["\n    UPDATE transactions_1k \n    SET Amount = 100 \n    FROM ( SELECT customerid, transactionid FROM transactions_1k WHERE Amount = 50 ORDER BY Date LIMIT 100 FOR UPDATE ) sub \n    JOIN customers c ON c.customerid = sub.customerid WHERE transactions_1k.transactionid = sub.transactionid RETURNING transactions_1k.transactionid, c.Segment;\n   "], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\nimport datetime\n\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    global pred_query_result\n    assert len(pred_query_result) == 2\n    assert pred_query_result == [(947, 'SME'), (988, 'KAM')]"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: debit_card_specializing********************\nCREATE TABLE \"customers\" (\ncustomerid bigint NOT NULL,\nsegment text NULL,\ncurrency text NULL,\n    PRIMARY KEY (customerid)\n);\n\nExample data:\n customerid segment currency\n          3     SME      EUR\n          5     LAM      EUR\n          6     SME      EUR\n==================================================\n\n\nCREATE TABLE \"gasstations\" (\ngasstationid bigint NOT NULL,\nchainid bigint NULL,\ncountry text NULL,\nsegment text NULL,\n    PRIMARY KEY (gasstationid)\n);\n\nExample data:\n gasstationid  chainid country         segment\n           44       13     CZE Value for money\n           45        6     CZE         Premium\n           46       23     CZE           Other\n==================================================\n\n\nCREATE TABLE \"products\" (\nproductid bigint NOT NULL,\ndescription text NULL,\n    PRIMARY KEY (productid)\n);\n\nExample data:\n productid  description\n         1 Rucní zadání\n         2        Nafta\n         3      Special\n==================================================\n\n\nCREATE TABLE \"yearmonth\" (\ncustomerid bigint NULL,\ndate text NULL,\nconsumption real NULL\n);\n\nExample data:\n customerid   date  consumption\n          5 201207       528.30\n          5 201302      1598.28\n          5 201303      1931.36\n==================================================\n\n\nCREATE TABLE \"transactions_1k\" (\ntransactionid bigint NOT NULL DEFAULT nextval('transactions_1k_transactionid_seq'::regclass),\ndate date NULL,\ntime text NULL,\ncustomerid bigint NULL,\ncardid bigint NULL,\ngasstationid bigint NULL,\nproductid bigint NULL,\namount bigint NULL,\nprice real NULL,\n    PRIMARY KEY (transactionid)\n);\n\nExample data:\n transactionid       date     time  customerid  cardid  gasstationid  productid  amount  price\n             1 2012-08-24 09:41:00       31543  486621          3704          2      28 672.64\n             2 2012-08-24 10:03:00       46707  550134          3704          2      18 430.72\n             3 2012-08-24 10:03:00       46707  550134          3704         23       1 121.99\n==================================================\n\n********************Database: debit_card_specializing********************\n\n# User Query:\nIn the following SQL, how could I make the `RETURNING` clause join to something else and return the joined row(s)? Here it only returns the row from `transactions_1k` that was updated, but I'd like it to return that row joined to something in another table, e.g. joined to `customers` tables and get both `transactions_1k.transactionid` and `customers.Segment` columns.\n# Error SQL:\n\n    UPDATE transactions_1k \n    SET Amount = 100 \n    FROM ( SELECT TransactionID FROM transactions_1k WHERE Amount = 50 ORDER BY Date LIMIT 100 FOR UPDATE ) sub \n    WHERE transactions_1k.TransactionID = sub.TransactionID RETURNING *;\n    \nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/72084303/filtering-in-count-function-postgresql", "instance_id": "235_3", "selected_database": "codebase_community", "query": "I have a query that calculates the number of referrals each user has made. However, I want to count a referral only if the referred user has activated their premium account. How can I achieve this?", "error_sql": ["SELECT users.Id, COUNT(posts.Id) as answered FROM users LEFT JOIN posts ON users.Id = posts.OwnerUserId GROUP BY users.Id ORDER BY answered DESC;"], "sol_sql": ["SELECT users.Id, COUNT(posts.Id) FILTER (WHERE AnswerCount > 0) as answered FROM users LEFT JOIN posts ON users.Id = posts.OwnerUserId GROUP BY users.Id ORDER BY answered DESC;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: codebase_community********************\nCREATE TABLE \"postlinks\" (\nid bigint NOT NULL,\ncreationdate timestamp with time zone NULL,\npostid bigint NULL,\nrelatedpostid bigint NULL,\nlinktypeid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id              creationdate  postid  relatedpostid  linktypeid\n108 2010-07-21 14:47:33+08:00     395            173           1\n145 2010-07-23 16:30:41+08:00     548            539           1\n217 2010-07-26 20:12:15+08:00     375             30           1\n==================================================\n\n\nCREATE TABLE \"posthistory\" (\nid bigint NOT NULL,\nposthistorytypeid bigint NULL,\npostid bigint NULL,\nrevisionguid text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\ntext text NULL,\ncomment text NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  posthistorytypeid  postid                         revisionguid              creationdate  userid comment userdisplayname\n  1                  2       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  2                  1       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  3                  3       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n==================================================\n\n\nCREATE TABLE \"badges\" (\nid bigint NOT NULL,\nuserid bigint NULL,\nname text NULL,\ndate timestamp with time zone NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  userid    name                      date\n  1       5 Teacher 2010-07-19 19:39:07+08:00\n  2       6 Teacher 2010-07-19 19:39:07+08:00\n  3       8 Teacher 2010-07-19 19:39:07+08:00\n==================================================\n\n\nCREATE TABLE \"posts\" (\nid bigint NOT NULL,\nposttypeid bigint NULL,\nacceptedanswerid bigint NULL,\ncreaiondate timestamp with time zone NULL,\nscore bigint NULL,\nviewcount bigint NULL,\nbody text NULL,\nowneruserid bigint NULL,\nlasactivitydate timestamp with time zone NULL,\ntitle text NULL,\ntags text NULL,\nanswercount bigint NULL,\ncommentcount bigint NULL,\nfavoritecount bigint NULL,\nlasteditoruserid bigint NULL,\nlasteditdate timestamp with time zone NULL,\ncommunityowneddate timestamp with time zone NULL,\nparentid bigint NULL,\ncloseddate timestamp with time zone NULL,\nownerdisplayname text NULL,\nlasteditordisplayname text NULL,\n    PRIMARY KEY (id),\n    FOREIGN KEY (lasteditoruserid) REFERENCES users(id),\n    FOREIGN KEY (owneruserid) REFERENCES users(id)\n);\n\nExample data:\n id  posttypeid  acceptedanswerid               creaiondate  score  viewcount  owneruserid           lasactivitydate                                                             title                           tags  answercount  commentcount  favoritecount  lasteditoruserid              lasteditdate        communityowneddate parentid closeddate ownerdisplayname lasteditordisplayname\n  1           1                15 2010-07-19 19:12:12+08:00     23       1278            8 2010-09-15 21:08:26+08:00                                     Eliciting priors from experts <bayesian><prior><elicitation>            5             1             14               NaN                       NaT                       NaT     None       None             None                  None\n  2           1                59 2010-07-19 19:12:57+08:00     22       8198           24 2012-11-12 09:21:54+08:00                                                What is normality?     <distributions><normality>            7             1              8              88.0 2010-08-07 17:56:44+08:00                       NaT     None       None             None                  None\n  3           1                 5 2010-07-19 19:13:28+08:00     54       3613           18 2013-05-27 14:48:36+08:00 What are some valuable Statistical Analysis open source projects?        <software><open-source>           19             4             36             183.0 2011-02-12 05:50:03+08:00 2010-07-19 19:13:28+08:00     None       None             None                  None\n==================================================\n\n\nCREATE TABLE \"users\" (\nid bigint NOT NULL,\nreputation bigint NULL,\ncreationdate timestamp with time zone NULL,\ndisplayname text NULL,\nlastaccessdate timestamp with time zone NULL,\nwebsiteurl text NULL,\nlocation text NULL,\naboutme text NULL,\nviews bigint NULL,\nupvotes bigint NULL,\ndownvotes bigint NULL,\naccountid bigint NULL,\nage bigint NULL,\nprofileimageurl text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  reputation              creationdate  displayname            lastaccessdate                     websiteurl           location  views  upvotes  downvotes  accountid  age\n -1           1 2010-07-19 06:55:26+08:00    Community 2010-07-19 06:55:26+08:00 http://meta.stackexchange.com/ on the server farm      0     5007       1920         -1  NaN\n  2         101 2010-07-19 14:01:36+08:00 Geoff Dalgas 2013-11-12 22:07:23+08:00       http://stackoverflow.com      Corvallis, OR     25        3          0          2 37.0\n  3         101 2010-07-19 15:34:50+08:00 Jarrod Dixon 2014-08-08 06:42:58+08:00       http://stackoverflow.com       New York, NY     22       19          0          3 35.0\n==================================================\n\n\nCREATE TABLE \"tags\" (\nid bigint NOT NULL,\ntagname text NULL,\ncount bigint NULL,\nexcerptpostid bigint NULL,\nwikipostid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id     tagname  count  excerptpostid  wikipostid\n  1    bayesian   1342        20258.0     20257.0\n  2       prior    168        62158.0     62157.0\n  3 elicitation      6            NaN         NaN\n==================================================\n\n\nCREATE TABLE \"votes\" (\nid bigint NOT NULL,\npostid bigint NULL,\nvotetypeid bigint NULL,\ncreationdate date NULL,\nuserid bigint NULL,\nbountyamount bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  votetypeid creationdate userid bountyamount\n  1       3           2   2010-07-19   None         None\n  2       2           2   2010-07-19   None         None\n  3       5           2   2010-07-19   None         None\n==================================================\n\n\nCREATE TABLE \"comments\" (\nid bigint NOT NULL,\npostid bigint NULL,\nscore bigint NULL,\ntext text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  score              creationdate  userid userdisplayname\n  1       3      5 2010-07-19 19:15:52+08:00      13            None\n  2       5      0 2010-07-19 19:16:14+08:00      13            None\n  3       9      0 2010-07-19 19:18:54+08:00      13            None\n==================================================\n\n********************Database: codebase_community********************\n\n# User Query:\nI have a query that calculates the number of referrals each user has made. However, I want to count a referral only if the referred user has activated their premium account. How can I achieve this?\n# Error SQL:\nSELECT users.Id, COUNT(posts.Id) as answered FROM users LEFT JOIN posts ON users.Id = posts.OwnerUserId GROUP BY users.Id ORDER BY answered DESC;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/34708509/how-to-use-returning-with-on-conflict-in-postgresql", "instance_id": "231_2", "selected_database": "card_games", "query": "In the card_games database, we have a table named 'sets' which stores information about different card sets. Each set has a unique code and a name. We want to upsert data into this table where we insert a new set if it doesn't exist or update the existing set if it does. Specifically, we want to insert or update sets with the following data: ('10E', 'Tenth Edition') and ('2ED', 'Unlimited Edition'). If the set already exists, we want to update the name to the new value provided. However, the current UPSERT query does not return the IDs of the inserted or updated rows when there are no conflicts, and it returns nothing when there are conflicts. We need a query that returns the IDs of the inserted or updated rows regardless of whether there were conflicts or not.", "error_sql": ["INSERT INTO sets (code, name) VALUES ('10E', 'Tenth Edition'), ('2ED', 'Unlimited Edition') ON CONFLICT(code) DO NOTHING RETURNING id;"], "sol_sql": ["INSERT INTO sets (code, name) VALUES ('10E', 'Tenth Edition'), ('2ED', 'Unlimited Edition') ON CONFLICT(code) DO UPDATE SET name = EXCLUDED.name RETURNING id;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_pred_query_result_1 = execute_queries([\"SELECT name FROM sets WHERE code = '10E';\"], db_name,conn)[0] \n    assert test_pred_query_result_1[0][0] == 'Tenth Edition', f'Expected name to match, but found {test_pred_query_result_1[0][0]}'\n    test_pred_query_result_1 = execute_queries([\"SELECT name FROM sets WHERE code = '2ED';\"], db_name,conn)[0]\n    assert test_pred_query_result_1[0][0] == 'Unlimited Edition', f'Expected name to match, but found {test_pred_query_result_1[0][0]}'", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    global pred_query_result\n    assert len(pred_query_result) == 2, f'Expected 2 rows, but found {len(pred_query_result)} rows' \n    assert pred_query_result[0][0] == 1, f'Expected duplicate id is 1, but found {pred_query_result[0][0]}'\n    assert pred_query_result[1][0] == 2, f'Expected duplicate id is 2, but found {pred_query_result[1][0]}'\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nIn the card_games database, we have a table named 'sets' which stores information about different card sets. Each set has a unique code and a name. We want to upsert data into this table where we insert a new set if it doesn't exist or update the existing set if it does. Specifically, we want to insert or update sets with the following data: ('10E', 'Tenth Edition') and ('2ED', 'Unlimited Edition'). If the set already exists, we want to update the name to the new value provided. However, the current UPSERT query does not return the IDs of the inserted or updated rows when there are no conflicts, and it returns nothing when there are conflicts. We need a query that returns the IDs of the inserted or updated rows regardless of whether there were conflicts or not.\n# Error SQL:\nINSERT INTO sets (code, name) VALUES ('10E', 'Tenth Edition'), ('2ED', 'Unlimited Edition') ON CONFLICT(code) DO NOTHING RETURNING id;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/35338711/cannot-drop-table-users-because-other-objects-depend-on-it", "instance_id": "233_3", "selected_database": "codebase_community", "query": "I want to drop the 'users' table from the 'codebase_community' database. However, when I attempt to drop the table using the SQL command `DROP TABLE IF EXISTS users;`, I encounter an error message stating: 'cannot drop table users because other objects depend on it'. This issue arises because the 'users' table is referenced by foreign keys in other tables such as 'badges', 'comments', 'postHistory', 'posts', and 'votes'. I am seeking a solution to drop the 'users' table without having to remove all dependent tables or data.", "error_sql": ["DROP TABLE IF EXISTS users;"], "sol_sql": ["DROP TABLE IF EXISTS users CASCADE;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_users_table = execute_queries([\"SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'users';\"], 'codebase_community',conn)[0]\n    assert test_users_table[0][0] == 0, 'Users table should be dropped.'", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_posts_lasteditoruserid_fkey = execute_queries([\"SELECT COUNT(*) FROM information_schema.table_constraints WHERE table_name = 'posts' AND constraint_name = 'posts_ibfk_1';\"], 'codebase_community',conn)[0] \n    assert test_posts_lasteditoruserid_fkey[0][0] == 0, 'Foreign key posts_lasteditoruserid_fkey should be dropped.'\n    test_posts_owneruserid_fkey = execute_queries([\"SELECT COUNT(*) FROM information_schema.table_constraints WHERE table_name = 'posts' AND constraint_name = 'posts_ibfk_2';\"], 'codebase_community',conn)[0] \n    assert test_posts_owneruserid_fkey[0][0] == 0, 'Foreign key posts_owneruserid_fkey should be dropped.'\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: codebase_community********************\nCREATE TABLE \"postlinks\" (\nid bigint NOT NULL,\ncreationdate timestamp with time zone NULL,\npostid bigint NULL,\nrelatedpostid bigint NULL,\nlinktypeid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id              creationdate  postid  relatedpostid  linktypeid\n108 2010-07-21 14:47:33+08:00     395            173           1\n145 2010-07-23 16:30:41+08:00     548            539           1\n217 2010-07-26 20:12:15+08:00     375             30           1\n==================================================\n\n\nCREATE TABLE \"posthistory\" (\nid bigint NOT NULL,\nposthistorytypeid bigint NULL,\npostid bigint NULL,\nrevisionguid text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\ntext text NULL,\ncomment text NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  posthistorytypeid  postid                         revisionguid              creationdate  userid comment userdisplayname\n  1                  2       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  2                  1       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  3                  3       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n==================================================\n\n\nCREATE TABLE \"badges\" (\nid bigint NOT NULL,\nuserid bigint NULL,\nname text NULL,\ndate timestamp with time zone NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  userid    name                      date\n  1       5 Teacher 2010-07-19 19:39:07+08:00\n  2       6 Teacher 2010-07-19 19:39:07+08:00\n  3       8 Teacher 2010-07-19 19:39:07+08:00\n==================================================\n\n\nCREATE TABLE \"posts\" (\nid bigint NOT NULL,\nposttypeid bigint NULL,\nacceptedanswerid bigint NULL,\ncreaiondate timestamp with time zone NULL,\nscore bigint NULL,\nviewcount bigint NULL,\nbody text NULL,\nowneruserid bigint NULL,\nlasactivitydate timestamp with time zone NULL,\ntitle text NULL,\ntags text NULL,\nanswercount bigint NULL,\ncommentcount bigint NULL,\nfavoritecount bigint NULL,\nlasteditoruserid bigint NULL,\nlasteditdate timestamp with time zone NULL,\ncommunityowneddate timestamp with time zone NULL,\nparentid bigint NULL,\ncloseddate timestamp with time zone NULL,\nownerdisplayname text NULL,\nlasteditordisplayname text NULL,\n    PRIMARY KEY (id),\n    FOREIGN KEY (lasteditoruserid) REFERENCES users(id),\n    FOREIGN KEY (owneruserid) REFERENCES users(id)\n);\n\nExample data:\n id  posttypeid  acceptedanswerid               creaiondate  score  viewcount  owneruserid           lasactivitydate                                                             title                           tags  answercount  commentcount  favoritecount  lasteditoruserid              lasteditdate        communityowneddate parentid closeddate ownerdisplayname lasteditordisplayname\n  1           1                15 2010-07-19 19:12:12+08:00     23       1278            8 2010-09-15 21:08:26+08:00                                     Eliciting priors from experts <bayesian><prior><elicitation>            5             1             14               NaN                       NaT                       NaT     None       None             None                  None\n  2           1                59 2010-07-19 19:12:57+08:00     22       8198           24 2012-11-12 09:21:54+08:00                                                What is normality?     <distributions><normality>            7             1              8              88.0 2010-08-07 17:56:44+08:00                       NaT     None       None             None                  None\n  3           1                 5 2010-07-19 19:13:28+08:00     54       3613           18 2013-05-27 14:48:36+08:00 What are some valuable Statistical Analysis open source projects?        <software><open-source>           19             4             36             183.0 2011-02-12 05:50:03+08:00 2010-07-19 19:13:28+08:00     None       None             None                  None\n==================================================\n\n\nCREATE TABLE \"users\" (\nid bigint NOT NULL,\nreputation bigint NULL,\ncreationdate timestamp with time zone NULL,\ndisplayname text NULL,\nlastaccessdate timestamp with time zone NULL,\nwebsiteurl text NULL,\nlocation text NULL,\naboutme text NULL,\nviews bigint NULL,\nupvotes bigint NULL,\ndownvotes bigint NULL,\naccountid bigint NULL,\nage bigint NULL,\nprofileimageurl text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  reputation              creationdate  displayname            lastaccessdate                     websiteurl           location  views  upvotes  downvotes  accountid  age\n -1           1 2010-07-19 06:55:26+08:00    Community 2010-07-19 06:55:26+08:00 http://meta.stackexchange.com/ on the server farm      0     5007       1920         -1  NaN\n  2         101 2010-07-19 14:01:36+08:00 Geoff Dalgas 2013-11-12 22:07:23+08:00       http://stackoverflow.com      Corvallis, OR     25        3          0          2 37.0\n  3         101 2010-07-19 15:34:50+08:00 Jarrod Dixon 2014-08-08 06:42:58+08:00       http://stackoverflow.com       New York, NY     22       19          0          3 35.0\n==================================================\n\n\nCREATE TABLE \"tags\" (\nid bigint NOT NULL,\ntagname text NULL,\ncount bigint NULL,\nexcerptpostid bigint NULL,\nwikipostid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id     tagname  count  excerptpostid  wikipostid\n  1    bayesian   1342        20258.0     20257.0\n  2       prior    168        62158.0     62157.0\n  3 elicitation      6            NaN         NaN\n==================================================\n\n\nCREATE TABLE \"votes\" (\nid bigint NOT NULL,\npostid bigint NULL,\nvotetypeid bigint NULL,\ncreationdate date NULL,\nuserid bigint NULL,\nbountyamount bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  votetypeid creationdate userid bountyamount\n  1       3           2   2010-07-19   None         None\n  2       2           2   2010-07-19   None         None\n  3       5           2   2010-07-19   None         None\n==================================================\n\n\nCREATE TABLE \"comments\" (\nid bigint NOT NULL,\npostid bigint NULL,\nscore bigint NULL,\ntext text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  score              creationdate  userid userdisplayname\n  1       3      5 2010-07-19 19:15:52+08:00      13            None\n  2       5      0 2010-07-19 19:16:14+08:00      13            None\n  3       9      0 2010-07-19 19:18:54+08:00      13            None\n==================================================\n\n********************Database: codebase_community********************\n\n# User Query:\nI want to drop the 'users' table from the 'codebase_community' database. However, when I attempt to drop the table using the SQL command `DROP TABLE IF EXISTS users;`, I encounter an error message stating: 'cannot drop table users because other objects depend on it'. This issue arises because the 'users' table is referenced by foreign keys in other tables such as 'badges', 'comments', 'postHistory', 'posts', and 'votes'. I am seeking a solution to drop the 'users' table without having to remove all dependent tables or data.\n# Error SQL:\nDROP TABLE IF EXISTS users;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/54149272/equivalent-of-on-conflict-do-nothing-for-update-postgres", "instance_id": "234_3", "selected_database": "student_club", "query": "We have an attendance table where each row is identified by (link_to_member, link_to_event) as the primary key. Suppose the member with ID 'rec280Sk7o31iG0Tx' (e.g., John Smith) is currently attending an event 'recggMW2eyCYceNcy' (an old event). We want to update that member's attendance record so that instead they will attend 'recI43CzsZ0Q625ma' (the new event). However, if the member already has a record for the new event, then the UPDATE would violate the primary key constraint. In that case, we want to skip the update entirely. Therefore, we must add a NOT EXISTS clause to check if the new (link_to_member, link_to_event) pair is already in the table, and only proceed with the update if it's safe to do so.", "error_sql": ["UPDATE attendance SET link_to_event = 'recI43CzsZ0Q625ma' WHERE link_to_member = 'rec280Sk7o31iG0Tx' AND link_to_event = 'recggMW2eyCYceNcy';"], "sol_sql": ["UPDATE attendance SET link_to_event = 'recI43CzsZ0Q625ma' WHERE link_to_member = 'rec280Sk7o31iG0Tx' AND link_to_event = 'recggMW2eyCYceNcy' AND NOT EXISTS (SELECT 1 FROM attendance WHERE link_to_member = 'rec280Sk7o31iG0Tx' AND link_to_event = 'recI43CzsZ0Q625ma');"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_pred_query_result_1 = execute_queries([\"SELECT * FROM attendance WHERE link_to_member = 'rec280Sk7o31iG0Tx' AND link_to_event = \\'recI43CzsZ0Q625ma\\';\"], 'student_club',conn)[0] \n    test_pred_query_result_2 = execute_queries([\"SELECT * FROM attendance WHERE link_to_member = 'rec280Sk7o31iG0Tx' AND link_to_event = 'recggMW2eyCYceNcy';\"], 'student_club',conn)[0] \n    assert len(test_pred_query_result_2) == 1, 'The update does not happen.'", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_pred_query_result_3 = execute_queries([\"SELECT * FROM attendance WHERE link_to_event = 'recI43CzsZ0Q625ma';\"], 'student_club',conn)[0] \n    assert len(test_pred_query_result_3) == 27, f'There should be 27 records with link_to_event = recI43CzsZ0Q625ma but not {test_pred_query_result_3}'\n    test_pred_query_result_4 = execute_queries([\"SELECT COUNT(*) FROM attendance WHERE link_to_member = 'rec280Sk7o31iG0Tx' AND link_to_event = 'recI43CzsZ0Q625ma';\"], 'student_club',conn)[0] \n    assert test_pred_query_result_4[0][0] == 1, 'There should be exactly one record with the updated link_to_event.'\n    test_pred_query_result_5 = execute_queries(['SELECT COUNT(*) FROM attendance;'], 'student_club',conn)[0] \n    assert test_pred_query_result_5[0][0] == 326, 'The total number of records in the attendance table should remain unchanged after the update.'\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: student_club********************\nCREATE TABLE \"income\" (\nincome_id text NOT NULL,\ndate_received text NULL,\namount bigint NULL,\nsource text NULL,\nnotes text NULL,\nlink_to_member text NULL,\n    PRIMARY KEY (income_id),\n    FOREIGN KEY (link_to_member) REFERENCES member(member_id)\n);\n\nExample data:\n        income_id date_received  amount source notes    link_to_member\nrec0s9ZrO15zhzUeE    2019-10-17      50   Dues  None reccW7q1KkhSKZsea\nrec7f5XMQZexgtQJo    2019-09-04      50   Dues  None recTjHY5xXhvkCdVT\nrec8BUJa8GXUjiglg    2019-10-08      50   Dues  None recUdRhbhcEO1Hk5r\n==================================================\n\n\nCREATE TABLE \"budget\" (\nbudget_id text NOT NULL,\ncategory text NULL,\nspent real NULL,\nremaining real NULL,\namount bigint NULL,\nevent_status text NULL,\nlink_to_event text NULL,\n    PRIMARY KEY (budget_id),\n    FOREIGN KEY (link_to_event) REFERENCES event(event_id)\n);\n\nExample data:\n        budget_id      category  spent  remaining  amount event_status     link_to_event\nrec0QmEc3cSQFQ6V2 Advertisement  67.81       7.19      75       Closed recI43CzsZ0Q625ma\nrec1bG6HSft7XIvTP          Food 121.14      28.86     150       Closed recggMW2eyCYceNcy\nrec1z6ISJU2HdIsVm          Food  20.20      -0.20      20       Closed recJ4Witp9tpjaugn\n==================================================\n\n\nCREATE TABLE \"zip_code\" (\nzip_code bigint NOT NULL,\ntype text NULL,\ncity text NULL,\ncounty text NULL,\nstate text NULL,\nshort_state text NULL,\n    PRIMARY KEY (zip_code)\n);\n\nExample data:\n zip_code     type       city             county       state short_state\n      501   Unique Holtsville     Suffolk County    New York          NY\n      544   Unique Holtsville     Suffolk County    New York          NY\n      601 Standard   Adjuntas Adjuntas Municipio Puerto Rico          PR\n==================================================\n\n\nCREATE TABLE \"expense\" (\nexpense_id text NOT NULL,\nexpense_description text NULL,\nexpense_date text NULL,\ncost real NULL,\napproved text NULL,\nlink_to_member text NULL,\nlink_to_budget text NULL,\n    PRIMARY KEY (expense_id)\n);\n\nExample data:\n       expense_id expense_description expense_date   cost approved    link_to_member    link_to_budget\nrec017x6R3hQqkLAo Post Cards, Posters   2019-08-20 122.06     true rec4BLdZHS2Blfp4v recvKTAWAFKkVNnXQ\nrec1nIjoZKTYayqZ6      Water, Cookies   2019-10-08  20.20     true recro8T1MPMwRadVH recy8KY5bUdzF81vv\nrec1oMgNFt7Y0G40x               Pizza   2019-09-10  51.81     true recD078PnS3x2doBe recwXIiKoBMjXJsGZ\n==================================================\n\n\nCREATE TABLE \"member\" (\nmember_id text NOT NULL,\nfirst_name text NULL,\nlast_name text NULL,\nemail text NULL,\nposition text NULL,\nt_shirt_size text NULL,\nphone text NULL,\nzip bigint NULL,\nlink_to_major text NULL,\n    PRIMARY KEY (member_id)\n);\n\nExample data:\n        member_id first_name last_name                  email position t_shirt_size          phone   zip     link_to_major\nrec1x5zBFIqoOuPW8     Angela   Sanders angela.sanders@lpu.edu   Member       Medium (651) 928-4507 55108 recxK3MHQFbR9J5uO\nrec280Sk7o31iG0Tx      Grant   Gilmour  grant.gilmour@lpu.edu   Member      X-Large   403-555-1310 29440 rec7BxKpjJ7bNph3O\nrec28ORZgcm1dtqBZ      Luisa     Guidi    luisa.guidi@lpu.edu   Member       Medium   442-555-5882 10002 recdIBgeU38UbV2sy\n==================================================\n\n\nCREATE TABLE \"attendance\" (\nlink_to_event text NOT NULL,\nlink_to_member text NOT NULL,\n    PRIMARY KEY (link_to_event, link_to_member)\n);\n\nExample data:\n    link_to_event    link_to_member\nrec2N69DMcrqN9PJC recD078PnS3x2doBe\nrec2N69DMcrqN9PJC recP6DJPyi5donvXL\nrec2N69DMcrqN9PJC rec28ORZgcm1dtqBZ\n==================================================\n\n\nCREATE TABLE \"event\" (\nevent_id text NOT NULL,\nevent_name text NULL,\nevent_date text NULL,\ntype text NULL,\nnotes text NULL,\nlocation text NULL,\nstatus text NULL,\n    PRIMARY KEY (event_id)\n);\n\nExample data:\n         event_id                 event_name          event_date     type location status\nrec0Si5cQ4rJRVzd6              March Meeting 2020-03-10T12:00:00  Meeting   MU 215   Open\nrec0akZnLLpGUloLH Officers meeting - January 2020-01-14T09:30:00  Meeting     None   Open\nrec0dZPcWXF0QjNnE           Spring Elections 2019-11-24T09:00:00 Election   MU 215   Open\n==================================================\n\n\nCREATE TABLE \"major\" (\nmajor_id text NOT NULL,\nmajor_name text NULL,\ndepartment text NULL,\ncollege text NULL,\n    PRIMARY KEY (major_id)\n);\n\nExample data:\n         major_id                             major_name                                           department                                     college\nrec06DF6vZ1CyPKpc Outdoor Product Design and Development School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec09LedkREyskCNv             Agricultural Communication School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec0Eanv576RhQllI         Fisheries and Aquatic Sciences                        Watershed Sciences Department                College of Natural Resources\n==================================================\n\n********************Database: student_club********************\n\n# User Query:\nWe have an attendance table where each row is identified by (link_to_member, link_to_event) as the primary key. Suppose the member with ID 'rec280Sk7o31iG0Tx' (e.g., John Smith) is currently attending an event 'recggMW2eyCYceNcy' (an old event). We want to update that member's attendance record so that instead they will attend 'recI43CzsZ0Q625ma' (the new event). However, if the member already has a record for the new event, then the UPDATE would violate the primary key constraint. In that case, we want to skip the update entirely. Therefore, we must add a NOT EXISTS clause to check if the new (link_to_member, link_to_event) pair is already in the table, and only proceed with the update if it's safe to do so.\n# Error SQL:\nUPDATE attendance SET link_to_event = 'recI43CzsZ0Q625ma' WHERE link_to_member = 'rec280Sk7o31iG0Tx' AND link_to_event = 'recggMW2eyCYceNcy';\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/76339018/merging-users-with-multiple-refs-and-count-their-collective-assets", "instance_id": "236_2", "selected_database": "student_club", "query": "In database student_club, there is a set of users. A student can have multiple users, but ref1 and ref2 might be alike and can therefore link users together. ref1 and ref2 does not overlap, one value in ref1 does not exist in ref2.  A user can own multiple assets. I want to \"merge\" users that has one or more refs alike and then count how many assets they own together. There could be missing entries in the user table, in that case I just want to propagate the owner into ref2 and set the asset_count and asset_ids.", "error_sql": ["SELECT  ARRAY_AGG(DISTINCT u.id) AS ids, ARRAY_AGG(DISTINCT u.username) AS usernames, ARRAY_AGG(DISTINCT u.ref1) AS refs1, ARRAY_AGG(DISTINCT u.ref2) AS refs2,  COUNT(DISTINCT a.id) AS asset_count FROM assets a JOIN users u ON a.owner = u.ref1 OR a.owner = u.ref2 GROUP BY a.owner ORDER BY MIN(a.id);"], "sol_sql": ["WITH RECURSIVE nodes AS (SELECT u.id, r.ref FROM users u CROSS JOIN LATERAL (VALUES (u.ref1), (u.ref2)) r(ref)), edges AS (SELECT DISTINCT n1.id AS id1, n2.id AS id2 FROM nodes n1 INNER JOIN nodes n2 ON n1.ref = n2.ref), rcte AS (SELECT id1, id2, ARRAY[id1] AS visited FROM edges WHERE id1 = id2 UNION ALL SELECT r.id1, e.id2, r.visited || e.id2 FROM rcte r INNER JOIN edges e ON e.id1 = r.id2 WHERE e.id2 <> ALL(r.visited)), groups AS (SELECT id1 AS id, ARRAY_AGG(DISTINCT id2 ORDER BY id2) AS ids FROM rcte GROUP BY id1) SELECT g.ids, array_agg(DISTINCT u.username) AS usernames, array_agg(DISTINCT u.ref1) AS refs1, CASE WHEN g.ids IS NULL THEN array_agg(DISTINCT a.owner) ELSE array_agg(DISTINCT u.ref2) END AS refs2, array_agg(DISTINCT a.id) AS asset_ids, COUNT(DISTINCT a.id) AS asset_count FROM assets a LEFT JOIN users u ON a.owner IN (u.ref1, u.ref2) LEFT JOIN groups g ON g.id = u.id GROUP BY g.ids;"], "preprocess_sql": ["CREATE TABLE assets (id serial, name text, owner text, PRIMARY KEY(id));", "CREATE TABLE users (id serial, username text, ref1 text, ref2 text, PRIMARY KEY(id));", "INSERT INTO assets (name, owner) VALUES ('#1', 'a'), ('#2', 'b'), ('#3', 'c'), ('#4', 'a'), ('#5', 'c'), ('#6', 'd'), ('#7', 'e'), ('#8', 'd'), ('#9', 'a'), ('#10', 'a'), ('#11', 'z');", "INSERT INTO users (username, ref1, ref2) VALUES ('bobo', 'a', 'd'), ('toto', 'b', 'e'), ('momo', 'c', 'd'), ('lolo', 'a', 'f'), ('popo', 'c', 'f');"], "clean_up_sql": ["drop table if exists users;", "drop table if exists assets;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls_result = execute_queries(pred_sqls, 'student_club', conn)\n    sol_sqls_result = execute_queries(sol_sqls, 'student_club', conn)\n    assert pred_sqls_result == sol_sqls_result, f\"Expected pred_result and sol_result are the same but pred_result is {pred_sqls_result} and sol_result is {sol_sqls_result}.\"\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: student_club********************\nCREATE TABLE \"income\" (\nincome_id text NOT NULL,\ndate_received text NULL,\namount bigint NULL,\nsource text NULL,\nnotes text NULL,\nlink_to_member text NULL,\n    PRIMARY KEY (income_id),\n    FOREIGN KEY (link_to_member) REFERENCES member(member_id)\n);\n\nExample data:\n        income_id date_received  amount source notes    link_to_member\nrec0s9ZrO15zhzUeE    2019-10-17      50   Dues  None reccW7q1KkhSKZsea\nrec7f5XMQZexgtQJo    2019-09-04      50   Dues  None recTjHY5xXhvkCdVT\nrec8BUJa8GXUjiglg    2019-10-08      50   Dues  None recUdRhbhcEO1Hk5r\n==================================================\n\n\nCREATE TABLE \"budget\" (\nbudget_id text NOT NULL,\ncategory text NULL,\nspent real NULL,\nremaining real NULL,\namount bigint NULL,\nevent_status text NULL,\nlink_to_event text NULL,\n    PRIMARY KEY (budget_id),\n    FOREIGN KEY (link_to_event) REFERENCES event(event_id)\n);\n\nExample data:\n        budget_id      category  spent  remaining  amount event_status     link_to_event\nrec0QmEc3cSQFQ6V2 Advertisement  67.81       7.19      75       Closed recI43CzsZ0Q625ma\nrec1bG6HSft7XIvTP          Food 121.14      28.86     150       Closed recggMW2eyCYceNcy\nrec1z6ISJU2HdIsVm          Food  20.20      -0.20      20       Closed recJ4Witp9tpjaugn\n==================================================\n\n\nCREATE TABLE \"zip_code\" (\nzip_code bigint NOT NULL,\ntype text NULL,\ncity text NULL,\ncounty text NULL,\nstate text NULL,\nshort_state text NULL,\n    PRIMARY KEY (zip_code)\n);\n\nExample data:\n zip_code     type       city             county       state short_state\n      501   Unique Holtsville     Suffolk County    New York          NY\n      544   Unique Holtsville     Suffolk County    New York          NY\n      601 Standard   Adjuntas Adjuntas Municipio Puerto Rico          PR\n==================================================\n\n\nCREATE TABLE \"expense\" (\nexpense_id text NOT NULL,\nexpense_description text NULL,\nexpense_date text NULL,\ncost real NULL,\napproved text NULL,\nlink_to_member text NULL,\nlink_to_budget text NULL,\n    PRIMARY KEY (expense_id)\n);\n\nExample data:\n       expense_id expense_description expense_date   cost approved    link_to_member    link_to_budget\nrec017x6R3hQqkLAo Post Cards, Posters   2019-08-20 122.06     true rec4BLdZHS2Blfp4v recvKTAWAFKkVNnXQ\nrec1nIjoZKTYayqZ6      Water, Cookies   2019-10-08  20.20     true recro8T1MPMwRadVH recy8KY5bUdzF81vv\nrec1oMgNFt7Y0G40x               Pizza   2019-09-10  51.81     true recD078PnS3x2doBe recwXIiKoBMjXJsGZ\n==================================================\n\n\nCREATE TABLE \"member\" (\nmember_id text NOT NULL,\nfirst_name text NULL,\nlast_name text NULL,\nemail text NULL,\nposition text NULL,\nt_shirt_size text NULL,\nphone text NULL,\nzip bigint NULL,\nlink_to_major text NULL,\n    PRIMARY KEY (member_id)\n);\n\nExample data:\n        member_id first_name last_name                  email position t_shirt_size          phone   zip     link_to_major\nrec1x5zBFIqoOuPW8     Angela   Sanders angela.sanders@lpu.edu   Member       Medium (651) 928-4507 55108 recxK3MHQFbR9J5uO\nrec280Sk7o31iG0Tx      Grant   Gilmour  grant.gilmour@lpu.edu   Member      X-Large   403-555-1310 29440 rec7BxKpjJ7bNph3O\nrec28ORZgcm1dtqBZ      Luisa     Guidi    luisa.guidi@lpu.edu   Member       Medium   442-555-5882 10002 recdIBgeU38UbV2sy\n==================================================\n\n\nCREATE TABLE \"attendance\" (\nlink_to_event text NOT NULL,\nlink_to_member text NOT NULL,\n    PRIMARY KEY (link_to_event, link_to_member)\n);\n\nExample data:\n    link_to_event    link_to_member\nrec2N69DMcrqN9PJC recD078PnS3x2doBe\nrec2N69DMcrqN9PJC recP6DJPyi5donvXL\nrec2N69DMcrqN9PJC rec28ORZgcm1dtqBZ\n==================================================\n\n\nCREATE TABLE \"event\" (\nevent_id text NOT NULL,\nevent_name text NULL,\nevent_date text NULL,\ntype text NULL,\nnotes text NULL,\nlocation text NULL,\nstatus text NULL,\n    PRIMARY KEY (event_id)\n);\n\nExample data:\n         event_id                 event_name          event_date     type location status\nrec0Si5cQ4rJRVzd6              March Meeting 2020-03-10T12:00:00  Meeting   MU 215   Open\nrec0akZnLLpGUloLH Officers meeting - January 2020-01-14T09:30:00  Meeting     None   Open\nrec0dZPcWXF0QjNnE           Spring Elections 2019-11-24T09:00:00 Election   MU 215   Open\n==================================================\n\n\nCREATE TABLE \"major\" (\nmajor_id text NOT NULL,\nmajor_name text NULL,\ndepartment text NULL,\ncollege text NULL,\n    PRIMARY KEY (major_id)\n);\n\nExample data:\n         major_id                             major_name                                           department                                     college\nrec06DF6vZ1CyPKpc Outdoor Product Design and Development School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec09LedkREyskCNv             Agricultural Communication School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec0Eanv576RhQllI         Fisheries and Aquatic Sciences                        Watershed Sciences Department                College of Natural Resources\n==================================================\n\n********************Database: student_club********************\n\n# User Query:\nIn database student_club, there is a set of users. A student can have multiple users, but ref1 and ref2 might be alike and can therefore link users together. ref1 and ref2 does not overlap, one value in ref1 does not exist in ref2.  A user can own multiple assets. I want to \"merge\" users that has one or more refs alike and then count how many assets they own together. There could be missing entries in the user table, in that case I just want to propagate the owner into ref2 and set the asset_count and asset_ids.\n# Error SQL:\nSELECT  ARRAY_AGG(DISTINCT u.id) AS ids, ARRAY_AGG(DISTINCT u.username) AS usernames, ARRAY_AGG(DISTINCT u.ref1) AS refs1, ARRAY_AGG(DISTINCT u.ref2) AS refs2,  COUNT(DISTINCT a.id) AS asset_count FROM assets a JOIN users u ON a.owner = u.ref1 OR a.owner = u.ref2 GROUP BY a.owner ORDER BY MIN(a.id);\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/70696840/aggregate-column-from-cte-cannot-be-used-in-where-clause-in-the-query-in-postgre", "instance_id": "239_3", "selected_database": "student_club", "query": "I am trying to compare the number of attendees for each event between two different tables: 'attendance' and 'budget'. I want to find events where the number of attendees in the 'attendance' table does not match the number of attendees recorded in the 'budget' table. My query follows this structure:", "error_sql": ["WITH CTE AS ( SELECT link_to_event, COUNT(link_to_member) AS count FROM attendance GROUP BY link_to_event ) SELECT CTE.link_to_event, CTE.count AS newCount, budget.count AS oldCount FROM budget JOIN CTE ON budget.link_to_event = CTE.link_to_event WHERE budget.count != CTE.count;"], "sol_sql": ["WITH CTE AS ( SELECT link_to_event, COUNT(link_to_member) AS count FROM attendance GROUP BY link_to_event ), CTE2 AS ( SELECT link_to_event, COUNT(budget_id) AS count FROM budget GROUP BY link_to_event) SELECT CTE.link_to_event, CTE.count AS newCount, CTE2.count AS oldCount FROM CTE2 JOIN CTE ON CTE2.link_to_event = CTE.link_to_event WHERE CTE2.count != CTE.count;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: student_club********************\nCREATE TABLE \"income\" (\nincome_id text NOT NULL,\ndate_received text NULL,\namount bigint NULL,\nsource text NULL,\nnotes text NULL,\nlink_to_member text NULL,\n    PRIMARY KEY (income_id),\n    FOREIGN KEY (link_to_member) REFERENCES member(member_id)\n);\n\nExample data:\n        income_id date_received  amount source notes    link_to_member\nrec0s9ZrO15zhzUeE    2019-10-17      50   Dues  None reccW7q1KkhSKZsea\nrec7f5XMQZexgtQJo    2019-09-04      50   Dues  None recTjHY5xXhvkCdVT\nrec8BUJa8GXUjiglg    2019-10-08      50   Dues  None recUdRhbhcEO1Hk5r\n==================================================\n\n\nCREATE TABLE \"budget\" (\nbudget_id text NOT NULL,\ncategory text NULL,\nspent real NULL,\nremaining real NULL,\namount bigint NULL,\nevent_status text NULL,\nlink_to_event text NULL,\n    PRIMARY KEY (budget_id),\n    FOREIGN KEY (link_to_event) REFERENCES event(event_id)\n);\n\nExample data:\n        budget_id      category  spent  remaining  amount event_status     link_to_event\nrec0QmEc3cSQFQ6V2 Advertisement  67.81       7.19      75       Closed recI43CzsZ0Q625ma\nrec1bG6HSft7XIvTP          Food 121.14      28.86     150       Closed recggMW2eyCYceNcy\nrec1z6ISJU2HdIsVm          Food  20.20      -0.20      20       Closed recJ4Witp9tpjaugn\n==================================================\n\n\nCREATE TABLE \"zip_code\" (\nzip_code bigint NOT NULL,\ntype text NULL,\ncity text NULL,\ncounty text NULL,\nstate text NULL,\nshort_state text NULL,\n    PRIMARY KEY (zip_code)\n);\n\nExample data:\n zip_code     type       city             county       state short_state\n      501   Unique Holtsville     Suffolk County    New York          NY\n      544   Unique Holtsville     Suffolk County    New York          NY\n      601 Standard   Adjuntas Adjuntas Municipio Puerto Rico          PR\n==================================================\n\n\nCREATE TABLE \"expense\" (\nexpense_id text NOT NULL,\nexpense_description text NULL,\nexpense_date text NULL,\ncost real NULL,\napproved text NULL,\nlink_to_member text NULL,\nlink_to_budget text NULL,\n    PRIMARY KEY (expense_id)\n);\n\nExample data:\n       expense_id expense_description expense_date   cost approved    link_to_member    link_to_budget\nrec017x6R3hQqkLAo Post Cards, Posters   2019-08-20 122.06     true rec4BLdZHS2Blfp4v recvKTAWAFKkVNnXQ\nrec1nIjoZKTYayqZ6      Water, Cookies   2019-10-08  20.20     true recro8T1MPMwRadVH recy8KY5bUdzF81vv\nrec1oMgNFt7Y0G40x               Pizza   2019-09-10  51.81     true recD078PnS3x2doBe recwXIiKoBMjXJsGZ\n==================================================\n\n\nCREATE TABLE \"member\" (\nmember_id text NOT NULL,\nfirst_name text NULL,\nlast_name text NULL,\nemail text NULL,\nposition text NULL,\nt_shirt_size text NULL,\nphone text NULL,\nzip bigint NULL,\nlink_to_major text NULL,\n    PRIMARY KEY (member_id)\n);\n\nExample data:\n        member_id first_name last_name                  email position t_shirt_size          phone   zip     link_to_major\nrec1x5zBFIqoOuPW8     Angela   Sanders angela.sanders@lpu.edu   Member       Medium (651) 928-4507 55108 recxK3MHQFbR9J5uO\nrec280Sk7o31iG0Tx      Grant   Gilmour  grant.gilmour@lpu.edu   Member      X-Large   403-555-1310 29440 rec7BxKpjJ7bNph3O\nrec28ORZgcm1dtqBZ      Luisa     Guidi    luisa.guidi@lpu.edu   Member       Medium   442-555-5882 10002 recdIBgeU38UbV2sy\n==================================================\n\n\nCREATE TABLE \"attendance\" (\nlink_to_event text NOT NULL,\nlink_to_member text NOT NULL,\n    PRIMARY KEY (link_to_event, link_to_member)\n);\n\nExample data:\n    link_to_event    link_to_member\nrec2N69DMcrqN9PJC recD078PnS3x2doBe\nrec2N69DMcrqN9PJC recP6DJPyi5donvXL\nrec2N69DMcrqN9PJC rec28ORZgcm1dtqBZ\n==================================================\n\n\nCREATE TABLE \"event\" (\nevent_id text NOT NULL,\nevent_name text NULL,\nevent_date text NULL,\ntype text NULL,\nnotes text NULL,\nlocation text NULL,\nstatus text NULL,\n    PRIMARY KEY (event_id)\n);\n\nExample data:\n         event_id                 event_name          event_date     type location status\nrec0Si5cQ4rJRVzd6              March Meeting 2020-03-10T12:00:00  Meeting   MU 215   Open\nrec0akZnLLpGUloLH Officers meeting - January 2020-01-14T09:30:00  Meeting     None   Open\nrec0dZPcWXF0QjNnE           Spring Elections 2019-11-24T09:00:00 Election   MU 215   Open\n==================================================\n\n\nCREATE TABLE \"major\" (\nmajor_id text NOT NULL,\nmajor_name text NULL,\ndepartment text NULL,\ncollege text NULL,\n    PRIMARY KEY (major_id)\n);\n\nExample data:\n         major_id                             major_name                                           department                                     college\nrec06DF6vZ1CyPKpc Outdoor Product Design and Development School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec09LedkREyskCNv             Agricultural Communication School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec0Eanv576RhQllI         Fisheries and Aquatic Sciences                        Watershed Sciences Department                College of Natural Resources\n==================================================\n\n********************Database: student_club********************\n\n# User Query:\nI am trying to compare the number of attendees for each event between two different tables: 'attendance' and 'budget'. I want to find events where the number of attendees in the 'attendance' table does not match the number of attendees recorded in the 'budget' table. My query follows this structure:\n# Error SQL:\nWITH CTE AS ( SELECT link_to_event, COUNT(link_to_member) AS count FROM attendance GROUP BY link_to_event ) SELECT CTE.link_to_event, CTE.count AS newCount, budget.count AS oldCount FROM budget JOIN CTE ON budget.link_to_event = CTE.link_to_event WHERE budget.count != CTE.count;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/51375439/postgres-on-conflict-do-update-on-composite-primary-keys", "instance_id": "241_3", "selected_database": "student_club", "query": "In the student_club database, we have a scenario where a member can attend multiple events, and an event can have multiple attendees. However, a member can only attend an event once. If a member attempts to attend the same event again, the system should update the attendance record with new information, such as status attend. The current approach is to use an INSERT statement, but it fails when the member already has an attendance record for the event. We need to implement an insert statement that updates the existing record if a conflict occurs based on the combination of member_id and event_id.", "error_sql": "INSERT INTO attendance VALUES ('recEVTik3MlqbvLFi', 'rec280Sk7o31iG0Tx', 1)", "sol_sql": "INSERT INTO attendance (link_to_event, link_to_member, attend) VALUES ('recEVTik3MlqbvLFi', 'rec280Sk7o31iG0Tx', 1) ON CONFLICT (link_to_event, link_to_member) DO UPDATE SET attend = 1;", "preprocess_sql": ["ALTER TABLE attendance ADD COLUMN attend INTEGER DEFAULT 0;"], "clean_up_sql": ["ALTER TABLE attendance DROP COLUMN attend;"], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    global pred_query_result\n    test_query_result_1 = execute_queries([\"SELECT attend FROM attendance WHERE link_to_event = 'recEVTik3MlqbvLFi' AND link_to_member = 'rec280Sk7o31iG0Tx'\"], 'student_club', conn)[0]\n    assert len(test_query_result_1) == 1, f'Expected 1 row, but found {len(test_query_result_1)} rows.'\n    assert test_query_result_1[0][0] == 1, f'Expected attend is updated to 1, but found it is {test_query_result_1[0][0]}'\n    test_query_result_2 = execute_queries([\"SELECT * FROM attendance WHERE attend = 1\"], 'student_club', conn)[0]\n    assert test_query_result_2[0][0] == 'recEVTik3MlqbvLFi', f'Expected recEVTik3MlqbvLFi, but found {test_query_result_2[0][0]}'\n    assert test_query_result_2[0][1] == 'rec280Sk7o31iG0Tx', f'Expected rec280Sk7o31iG0Tx, but found {test_query_result_2[0][1]}'"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: student_club********************\nCREATE TABLE \"income\" (\nincome_id text NOT NULL,\ndate_received text NULL,\namount bigint NULL,\nsource text NULL,\nnotes text NULL,\nlink_to_member text NULL,\n    PRIMARY KEY (income_id),\n    FOREIGN KEY (link_to_member) REFERENCES member(member_id)\n);\n\nExample data:\n        income_id date_received  amount source notes    link_to_member\nrec0s9ZrO15zhzUeE    2019-10-17      50   Dues  None reccW7q1KkhSKZsea\nrec7f5XMQZexgtQJo    2019-09-04      50   Dues  None recTjHY5xXhvkCdVT\nrec8BUJa8GXUjiglg    2019-10-08      50   Dues  None recUdRhbhcEO1Hk5r\n==================================================\n\n\nCREATE TABLE \"budget\" (\nbudget_id text NOT NULL,\ncategory text NULL,\nspent real NULL,\nremaining real NULL,\namount bigint NULL,\nevent_status text NULL,\nlink_to_event text NULL,\n    PRIMARY KEY (budget_id),\n    FOREIGN KEY (link_to_event) REFERENCES event(event_id)\n);\n\nExample data:\n        budget_id      category  spent  remaining  amount event_status     link_to_event\nrec0QmEc3cSQFQ6V2 Advertisement  67.81       7.19      75       Closed recI43CzsZ0Q625ma\nrec1bG6HSft7XIvTP          Food 121.14      28.86     150       Closed recggMW2eyCYceNcy\nrec1z6ISJU2HdIsVm          Food  20.20      -0.20      20       Closed recJ4Witp9tpjaugn\n==================================================\n\n\nCREATE TABLE \"zip_code\" (\nzip_code bigint NOT NULL,\ntype text NULL,\ncity text NULL,\ncounty text NULL,\nstate text NULL,\nshort_state text NULL,\n    PRIMARY KEY (zip_code)\n);\n\nExample data:\n zip_code     type       city             county       state short_state\n      501   Unique Holtsville     Suffolk County    New York          NY\n      544   Unique Holtsville     Suffolk County    New York          NY\n      601 Standard   Adjuntas Adjuntas Municipio Puerto Rico          PR\n==================================================\n\n\nCREATE TABLE \"expense\" (\nexpense_id text NOT NULL,\nexpense_description text NULL,\nexpense_date text NULL,\ncost real NULL,\napproved text NULL,\nlink_to_member text NULL,\nlink_to_budget text NULL,\n    PRIMARY KEY (expense_id)\n);\n\nExample data:\n       expense_id expense_description expense_date   cost approved    link_to_member    link_to_budget\nrec017x6R3hQqkLAo Post Cards, Posters   2019-08-20 122.06     true rec4BLdZHS2Blfp4v recvKTAWAFKkVNnXQ\nrec1nIjoZKTYayqZ6      Water, Cookies   2019-10-08  20.20     true recro8T1MPMwRadVH recy8KY5bUdzF81vv\nrec1oMgNFt7Y0G40x               Pizza   2019-09-10  51.81     true recD078PnS3x2doBe recwXIiKoBMjXJsGZ\n==================================================\n\n\nCREATE TABLE \"member\" (\nmember_id text NOT NULL,\nfirst_name text NULL,\nlast_name text NULL,\nemail text NULL,\nposition text NULL,\nt_shirt_size text NULL,\nphone text NULL,\nzip bigint NULL,\nlink_to_major text NULL,\n    PRIMARY KEY (member_id)\n);\n\nExample data:\n        member_id first_name last_name                  email position t_shirt_size          phone   zip     link_to_major\nrec1x5zBFIqoOuPW8     Angela   Sanders angela.sanders@lpu.edu   Member       Medium (651) 928-4507 55108 recxK3MHQFbR9J5uO\nrec280Sk7o31iG0Tx      Grant   Gilmour  grant.gilmour@lpu.edu   Member      X-Large   403-555-1310 29440 rec7BxKpjJ7bNph3O\nrec28ORZgcm1dtqBZ      Luisa     Guidi    luisa.guidi@lpu.edu   Member       Medium   442-555-5882 10002 recdIBgeU38UbV2sy\n==================================================\n\n\nCREATE TABLE \"attendance\" (\nlink_to_event text NOT NULL,\nlink_to_member text NOT NULL,\n    PRIMARY KEY (link_to_event, link_to_member)\n);\n\nExample data:\n    link_to_event    link_to_member\nrec2N69DMcrqN9PJC recD078PnS3x2doBe\nrec2N69DMcrqN9PJC recP6DJPyi5donvXL\nrec2N69DMcrqN9PJC rec28ORZgcm1dtqBZ\n==================================================\n\n\nCREATE TABLE \"event\" (\nevent_id text NOT NULL,\nevent_name text NULL,\nevent_date text NULL,\ntype text NULL,\nnotes text NULL,\nlocation text NULL,\nstatus text NULL,\n    PRIMARY KEY (event_id)\n);\n\nExample data:\n         event_id                 event_name          event_date     type location status\nrec0Si5cQ4rJRVzd6              March Meeting 2020-03-10T12:00:00  Meeting   MU 215   Open\nrec0akZnLLpGUloLH Officers meeting - January 2020-01-14T09:30:00  Meeting     None   Open\nrec0dZPcWXF0QjNnE           Spring Elections 2019-11-24T09:00:00 Election   MU 215   Open\n==================================================\n\n\nCREATE TABLE \"major\" (\nmajor_id text NOT NULL,\nmajor_name text NULL,\ndepartment text NULL,\ncollege text NULL,\n    PRIMARY KEY (major_id)\n);\n\nExample data:\n         major_id                             major_name                                           department                                     college\nrec06DF6vZ1CyPKpc Outdoor Product Design and Development School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec09LedkREyskCNv             Agricultural Communication School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec0Eanv576RhQllI         Fisheries and Aquatic Sciences                        Watershed Sciences Department                College of Natural Resources\n==================================================\n\n********************Database: student_club********************\n\n# User Query:\nIn the student_club database, we have a scenario where a member can attend multiple events, and an event can have multiple attendees. However, a member can only attend an event once. If a member attempts to attend the same event again, the system should update the attendance record with new information, such as status attend. The current approach is to use an INSERT statement, but it fails when the member already has an attendance record for the event. We need to implement an insert statement that updates the existing record if a conflict occurs based on the combination of member_id and event_id.\n# Error SQL:\nI\nN\nS\nE\nR\nT\n \nI\nN\nT\nO\n \na\nt\nt\ne\nn\nd\na\nn\nc\ne\n \nV\nA\nL\nU\nE\nS\n \n(\n'\nr\ne\nc\nE\nV\nT\ni\nk\n3\nM\nl\nq\nb\nv\nL\nF\ni\n'\n,\n \n'\nr\ne\nc\n2\n8\n0\nS\nk\n7\no\n3\n1\ni\nG\n0\nT\nx\n'\n,\n \n1\n)\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/36091047/temporary-table-postgresql-function", "instance_id": "339_1", "selected_database": "financial", "query": "I am trying to create a function that performs some calculations using temporary tables within the function `calculate_loan_status`. However, I am encountering syntax errors when attempting to declare and use these temporary tables. Below is the problematic SQL code I have tried, followed by the error messages I received. I want to understand the correct syntax to achieve this.", "error_sql": ["\n    CREATE FUNCTION calculate_loan_status() \n    RETURNS SETOF loan_last\n    AS $$\n    DECLARE temp_table TABLE (loan_id int, status text); \n    BEGIN INSERT INTO temp_table \n    SELECT loan_id, status FROM loan_first WHERE status = 'A'; \n    INSERT INTO loan_last SELECT loan_id, status FROM temp_table; \n    RETURN; \n    END; \n    $$ LANGUAGE plpgsql;\n    "], "sol_sql": ["\n    CREATE FUNCTION calculate_loan_status() \n    RETURNS SETOF loan_last\n    AS $$\n    BEGIN\n    CREATE TEMP TABLE IF NOT EXISTS temp_table AS\n    SELECT loan_id, status\n    FROM loan_first;\n    INSERT INTO loan_last SELECT loan_id, status FROM temp_table; \n    DROP TABLE temp_table;\n    END;\n    $$ LANGUAGE plpgsql;\n    "], "preprocess_sql": ["\n    DROP TABLE IF EXISTS loan_first;\n    CREATE TABLE loan_first AS\n    SELECT loan_id, status\n    FROM loan\n    ORDER BY loan_id\n    LIMIT 100;\n    ", "\n    DROP TABLE  IF EXISTS loan_last;\n    CREATE TABLE loan_last AS\n    SELECT loan_id, status\n    FROM loan\n    ORDER BY loan_id DESC\n    LIMIT 100;\n    "], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    execute_queries([\"DROP FUNCTION IF EXISTS calculate_loan_status;\"], db_name, conn)\n    res, exec_err, _ = execute_queries(pred_sqls, db_name, conn)\n    assert exec_err == False\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nI am trying to create a function that performs some calculations using temporary tables within the function `calculate_loan_status`. However, I am encountering syntax errors when attempting to declare and use these temporary tables. Below is the problematic SQL code I have tried, followed by the error messages I received. I want to understand the correct syntax to achieve this.\n# Error SQL:\n\n    CREATE FUNCTION calculate_loan_status() \n    RETURNS SETOF loan_last\n    AS $$\n    DECLARE temp_table TABLE (loan_id int, status text); \n    BEGIN INSERT INTO temp_table \n    SELECT loan_id, status FROM loan_first WHERE status = 'A'; \n    INSERT INTO loan_last SELECT loan_id, status FROM temp_table; \n    RETURN; \n    END; \n    $$ LANGUAGE plpgsql;\n    \nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/54193335/how-to-cast-bigint-to-timestamp-with-time-zone-in-postgres-in-an-update", "instance_id": "340_1", "selected_database": "financial", "query": "In the financial database, there is a need to convert the data from a `BIGINT` column to a `TIMESTAMP` column. The `date` column in the `account` table is currently stored as a `BIGINT` representing the date in the format YYMMDD. The goal is to update this column to a `TIMESTAMP` type to store the date and time information.", "error_sql": ["\n    UPDATE account\n    SET date__timestamp = date__bigint::timestamp;\n    "], "sol_sql": ["\n    ALTER TABLE account\n    ALTER COLUMN date\n    TYPE varchar(30) \n    USING date::varchar;\n    ", "\n    ALTER TABLE account\n    ALTER COLUMN date\n    TYPE timestamp \n    USING date::timestamp;\n    "], "preprocess_sql": ["\n    ALTER TABLE account\n    ALTER COLUMN date\n    TYPE BIGINT\n    USING to_char(date, 'YYYYMMDD')::bigint;\n    "], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    queries = [\n    \"\"\"\n    SELECT  data_type\n    FROM information_schema.columns\n    WHERE table_name = 'account'\n    AND column_name = 'date';\n    \"\"\"\n    ]\n    res, _, _ = execute_queries(queries,db_name,conn)\n    data_type = res[0][0]\n    assert 'timestamp' in data_type\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, there is a need to convert the data from a `BIGINT` column to a `TIMESTAMP` column. The `date` column in the `account` table is currently stored as a `BIGINT` representing the date in the format YYMMDD. The goal is to update this column to a `TIMESTAMP` type to store the date and time information.\n# Error SQL:\n\n    UPDATE account\n    SET date__timestamp = date__bigint::timestamp;\n    \nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/39816069/select-all-columns-with-group-by-one-column", "instance_id": "341_2", "selected_database": "card_games", "query": "In the card_games database, there is a table named 'cards'. Each card is uniquely identified by a id and includes details about artists and bordercolors. The user wants to group the cards by their 'artist' attribute to get a distinct result for each group. However, when the user tries to use the following SQL query to achieve this, it results in an error or incorrect output: sql SELECT * FROM cards GROUP BY artist;  The user understands that this query is incorrect because it does not group by all the columns that need to be shown. The user is seeking a solution to this problem.", "error_sql": ["\n    SELECT * FROM cards GROUP BY artist;\n    "], "sol_sql": ["\n    select t1.*\n    from cards t1\n    join\n    (\n        SELECT min(id) as id\n        FROM cards\n        GROUP BY artist\n    ) t2 on t1.id = t2.id\n    "], "preprocess_sql": ["\n    DELETE FROM cards\n    WHERE artist NOT IN ('Ralph Horsley', 'Daarken');\n    ", "\n    DELETE FROM cards\n    WHERE artist IS NULL;\n    ", "\n    CREATE TABLE cards_new AS\n    SELECT id, artist, bordercolor\n    FROM cards;\n    DROP TABLE cards;\n    ALTER TABLE cards_new\n    RENAME TO cards;\n    "], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    global pred_query_result\n    assert len(pred_query_result) == 2\n    artist_list = sorted([tup[1] for tup in pred_query_result])\n    assert artist_list == ['Daarken', 'Ralph Horsley']\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nIn the card_games database, there is a table named 'cards'. Each card is uniquely identified by a id and includes details about artists and bordercolors. The user wants to group the cards by their 'artist' attribute to get a distinct result for each group. However, when the user tries to use the following SQL query to achieve this, it results in an error or incorrect output: sql SELECT * FROM cards GROUP BY artist;  The user understands that this query is incorrect because it does not group by all the columns that need to be shown. The user is seeking a solution to this problem.\n# Error SQL:\n\n    SELECT * FROM cards GROUP BY artist;\n    \nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/42089781/sql-if-select-returns-nothing-then-do-another-select", "instance_id": "351_1", "selected_database": "debit_card_specializing", "query": "I'm trying to create an SQL query that checks if a SELECT query on the 'transactions_1k' table returns no rows based on a specific criteria involving 'CustomerID' and 'Date'. If no rows are returned, it should then execute another SELECT query with a different criteria. Here's what I mean:\n\nsql\nIF SELECT * FROM transactions_1k WHERE CustomerID = 3 AND Date = '2012-08-24' RETURNS NO ROWS\nTHEN SELECT * FROM transactions_1k WHERE CustomerID = 7626 AND Date = '2012-08-24'\n\n\nIs this possible? I'm not sure if an empty result set counts as 'null', which is causing me some trouble.", "error_sql": ["IF SELECT * FROM transactions_1k WHERE CustomerID = 3 AND Date = '2012-08-24' RETURNS NO ROWS\nTHEN SELECT * FROM transactions_1k WHERE CustomerID = 7626 AND Date = '2012-08-24'"], "sol_sql": ["SELECT *\nFROM transactions_1k\nWHERE CustomerID = 3\n  AND Date = '2012-08-24'\n\nUNION ALL\n\nSELECT *\nFROM transactions_1k\nWHERE CustomerID = 7626\n  AND Date = '2012-08-24'\n  AND NOT EXISTS (\n    SELECT 1\n    FROM transactions_1k\n    WHERE CustomerID = 3\n      AND Date = '2012-08-24'\n  );\n    "], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: debit_card_specializing********************\nCREATE TABLE \"customers\" (\ncustomerid bigint NOT NULL,\nsegment text NULL,\ncurrency text NULL,\n    PRIMARY KEY (customerid)\n);\n\nExample data:\n customerid segment currency\n          3     SME      EUR\n          5     LAM      EUR\n          6     SME      EUR\n==================================================\n\n\nCREATE TABLE \"gasstations\" (\ngasstationid bigint NOT NULL,\nchainid bigint NULL,\ncountry text NULL,\nsegment text NULL,\n    PRIMARY KEY (gasstationid)\n);\n\nExample data:\n gasstationid  chainid country         segment\n           44       13     CZE Value for money\n           45        6     CZE         Premium\n           46       23     CZE           Other\n==================================================\n\n\nCREATE TABLE \"products\" (\nproductid bigint NOT NULL,\ndescription text NULL,\n    PRIMARY KEY (productid)\n);\n\nExample data:\n productid  description\n         1 Rucní zadání\n         2        Nafta\n         3      Special\n==================================================\n\n\nCREATE TABLE \"yearmonth\" (\ncustomerid bigint NULL,\ndate text NULL,\nconsumption real NULL\n);\n\nExample data:\n customerid   date  consumption\n          5 201207       528.30\n          5 201302      1598.28\n          5 201303      1931.36\n==================================================\n\n\nCREATE TABLE \"transactions_1k\" (\ntransactionid bigint NOT NULL DEFAULT nextval('transactions_1k_transactionid_seq'::regclass),\ndate date NULL,\ntime text NULL,\ncustomerid bigint NULL,\ncardid bigint NULL,\ngasstationid bigint NULL,\nproductid bigint NULL,\namount bigint NULL,\nprice real NULL,\n    PRIMARY KEY (transactionid)\n);\n\nExample data:\n transactionid       date     time  customerid  cardid  gasstationid  productid  amount  price\n             1 2012-08-24 09:41:00       31543  486621          3704          2      28 672.64\n             2 2012-08-24 10:03:00       46707  550134          3704          2      18 430.72\n             3 2012-08-24 10:03:00       46707  550134          3704         23       1 121.99\n==================================================\n\n********************Database: debit_card_specializing********************\n\n# User Query:\nI'm trying to create an SQL query that checks if a SELECT query on the 'transactions_1k' table returns no rows based on a specific criteria involving 'CustomerID' and 'Date'. If no rows are returned, it should then execute another SELECT query with a different criteria. Here's what I mean:\n\nsql\nIF SELECT * FROM transactions_1k WHERE CustomerID = 3 AND Date = '2012-08-24' RETURNS NO ROWS\nTHEN SELECT * FROM transactions_1k WHERE CustomerID = 7626 AND Date = '2012-08-24'\n\n\nIs this possible? I'm not sure if an empty result set counts as 'null', which is causing me some trouble.\n# Error SQL:\nIF SELECT * FROM transactions_1k WHERE CustomerID = 3 AND Date = '2012-08-24' RETURNS NO ROWS\nTHEN SELECT * FROM transactions_1k WHERE CustomerID = 7626 AND Date = '2012-08-24'\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/51947581/select-all-columns-except-for-some-postgresql", "instance_id": "350_1", "selected_database": "financial", "query": "I need to compare the 'account' table with another table, but there are some columns in the 'account' table that I don't need to compare. Specifically, I want to exclude the 'account_id' and 'date' columns from the comparison. I tried to dynamically generate a SQL query to select all columns except these two, but the output SQL was incorrect. Here's the problematic SQL I used:", "error_sql": ["SELECT 'SELECT ' || array_to_string(ARRAY(SELECT 'o' || '.' || c.column_name\n    FROM information_schema.columns As c\n        WHERE table_name = 'account' \n        AND  c.column_name NOT IN('account_id', 'date')\n), ',') || ' FROM accountAs o' As sqlstmt"], "sol_sql": ["SELECT 'SELECT ' || STRING_AGG('a.' || column_name, ', ') || ' FROM account AS a' FROM information_schema.columns WHERE table_name = 'account' AND table_schema = 'public' AND column_name NOT IN ('account_id', 'date');"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls_2 = execute_queries(pred_sqls, db_name, conn)\n    sol_sqls_2 = execute_queries(sol_sqls, db_name, conn)\n    pred_sqls_2 = remove_distinct(pred_sqls_2[0][0])\n    sol_sqls_2 = remove_distinct(sol_sqls_2[0][0])\n    result = ex_base(pred_sqls_2, sol_sqls_2, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nI need to compare the 'account' table with another table, but there are some columns in the 'account' table that I don't need to compare. Specifically, I want to exclude the 'account_id' and 'date' columns from the comparison. I tried to dynamically generate a SQL query to select all columns except these two, but the output SQL was incorrect. Here's the problematic SQL I used:\n# Error SQL:\nSELECT 'SELECT ' || array_to_string(ARRAY(SELECT 'o' || '.' || c.column_name\n    FROM information_schema.columns As c\n        WHERE table_name = 'account' \n        AND  c.column_name NOT IN('account_id', 'date')\n), ',') || ' FROM accountAs o' As sqlstmt\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/71751111/how-to-remove-duplicates-from-second-select-using-union-sql", "instance_id": "365_1", "selected_database": "financial", "query": "I have two tables: `account` and `loan`. I need to display the first 6 accounts from a specific district that has loans in the last 48 hours then the rest of the accounts. This works great but I get duplicates from the second query where I repeat these accounts again. I want to make sure `account.account_id` is unique.", "error_sql": ["(\n  SELECT\n    account.account_id,\n    account.frequency,\n    l.loan_id,\n    l.date AS loan_date,\n    0 AS priority\n  FROM account\n  LEFT JOIN loan l\n    ON account.account_id = l.account_id\n  WHERE account.district_id = '18'\n    AND l.date >= (NOW() - INTERVAL '48 hours')\n  ORDER BY l.date DESC NULLS LAST\n  LIMIT 6\n)\nUNION\n(\n  SELECT\n    account.account_id,\n    account.frequency,\n    l.loan_id,\n    l.date AS loan_date,\n    1 AS priority\n  FROM account\n  LEFT JOIN loan l\n    ON account.account_id = l.account_id\n  WHERE account.district_id = '18'\n  ORDER BY account.date DESC\n);"], "sol_sql": ["SELECT *\nFROM\n(\n  SELECT DISTINCT ON (account_id) *\n  FROM\n  (\n    (\n      SELECT\n        account.account_id,\n        account.frequency,\n        l.loan_id,\n        l.date AS loan_date,\n        0 AS priority\n      FROM account\n      LEFT JOIN loan l\n        ON account.account_id = l.account_id\n      WHERE account.district_id = '18'\n        AND l.date >= (NOW() - INTERVAL '48 hours')\n      ORDER BY l.date DESC NULLS LAST\n      LIMIT 6\n    )\n    UNION\n    (\n      SELECT\n        account.account_id,\n        account.frequency,\n        l.loan_id,\n        l.date AS loan_date,\n        1 AS priority\n      FROM account\n      LEFT JOIN loan l\n        ON account.account_id = l.account_id\n      WHERE account.district_id = '18'\n    )\n  ) t\n  ORDER BY account_id, priority\n) t\nORDER BY priority, loan_date DESC;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls_result = execute_queries(pred_sqls, db_name, conn)\n    sol_sqls_result = execute_queries(sol_sqls, db_name, conn)\n    assert pred_sqls_result == sol_sqls_result, f\"Expected pred_result and sol_result are the same but pred_result is {pred_sqls_result} and sol_result is {sol_sqls_result}.\"\n    return pred_sqls_result == sol_sqls_result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nI have two tables: `account` and `loan`. I need to display the first 6 accounts from a specific district that has loans in the last 48 hours then the rest of the accounts. This works great but I get duplicates from the second query where I repeat these accounts again. I want to make sure `account.account_id` is unique.\n# Error SQL:\n(\n  SELECT\n    account.account_id,\n    account.frequency,\n    l.loan_id,\n    l.date AS loan_date,\n    0 AS priority\n  FROM account\n  LEFT JOIN loan l\n    ON account.account_id = l.account_id\n  WHERE account.district_id = '18'\n    AND l.date >= (NOW() - INTERVAL '48 hours')\n  ORDER BY l.date DESC NULLS LAST\n  LIMIT 6\n)\nUNION\n(\n  SELECT\n    account.account_id,\n    account.frequency,\n    l.loan_id,\n    l.date AS loan_date,\n    1 AS priority\n  FROM account\n  LEFT JOIN loan l\n    ON account.account_id = l.account_id\n  WHERE account.district_id = '18'\n  ORDER BY account.date DESC\n);\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/53086816/postgresql-aggregate-multiple-rows-as-json-array-based-on-specific-column", "instance_id": "352_2", "selected_database": "student_club", "query": "In the student_club database, there is a table named 'attendance' that records the attendance of members to various events. Each record in this table contains a 'link_to_event' which is a unique identifier for the event, and a 'link_to_member' which is a unique identifier for the member. The goal is to generate a  output that aggregates the attendance records by event, where each event's attendance is represented as an array of member objects. Each member object should contain the member's unique identifier ('link_to_member') and the event's unique identifier ('link_to_event'). The desired  output should be an array of these event-based arrays. However, the user encountered an issue where the output was interpreted as text, introducing undesired escape characters, and the outer array was missing. The user's query was adapted from a suggestion on another post, but it did not produce the desired result.", "error_sql": ["SELECT Array_agg(rw) FROM (SELECT link_to_event, (SELECT To_(Array_agg(Row_to_(t))) FROM (SELECT link_to_member FROM public.attendance WHERE link_to_event = b.link_to_event) t) rw FROM attendance b GROUP BY link_to_event);"], "sol_sql": ["SELECT json_agg(events_array) AS all_events\nFROM (\n  SELECT \n    json_agg(\n      json_build_object(\n        'link_to_member', link_to_member,\n        'link_to_event',  link_to_event\n      )\n    ) AS events_array\n  FROM attendance\n  GROUP BY link_to_event\n) sub;"], "preprocess_sql": "", "clean_up_sql": "", "test_cases": ["import json\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    def compare_array_of_arrays(arr1, arr2):\n        assert arr1 == arr2, \"The two array-of-array structures do not match.\"\n        return 1\n    \n    pred_query_result = execute_queries(pred_sqls,db_name,conn)\n    sol_query_result = execute_queries(sol_sqls,db_name,conn)\n    result = compare_array_of_arrays(pred_query_result[0][0][0], sol_query_result[0][0][0])\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: student_club********************\nCREATE TABLE \"income\" (\nincome_id text NOT NULL,\ndate_received text NULL,\namount bigint NULL,\nsource text NULL,\nnotes text NULL,\nlink_to_member text NULL,\n    PRIMARY KEY (income_id),\n    FOREIGN KEY (link_to_member) REFERENCES member(member_id)\n);\n\nExample data:\n        income_id date_received  amount source notes    link_to_member\nrec0s9ZrO15zhzUeE    2019-10-17      50   Dues  None reccW7q1KkhSKZsea\nrec7f5XMQZexgtQJo    2019-09-04      50   Dues  None recTjHY5xXhvkCdVT\nrec8BUJa8GXUjiglg    2019-10-08      50   Dues  None recUdRhbhcEO1Hk5r\n==================================================\n\n\nCREATE TABLE \"budget\" (\nbudget_id text NOT NULL,\ncategory text NULL,\nspent real NULL,\nremaining real NULL,\namount bigint NULL,\nevent_status text NULL,\nlink_to_event text NULL,\n    PRIMARY KEY (budget_id),\n    FOREIGN KEY (link_to_event) REFERENCES event(event_id)\n);\n\nExample data:\n        budget_id      category  spent  remaining  amount event_status     link_to_event\nrec0QmEc3cSQFQ6V2 Advertisement  67.81       7.19      75       Closed recI43CzsZ0Q625ma\nrec1bG6HSft7XIvTP          Food 121.14      28.86     150       Closed recggMW2eyCYceNcy\nrec1z6ISJU2HdIsVm          Food  20.20      -0.20      20       Closed recJ4Witp9tpjaugn\n==================================================\n\n\nCREATE TABLE \"zip_code\" (\nzip_code bigint NOT NULL,\ntype text NULL,\ncity text NULL,\ncounty text NULL,\nstate text NULL,\nshort_state text NULL,\n    PRIMARY KEY (zip_code)\n);\n\nExample data:\n zip_code     type       city             county       state short_state\n      501   Unique Holtsville     Suffolk County    New York          NY\n      544   Unique Holtsville     Suffolk County    New York          NY\n      601 Standard   Adjuntas Adjuntas Municipio Puerto Rico          PR\n==================================================\n\n\nCREATE TABLE \"expense\" (\nexpense_id text NOT NULL,\nexpense_description text NULL,\nexpense_date text NULL,\ncost real NULL,\napproved text NULL,\nlink_to_member text NULL,\nlink_to_budget text NULL,\n    PRIMARY KEY (expense_id)\n);\n\nExample data:\n       expense_id expense_description expense_date   cost approved    link_to_member    link_to_budget\nrec017x6R3hQqkLAo Post Cards, Posters   2019-08-20 122.06     true rec4BLdZHS2Blfp4v recvKTAWAFKkVNnXQ\nrec1nIjoZKTYayqZ6      Water, Cookies   2019-10-08  20.20     true recro8T1MPMwRadVH recy8KY5bUdzF81vv\nrec1oMgNFt7Y0G40x               Pizza   2019-09-10  51.81     true recD078PnS3x2doBe recwXIiKoBMjXJsGZ\n==================================================\n\n\nCREATE TABLE \"member\" (\nmember_id text NOT NULL,\nfirst_name text NULL,\nlast_name text NULL,\nemail text NULL,\nposition text NULL,\nt_shirt_size text NULL,\nphone text NULL,\nzip bigint NULL,\nlink_to_major text NULL,\n    PRIMARY KEY (member_id)\n);\n\nExample data:\n        member_id first_name last_name                  email position t_shirt_size          phone   zip     link_to_major\nrec1x5zBFIqoOuPW8     Angela   Sanders angela.sanders@lpu.edu   Member       Medium (651) 928-4507 55108 recxK3MHQFbR9J5uO\nrec280Sk7o31iG0Tx      Grant   Gilmour  grant.gilmour@lpu.edu   Member      X-Large   403-555-1310 29440 rec7BxKpjJ7bNph3O\nrec28ORZgcm1dtqBZ      Luisa     Guidi    luisa.guidi@lpu.edu   Member       Medium   442-555-5882 10002 recdIBgeU38UbV2sy\n==================================================\n\n\nCREATE TABLE \"attendance\" (\nlink_to_event text NOT NULL,\nlink_to_member text NOT NULL,\n    PRIMARY KEY (link_to_event, link_to_member)\n);\n\nExample data:\n    link_to_event    link_to_member\nrec2N69DMcrqN9PJC recD078PnS3x2doBe\nrec2N69DMcrqN9PJC recP6DJPyi5donvXL\nrec2N69DMcrqN9PJC rec28ORZgcm1dtqBZ\n==================================================\n\n\nCREATE TABLE \"event\" (\nevent_id text NOT NULL,\nevent_name text NULL,\nevent_date text NULL,\ntype text NULL,\nnotes text NULL,\nlocation text NULL,\nstatus text NULL,\n    PRIMARY KEY (event_id)\n);\n\nExample data:\n         event_id                 event_name          event_date     type location status\nrec0Si5cQ4rJRVzd6              March Meeting 2020-03-10T12:00:00  Meeting   MU 215   Open\nrec0akZnLLpGUloLH Officers meeting - January 2020-01-14T09:30:00  Meeting     None   Open\nrec0dZPcWXF0QjNnE           Spring Elections 2019-11-24T09:00:00 Election   MU 215   Open\n==================================================\n\n\nCREATE TABLE \"major\" (\nmajor_id text NOT NULL,\nmajor_name text NULL,\ndepartment text NULL,\ncollege text NULL,\n    PRIMARY KEY (major_id)\n);\n\nExample data:\n         major_id                             major_name                                           department                                     college\nrec06DF6vZ1CyPKpc Outdoor Product Design and Development School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec09LedkREyskCNv             Agricultural Communication School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec0Eanv576RhQllI         Fisheries and Aquatic Sciences                        Watershed Sciences Department                College of Natural Resources\n==================================================\n\n********************Database: student_club********************\n\n# User Query:\nIn the student_club database, there is a table named 'attendance' that records the attendance of members to various events. Each record in this table contains a 'link_to_event' which is a unique identifier for the event, and a 'link_to_member' which is a unique identifier for the member. The goal is to generate a  output that aggregates the attendance records by event, where each event's attendance is represented as an array of member objects. Each member object should contain the member's unique identifier ('link_to_member') and the event's unique identifier ('link_to_event'). The desired  output should be an array of these event-based arrays. However, the user encountered an issue where the output was interpreted as text, introducing undesired escape characters, and the outer array was missing. The user's query was adapted from a suggestion on another post, but it did not produce the desired result.\n# Error SQL:\nSELECT Array_agg(rw) FROM (SELECT link_to_event, (SELECT To_(Array_agg(Row_to_(t))) FROM (SELECT link_to_member FROM public.attendance WHERE link_to_event = b.link_to_event) t) rw FROM attendance b GROUP BY link_to_event);\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/78876897/generate-all-years-between-two-timestamps", "instance_id": "362_1", "selected_database": "financial", "query": "In the financial database, we need to generate a list of all years between two given dates from the 'loan' table. The dates are extracted from the 'date' column, which represents the approval date of loans. The goal is to generate all years between the earliest and latest loan approval dates, regardless of the interval between them. For instance, if the earliest loan was approved on '1994-01-05' and the latest on '1997-12-08', we should get a list of years including '1994', '1995', '1996', and '1997'. However, the initial query only returns the starting year if the interval between the dates is less than a year, which is not the desired outcome.", "error_sql": ["SELECT to_char(generate_series, 'YYYY') FROM generate_series(MIN(date)::timestamptz, MAX(date)::timestamptz, '1 year') FROM loan;"], "sol_sql": ["SELECT generate_series(\n  EXTRACT(YEAR FROM MIN(date)::timestamptz AT TIME ZONE 'UTC')::int,\n  EXTRACT(YEAR FROM MAX(date)::timestamptz AT TIME ZONE 'UTC')::int\n)::text AS the_year\nFROM loan;"], "preprocess_sql": "", "clean_up_sql": "", "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls_result = execute_queries(pred_sqls, db_name, conn)\n    sol_sqls_result = execute_queries(sol_sqls, db_name, conn)\n    assert pred_sqls_result == sol_sqls_result, f\"Expected pred_result and sol_result are the same but pred_result is {pred_sqls_result} and sol_result is {sol_sqls_result}.\"\n    return pred_sqls_result == sol_sqls_result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, we need to generate a list of all years between two given dates from the 'loan' table. The dates are extracted from the 'date' column, which represents the approval date of loans. The goal is to generate all years between the earliest and latest loan approval dates, regardless of the interval between them. For instance, if the earliest loan was approved on '1994-01-05' and the latest on '1997-12-08', we should get a list of years including '1994', '1995', '1996', and '1997'. However, the initial query only returns the starting year if the interval between the dates is less than a year, which is not the desired outcome.\n# Error SQL:\nSELECT to_char(generate_series, 'YYYY') FROM generate_series(MIN(date)::timestamptz, MAX(date)::timestamptz, '1 year') FROM loan;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/70733433/how-to-find-maximum-value-per-group-for-all-rows-in-sql", "instance_id": "366_1", "selected_database": "financial", "query": "In the financial database, there is a table named 'loan' that records details of loans given to clients. Each loan is associated with an account, and the table contains columns such as 'loan_id', 'account_id', 'date', 'amount', 'duration', 'payments', and 'status'. The 'amount' column represents the loan amount in USD. The task is to retrieve all rows from the 'loan' table, along with an additional column that shows the maximum loan amount per account. This will help in understanding the highest loan amount each account has taken. However, the user attempted to use the ROW_NUMBER() window function to achieve this, which resulted in incorrect results.", "error_sql": ["SELECT account_id, amount FROM (SELECT account_id, amount, ROW_NUMBER() OVER(PARTITION BY account_id ORDER BY amount DESC) AS rn FROM loan) AS a WHERE rn = 1;"], "sol_sql": ["SELECT *, MAX(amount) OVER (PARTITION BY account_id) \"max\" FROM loan"], "preprocess_sql": "", "clean_up_sql": "", "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, there is a table named 'loan' that records details of loans given to clients. Each loan is associated with an account, and the table contains columns such as 'loan_id', 'account_id', 'date', 'amount', 'duration', 'payments', and 'status'. The 'amount' column represents the loan amount in USD. The task is to retrieve all rows from the 'loan' table, along with an additional column that shows the maximum loan amount per account. This will help in understanding the highest loan amount each account has taken. However, the user attempted to use the ROW_NUMBER() window function to achieve this, which resulted in incorrect results.\n# Error SQL:\nSELECT account_id, amount FROM (SELECT account_id, amount, ROW_NUMBER() OVER(PARTITION BY account_id ORDER BY amount DESC) AS rn FROM loan) AS a WHERE rn = 1;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/45941233/case-when-in-where-clause-in-postgresql", "instance_id": "242_2", "selected_database": "european_football_2", "query": "I am trying to filter matches based on certain conditions. Specifically, I want to select matches'id where the league's country ID is in a list of selected countries and the league ID is in a list of selected leagues. Additionally, if the match's country ID is 1, I want to further filter the matches based on a list of selected stages. However, my query is not working as expected. Short example: if a=0 then add some condition to WHERE (AND condition), if it's not then don't add (AND condition). Here is my query:", "error_sql": ["SELECT id FROM Match WHERE league_id = ANY (ARRAY[1, 1729, 4769]) AND country_id = ANY (ARRAY[1, 1729, 4769]) AND CASE WHEN country_id = 1 THEN stage = ANY (ARRAY[1, 11]) END"], "sol_sql": ["SELECT id FROM Match WHERE league_id = ANY (ARRAY[1, 1729, 4769]) AND country_id = ANY (ARRAY[1, 1729, 4769]) AND (country_id != 1 OR stage = ANY (ARRAY[1, 11]))"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: european_football_2********************\nCREATE TABLE \"team_attributes\" (\nid bigint NOT NULL DEFAULT nextval('team_attributes_id_seq'::regclass),\nteam_fifa_api_id bigint NULL,\nteam_api_id bigint NULL,\ndate text NULL,\nbuildupplayspeed bigint NULL,\nbuildupplayspeedclass text NULL,\nbuildupplaydribbling bigint NULL,\nbuildupplaydribblingclass text NULL,\nbuildupplaypassing bigint NULL,\nbuildupplaypassingclass text NULL,\nbuildupplaypositioningclass text NULL,\nchancecreationpassing bigint NULL,\nchancecreationpassingclass text NULL,\nchancecreationcrossing bigint NULL,\nchancecreationcrossingclass text NULL,\nchancecreationshooting bigint NULL,\nchancecreationshootingclass text NULL,\nchancecreationpositioningclass text NULL,\ndefencepressure bigint NULL,\ndefencepressureclass text NULL,\ndefenceaggression bigint NULL,\ndefenceaggressionclass text NULL,\ndefenceteamwidth bigint NULL,\ndefenceteamwidthclass text NULL,\ndefencedefenderlineclass text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_fifa_api_id  team_api_id                date  buildupplayspeed buildupplayspeedclass  buildupplaydribbling buildupplaydribblingclass  buildupplaypassing buildupplaypassingclass buildupplaypositioningclass  chancecreationpassing chancecreationpassingclass  chancecreationcrossing chancecreationcrossingclass  chancecreationshooting chancecreationshootingclass chancecreationpositioningclass  defencepressure defencepressureclass  defenceaggression defenceaggressionclass  defenceteamwidth defenceteamwidthclass defencedefenderlineclass\n  1               434         9930 2010-02-22 00:00:00                60              Balanced                   NaN                    Little                  50                   Mixed                   Organised                     60                     Normal                      65                      Normal                      55                      Normal                      Organised               50               Medium                 55                  Press                45                Normal                    Cover\n  2               434         9930 2014-09-19 00:00:00                52              Balanced                  48.0                    Normal                  56                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n  3               434         9930 2015-09-10 00:00:00                47              Balanced                  41.0                    Normal                  54                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n==================================================\n\n\nCREATE TABLE \"player\" (\nid bigint NOT NULL DEFAULT nextval('player_id_seq'::regclass),\nplayer_api_id bigint NULL,\nplayer_name text NULL,\nplayer_fifa_api_id bigint NULL,\nbirthday text NULL,\nheight bigint NULL,\nweight bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_api_id        player_name  player_fifa_api_id            birthday  height  weight\n  1         505942 Aaron Appindangoye              218353 1992-02-29 00:00:00     182     187\n  2         155782    Aaron Cresswell              189615 1989-12-15 00:00:00     170     146\n  3         162549        Aaron Doran              186170 1991-05-13 00:00:00     170     163\n==================================================\n\n\nCREATE TABLE \"match\" (\nid bigint NOT NULL DEFAULT nextval('match_id_seq'::regclass),\ncountry_id bigint NULL,\nleague_id bigint NULL,\nseason text NULL,\nstage bigint NULL,\ndate text NULL,\nmatch_api_id bigint NULL,\nhome_team_api_id bigint NULL,\naway_team_api_id bigint NULL,\nhome_team_goal bigint NULL,\naway_team_goal bigint NULL,\ngoal text NULL,\nshoton text NULL,\nshotoff text NULL,\nfoulcommit text NULL,\ncard text NULL,\ncross text NULL,\ncorner text NULL,\npossession text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  country_id  league_id    season  stage                date  match_api_id  home_team_api_id  away_team_api_id  home_team_goal  away_team_goal\n  1           1          1 2008/2009      1 2008-08-17 00:00:00        492473              9987              9993               1               1\n  2           1          1 2008/2009      1 2008-08-16 00:00:00        492474             10000              9994               0               0\n  3           1          1 2008/2009      1 2008-08-16 00:00:00        492475              9984              8635               0               3\n==================================================\n\n\nCREATE TABLE \"league\" (\nid bigint NOT NULL DEFAULT nextval('league_id_seq'::regclass),\ncountry_id bigint NULL,\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id  country_id                   name\n   1           1 Belgium Jupiler League\n1729        1729 England Premier League\n4769        4769         France Ligue 1\n==================================================\n\n\nCREATE TABLE \"country\" (\nid bigint NOT NULL DEFAULT nextval('country_id_seq'::regclass),\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id    name\n   1 Belgium\n1729 England\n4769  France\n==================================================\n\n\nCREATE TABLE \"player_attributes\" (\nid bigint NOT NULL DEFAULT nextval('player_attributes_id_seq'::regclass),\nplayer_fifa_api_id bigint NULL,\nplayer_api_id bigint NULL,\ndate text NULL,\noverall_rating bigint NULL,\npotential bigint NULL,\npreferred_foot text NULL,\nattacking_work_rate text NULL,\ndefensive_work_rate text NULL,\ncrossing bigint NULL,\nfinishing bigint NULL,\nheading_accuracy bigint NULL,\nshort_passing bigint NULL,\nvolleys bigint NULL,\ndribbling bigint NULL,\ncurve bigint NULL,\nfree_kick_accuracy bigint NULL,\nlong_passing bigint NULL,\nball_control bigint NULL,\nacceleration bigint NULL,\nsprint_speed bigint NULL,\nagility bigint NULL,\nreactions bigint NULL,\nbalance bigint NULL,\nshot_power bigint NULL,\njumping bigint NULL,\nstamina bigint NULL,\nstrength bigint NULL,\nlong_shots bigint NULL,\naggression bigint NULL,\ninterceptions bigint NULL,\npositioning bigint NULL,\nvision bigint NULL,\npenalties bigint NULL,\nmarking bigint NULL,\nstanding_tackle bigint NULL,\nsliding_tackle bigint NULL,\ngk_diving bigint NULL,\ngk_handling bigint NULL,\ngk_kicking bigint NULL,\ngk_positioning bigint NULL,\ngk_reflexes bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_fifa_api_id  player_api_id                date  overall_rating  potential preferred_foot attacking_work_rate defensive_work_rate  crossing  finishing  heading_accuracy  short_passing  volleys  dribbling  curve  free_kick_accuracy  long_passing  ball_control  acceleration  sprint_speed  agility  reactions  balance  shot_power  jumping  stamina  strength  long_shots  aggression  interceptions  positioning  vision  penalties  marking  standing_tackle  sliding_tackle  gk_diving  gk_handling  gk_kicking  gk_positioning  gk_reflexes\n  1              218353         505942 2016-02-18 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  2              218353         505942 2015-11-19 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  3              218353         505942 2015-09-21 00:00:00              62         66          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          63             41           45      54         48       65               66              69          6           11          10               8            8\n==================================================\n\n\nCREATE TABLE \"team\" (\nid bigint NOT NULL DEFAULT nextval('team_id_seq'::regclass),\nteam_api_id bigint NULL,\nteam_fifa_api_id bigint NULL,\nteam_long_name text NULL,\nteam_short_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_api_id  team_fifa_api_id   team_long_name team_short_name\n  1         9987               673         KRC Genk             GEN\n  2         9993               675     Beerschot AC             BAC\n  3        10000             15005 SV Zulte-Waregem             ZUL\n==================================================\n\n********************Database: european_football_2********************\n\n# User Query:\nI am trying to filter matches based on certain conditions. Specifically, I want to select matches'id where the league's country ID is in a list of selected countries and the league ID is in a list of selected leagues. Additionally, if the match's country ID is 1, I want to further filter the matches based on a list of selected stages. However, my query is not working as expected. Short example: if a=0 then add some condition to WHERE (AND condition), if it's not then don't add (AND condition). Here is my query:\n# Error SQL:\nSELECT id FROM Match WHERE league_id = ANY (ARRAY[1, 1729, 4769]) AND country_id = ANY (ARRAY[1, 1729, 4769]) AND CASE WHEN country_id = 1 THEN stage = ANY (ARRAY[1, 11]) END\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/60249404/why-am-i-getting-a-an-error-when-creating-a-generated-column-in-postgresql", "instance_id": "243_1", "selected_database": "financial", "query": "In the financial database, we need to create a table to store detailed information about clients, including their first name, last name, and a full name that is automatically generated from the first and last names. The full name should be stored as a generated column. However, when attempting to create the table with a generated column using the CONCAT function, an error occurs indicating that the generation expression is not immutable.", "error_sql": ["CREATE TABLE client_information ( client_id smallserial NOT NULL, first_name character varying(50), last_name character varying(50), full_name character varying(100) GENERATED ALWAYS AS (concat(first_name, ' ', last_name)) STORED, PRIMARY KEY (client_id) );"], "sol_sql": ["CREATE TABLE client_information ( client_id smallserial NOT NULL, first_name character varying(50), last_name character varying(50), full_name character varying(101) GENERATED ALWAYS AS  (CASE WHEN first_name IS NULL THEN last_name WHEN last_name  IS NULL THEN first_name ELSE first_name || ' ' || last_name END) STORED, PRIMARY KEY (client_id) );"], "preprocess_sql": [], "clean_up_sql": ["DROP TABLE IF EXISTS client_information;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_query_result_1 = execute_queries([\"SELECT table_name FROM information_schema.tables WHERE table_name = 'client_information';\"], db_name, conn)[0]\n    assert test_query_result_1[0][0] == 'client_information' , f\"Table client_information not found in database {test_query_result_1}.\"\n    insert_sql = execute_queries([\"INSERT INTO client_information (first_name, last_name) VALUES ('aaa', 'bbb');\"], db_name, conn);\n    test_query_result_2 = execute_queries([\"SELECT full_name FROM client_information WHERE first_name = 'aaa'\"], db_name, conn)[0]\n    assert test_query_result_2 == [('aaa bbb',)], f\"Full name not generated correctly. Found {test_query_result_2}\"\n    update_sql = execute_queries([\"UPDATE client_information SET last_name = 'ccc' WHERE first_name = 'aaa'\"], db_name, conn)\n    test_query_result_3 = execute_queries([\"SELECT full_name FROM client_information WHERE first_name = 'aaa'\"], db_name, conn)[0]\n    assert test_query_result_3 == [('aaa ccc',)], f\"Full name not generated correctly. Found {test_query_result_3}\""], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, we need to create a table to store detailed information about clients, including their first name, last name, and a full name that is automatically generated from the first and last names. The full name should be stored as a generated column. However, when attempting to create the table with a generated column using the CONCAT function, an error occurs indicating that the generation expression is not immutable.\n# Error SQL:\nCREATE TABLE client_information ( client_id smallserial NOT NULL, first_name character varying(50), last_name character varying(50), full_name character varying(100) GENERATED ALWAYS AS (concat(first_name, ' ', last_name)) STORED, PRIMARY KEY (client_id) );\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/40323799/return-rows-from-insert-with-on-conflict-without-needing-to-update", "instance_id": "244_1", "selected_database": "card_games", "query": "In the context of the card_games database, I frequently need to get a card's row based on its unique UUID, and if it does not exist, I want to create it and return its ID. For example, my table might be the 'cards' table. Suppose I want to insert a card with a specific UUID and name, and if the UUID already exists, I want to return the existing card's ID without modifying the row. However, using the following SQL statement, I encounter issues as it does not return the ID when the row already exists:\\nsql \\\\nINSERT INTO cards(uuid, name) VALUES ('5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c', 'Ancestor''s Chosen') \\\\nON CONFLICT DO NOTHING RETURNING id; \\\\n\\nThis statement does not return the ID of the existing row. I need a solution that returns the ID whether the row is inserted or already exists.", "error_sql": ["INSERT INTO cards(uuid, name) VALUES ('5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c', 'Ancestor''s Chosen') ON CONFLICT DO NOTHING RETURNING id;"], "sol_sql": ["WITH ins AS (INSERT INTO cards (uuid, name) VALUES ('5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c', 'Ancestor''s Chosen') ON CONFLICT (uuid) DO UPDATE SET uuid = NULL WHERE FALSE RETURNING id) SELECT id FROM ins UNION ALL SELECT id FROM cards WHERE uuid = '5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c' LIMIT 1;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    global pred_query_result\n    assert len(pred_query_result) == 1, f'Expected 1 row, but found {len(pred_query_result)} rows'\n    assert pred_query_result[0][0] is not None, 'The returned ID should not be None'\n    test_pred_query_result_1 = execute_queries([\"SELECT id FROM cards WHERE uuid = '5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c';\"], db_name, conn)[0]\n    assert pred_query_result[0][0] == test_pred_query_result_1[0][0], f'Expected ID to match, but found {pred_query_result[0][0]} and {test_pred_query_result_1[0][0]}'\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nIn the context of the card_games database, I frequently need to get a card's row based on its unique UUID, and if it does not exist, I want to create it and return its ID. For example, my table might be the 'cards' table. Suppose I want to insert a card with a specific UUID and name, and if the UUID already exists, I want to return the existing card's ID without modifying the row. However, using the following SQL statement, I encounter issues as it does not return the ID when the row already exists:\\nsql \\\\nINSERT INTO cards(uuid, name) VALUES ('5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c', 'Ancestor''s Chosen') \\\\nON CONFLICT DO NOTHING RETURNING id; \\\\n\\nThis statement does not return the ID of the existing row. I need a solution that returns the ID whether the row is inserted or already exists.\n# Error SQL:\nINSERT INTO cards(uuid, name) VALUES ('5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c', 'Ancestor''s Chosen') ON CONFLICT DO NOTHING RETURNING id;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/36313120/postgres-on-conflict-how-to-know-if-an-update-occurred-instead-of-an-insert", "instance_id": "245_1", "selected_database": "financial", "query": "In the financial database, I have a table `account` where I need to insert new records or update existing ones based on the `account_id`. The `date` column should be updated to the current date if the record already exists. I want to know whether an `INSERT` or an `UPDATE` operation was performed. I attempted to use an `ON CONFLICT..DO UPDATE` clause but encountered issues with determining the type of operation. I considered adding an `is_update` column to track this, but it feels unnecessary as it is not related to the data itself.", "error_sql": ["INSERT INTO account (account_id, district_id, frequency, date) VALUES (1, 18, 'POPLATEK MESICNE', CURRENT_DATE) ON CONFLICT (account_id) DO UPDATE SET date = CURRENT_DATE"], "sol_sql": ["INSERT INTO account (account_id, district_id, frequency, date) VALUES (1, 18, 'POPLATEK MESICNE', CURRENT_DATE) ON CONFLICT (account_id) DO UPDATE SET date = CURRENT_DATE RETURNING *, CASE WHEN xmax = 0 THEN 'INSERT' ELSE 'UPDATE' END AS operation_type;"], "preprocess_sql": [], "clean_up_sql": ["UPDATE account SET date = '1995-03-24'", "DELETE FROM account WHERE account_id = 22222"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    global pred_query_result\n    today = execute_queries([\"SELECT CURRENT_DATE\"], db_name, conn)[0][0][0]\n    assert len(pred_query_result) == 1, f'Expected 1 row, but found {len(pred_query_result)} rows'\n    assert pred_query_result[0][4] == 'UPDATE', f'Expected operation_type to be UPDATE, but found {pred_query_result[0][4]}'\n    assert pred_query_result[0][3] == today, f'Expected date is updated to today {today}, but found {pred_query_result[0][3]}'\n    test_query_result_1 = execute_queries([\"INSERT INTO account (account_id, district_id, frequency, date) VALUES (22222, 18, 'POPLATEK MESICNE', CURRENT_DATE) ON CONFLICT (account_id) DO UPDATE SET date = CURRENT_DATE RETURNING *, CASE WHEN xmax = 0 THEN 'INSERT' ELSE 'UPDATE' END AS operation_type;\"], db_name, conn)[0]\n    assert test_query_result_1[0][4] == 'INSERT', f'Expected operation_type to be INSERT, but found {test_query_result_1[0][4]}'"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, I have a table `account` where I need to insert new records or update existing ones based on the `account_id`. The `date` column should be updated to the current date if the record already exists. I want to know whether an `INSERT` or an `UPDATE` operation was performed. I attempted to use an `ON CONFLICT..DO UPDATE` clause but encountered issues with determining the type of operation. I considered adding an `is_update` column to track this, but it feels unnecessary as it is not related to the data itself.\n# Error SQL:\nINSERT INTO account (account_id, district_id, frequency, date) VALUES (1, 18, 'POPLATEK MESICNE', CURRENT_DATE) ON CONFLICT (account_id) DO UPDATE SET date = CURRENT_DATE\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/72425237/postgresql-consecutive-day-with-min-max-tables-contains-multiple-equal-days", "instance_id": "247_2", "selected_database": "card_games", "query": "I am analyzing the release dates of Magic: The Gathering card sets to identify periods of consecutive releases. The data includes multiple entries for the same release date due to different printings or variations. I want to find the longest consecutive release periods along with their start and end dates. Here is the structure of the relevant table:\\n- id SERIAL, releaseDate DATE, setCode VARCHAR(50)\\nThe data could have equal release date entries:\\n- id 1, releaseDate 2019-12-28, setCode '10E'\\n- id 2, releaseDate 2019-12-28, setCode '10E'\\n- id 3, releaseDate 2019-12-29, setCode '10E'\\n- id 4, releaseDate 2019-12-29, setCode '10E'\\n- id 5, releaseDate 2019-12-31, setCode '10E'\\n- id 6, releaseDate 2019-12-31, setCode '10E'\\n- id 7, releaseDate 2020-01-01, setCode '10E'\\n- id 8, releaseDate 2020-01-01, setCode '10E'\\n- id 9, releaseDate 2020-01-02, setCode '10E'\\n- id 10, releaseDate 2020-01-03, setCode '10E'\\n- id 11, releaseDate 2020-01-04, setCode '10E'\\n- id 12, releaseDate 2020-01-04, setCode '10E'\\n- id 13, releaseDate 2020-01-05, setCode '10E'\\n- id 14, releaseDate 2020-01-22, setCode '10E'\\n- id 15, releaseDate 2020-01-29, setCode '10E'\\n- id 16, releaseDate 2020-01-30, setCode '10E'\\nI am interested in getting the consecutive release periods with the start and end dates. An output like this:\\n- count | date MIN | date MAX \\\\(6, 2019-12-31, 2020-01-05)\\\\(2, 2019-12-28, 2019-12-29)\\\\(2, 2020-01-29, 2020-01-30)\\nI tried the following SQL query, but it gives incorrect counts and mismatched start/end dates:\\", "error_sql": ["SELECT COUNT(*) -1 AS count, MAX(releaseDate), MIN(releaseDate) FROM (SELECT *, date(releaseDate) - row_number() OVER (PARTITION BY releaseDate ORDER BY date(releaseDate)) * INTERVAL '1 day' AS filter FROM sets_releaseInfo ) t1 GROUP BY filter HAVING COUNT(*) -1 > 0 ORDER BY count DESC"], "sol_sql": ["SELECT (MAX(releaseDate) - MIN(releaseDate)) + 1 AS cnt, MIN(releaseDate) AS date_min, MAX(releaseDate) AS date_max FROM (SELECT x.*, SUM(i) OVER(ORDER BY releaseDate) AS g FROM (SELECT t.*, CASE WHEN releaseDate > LAG(releaseDate) OVER(ORDER BY releaseDate) + 1 THEN 1 ELSE 0 END AS i FROM sets_releaseInfo t) x) y GROUP BY g;"], "preprocess_sql": ["CREATE TEMP TABLE sets_releaseInfo (id SERIAL, releaseDate DATE, setCode VARCHAR(50));", "INSERT INTO sets_releaseInfo (releaseDate, setCode) VALUES ('2019-12-28', '10E'), ('2019-12-28', '10E'), ('2019-12-29', '10E'), ('2019-12-29', '10E'), ('2019-12-31', '10E'), ('2019-12-31', '10E'), ('2020-01-01', '10E'), ('2020-01-01', '10E'), ('2020-01-02', '10E'), ('2020-01-03', '10E'), ('2020-01-04', '10E'), ('2020-01-04', '10E'), ('2020-01-05', '10E'), ('2020-01-22', '10E'), ('2020-01-29', '10E'), ('2020-01-30', '10E');"], "clean_up_sql": ["DROP TABLE IF EXISTS sets_releaseInfo;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nI am analyzing the release dates of Magic: The Gathering card sets to identify periods of consecutive releases. The data includes multiple entries for the same release date due to different printings or variations. I want to find the longest consecutive release periods along with their start and end dates. Here is the structure of the relevant table:\\n- id SERIAL, releaseDate DATE, setCode VARCHAR(50)\\nThe data could have equal release date entries:\\n- id 1, releaseDate 2019-12-28, setCode '10E'\\n- id 2, releaseDate 2019-12-28, setCode '10E'\\n- id 3, releaseDate 2019-12-29, setCode '10E'\\n- id 4, releaseDate 2019-12-29, setCode '10E'\\n- id 5, releaseDate 2019-12-31, setCode '10E'\\n- id 6, releaseDate 2019-12-31, setCode '10E'\\n- id 7, releaseDate 2020-01-01, setCode '10E'\\n- id 8, releaseDate 2020-01-01, setCode '10E'\\n- id 9, releaseDate 2020-01-02, setCode '10E'\\n- id 10, releaseDate 2020-01-03, setCode '10E'\\n- id 11, releaseDate 2020-01-04, setCode '10E'\\n- id 12, releaseDate 2020-01-04, setCode '10E'\\n- id 13, releaseDate 2020-01-05, setCode '10E'\\n- id 14, releaseDate 2020-01-22, setCode '10E'\\n- id 15, releaseDate 2020-01-29, setCode '10E'\\n- id 16, releaseDate 2020-01-30, setCode '10E'\\nI am interested in getting the consecutive release periods with the start and end dates. An output like this:\\n- count | date MIN | date MAX \\\\(6, 2019-12-31, 2020-01-05)\\\\(2, 2019-12-28, 2019-12-29)\\\\(2, 2020-01-29, 2020-01-30)\\nI tried the following SQL query, but it gives incorrect counts and mismatched start/end dates:\\\n# Error SQL:\nSELECT COUNT(*) -1 AS count, MAX(releaseDate), MIN(releaseDate) FROM (SELECT *, date(releaseDate) - row_number() OVER (PARTITION BY releaseDate ORDER BY date(releaseDate)) * INTERVAL '1 day' AS filter FROM sets_releaseInfo ) t1 GROUP BY filter HAVING COUNT(*) -1 > 0 ORDER BY count DESC\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/79112304/how-to-get-the-complete-path-with-cte", "instance_id": "248_2", "selected_database": "card_games", "query": "In the card_games database, we have a table named 'collection' where each card can have a reference to another card through the 'nextCardId' column. This column represents the ID of the next card in a sequence. We want to generate a sequence path for each card starting from the card that has no previous card (i.e., no card points to it) and ending at the card that has no next card (i.e., its 'nextCardId' is NULL). The path should be represented as a string of card IDs separated by ' --> '.\\nFor example, if we have the following data:\\n| id  | nextCardId |\\n|-----|------------|\\n| 1   | 5          |\\n| 2   | NULL       |\\n| 3   | 6          |\\n| 4   | 7          |\\n| 5   | 8          |\\n| 6   | 9          |\\n| 7   | NULL       |\\n| 8   | NULL       |\\n| 9   | 10         |\\n| 10  | NULL       |\\nWe want to get the following paths:\\n1 --> 5 --> 8;\\n2;\\n3 --> 6 --> 9 --> 10;\\n4 --> 7;\\nHowever, when we run the following SQL query, we get incorrect results that include incomplete paths:\\nsql;\\nWITH RECURSIVE path_cte AS (\\n  SELECT id, nextCardId, id::TEXT AS Path;\\n  FROM collection\\n  WHERE nextCardId IS NULL\\n  UNION ALL\\n  SELECT collection.id, collection.nextCardId, collection.id || ' --> ' || cte.Path\\n  FROM collection\\n  JOIN path_cte cte ON collection.nextCardId = cte.id\\n)\\nSELECT Path\\nFROM path_cte\\nORDER BY id;\\n\\nWe need to correct this query to get only the complete paths starting from the cards that have no previous card and ending at the cards that have no next card.", "error_sql": ["WITH RECURSIVE path_cte AS (SELECT id, nextCardId, id::TEXT AS Path FROM collection WHERE nextCardId IS NULL UNION ALL SELECT collection.id, collection.nextCardId, collection.id || ' --> ' || cte.Path FROM collection JOIN path_cte cte ON collection.nextCardId = cte.id) SELECT Path FROM path_cte ORDER BY id;"], "sol_sql": ["WITH RECURSIVE path_cte AS (SELECT id, id::text AS Path, id AS FirstID, 1 AS Lvl FROM collection WHERE nextCardId IS NULL UNION ALL SELECT collection.id, collection.id::text || ' --> ' || cte.Path, cte.FirstId, cte.Lvl + 1 FROM collection JOIN path_cte cte ON collection.nextCardId = cte.id) SELECT DISTINCT ON (FirstID) Path FROM path_cte ORDER BY FirstID, Lvl DESC, id;"], "preprocess_sql": ["CREATE TABLE collection (id INTEGER NOT NULL PRIMARY KEY, nextCardId INTEGER)", "INSERT INTO collection (id, nextCardId) VALUES (1, 5), (2, NULL), (3, 6), (4, 7), (5, 8), (6, 9), (7, NULL), (8, NULL), (9, 10), (10, NULL);"], "clean_up_sql": ["DROP TABLE IF EXISTS collection"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nIn the card_games database, we have a table named 'collection' where each card can have a reference to another card through the 'nextCardId' column. This column represents the ID of the next card in a sequence. We want to generate a sequence path for each card starting from the card that has no previous card (i.e., no card points to it) and ending at the card that has no next card (i.e., its 'nextCardId' is NULL). The path should be represented as a string of card IDs separated by ' --> '.\\nFor example, if we have the following data:\\n| id  | nextCardId |\\n|-----|------------|\\n| 1   | 5          |\\n| 2   | NULL       |\\n| 3   | 6          |\\n| 4   | 7          |\\n| 5   | 8          |\\n| 6   | 9          |\\n| 7   | NULL       |\\n| 8   | NULL       |\\n| 9   | 10         |\\n| 10  | NULL       |\\nWe want to get the following paths:\\n1 --> 5 --> 8;\\n2;\\n3 --> 6 --> 9 --> 10;\\n4 --> 7;\\nHowever, when we run the following SQL query, we get incorrect results that include incomplete paths:\\nsql;\\nWITH RECURSIVE path_cte AS (\\n  SELECT id, nextCardId, id::TEXT AS Path;\\n  FROM collection\\n  WHERE nextCardId IS NULL\\n  UNION ALL\\n  SELECT collection.id, collection.nextCardId, collection.id || ' --> ' || cte.Path\\n  FROM collection\\n  JOIN path_cte cte ON collection.nextCardId = cte.id\\n)\\nSELECT Path\\nFROM path_cte\\nORDER BY id;\\n\\nWe need to correct this query to get only the complete paths starting from the cards that have no previous card and ending at the cards that have no next card.\n# Error SQL:\nWITH RECURSIVE path_cte AS (SELECT id, nextCardId, id::TEXT AS Path FROM collection WHERE nextCardId IS NULL UNION ALL SELECT collection.id, collection.nextCardId, collection.id || ' --> ' || cte.Path FROM collection JOIN path_cte cte ON collection.nextCardId = cte.id) SELECT Path FROM path_cte ORDER BY id;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/73959815/can-i-start-the-quarter-of-the-year-from-the-month-i-wanted-to-on-postgresql", "instance_id": "249_1", "selected_database": "financial", "query": "In the financial database, I need to classify transactions by quarter, but I want the quarters to start at a configurable month. If I set the quarter to start in April, then April, May, and June should be the first quarter. I think I need a function what_quarter_is(date_in, start_month). For example, what_quarter_is('1995-07-23', 4) = 2. The default EXTRACT(QUARTER FROM date) function in PostgreSQL starts quarters in January, which does not meet my requirements.", "error_sql": ["SELECT EXTRACT(QUARTER FROM TIMESTAMP '2001-02-16 20:38:40');"], "sol_sql": ["CREATE OR REPLACE FUNCTION what_quarter_is(date_in DATE, start_mon_in INTEGER DEFAULT 1) RETURNS INTEGER LANGUAGE sql AS $$ WITH RECURSIVE qtrs(mq, q, m, c) AS (SELECT 1, 1, start_mon_in, 1 UNION ALL SELECT mq % 3 + 1, CASE WHEN mq % 3 + 1 = 1 THEN q + 1 ELSE q END, CASE WHEN m = 12 THEN 1 ELSE m + 1 END, c + 1 FROM qtrs WHERE c < 12) SELECT q FROM qtrs WHERE m = EXTRACT(MONTH FROM date_in); $$;"], "preprocess_sql": [], "clean_up_sql": ["DROP FUNCTION what_quarter_is(date, integer);"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_query_result_1 = execute_queries([\"SELECT proname, proargnames, prorettype::regtype, prosrc FROM pg_proc WHERE proname = 'what_quarter_is';\"], db_name, conn)[0]\n    assert len(test_query_result_1) == 1, f'Expected 1 row, but found {len(test_query_result_1)} row(s).'\n    test_query_result_2 = execute_queries([\"SELECT what_quarter_is('2024-01-01', 4)\"], db_name, conn)[0]\n    assert test_query_result_2[0][0] == 4, f'Expected 4, but found {test_query_result_2[0][0]}'\n    test_query_result_3 = execute_queries([\"SELECT what_quarter_is('2023-07-01', 2)\"], db_name, conn)[0]\n    assert test_query_result_3[0][0] == 2, f'Expected 2, but found {test_query_result_3[0][0]}.'"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, I need to classify transactions by quarter, but I want the quarters to start at a configurable month. If I set the quarter to start in April, then April, May, and June should be the first quarter. I think I need a function what_quarter_is(date_in, start_month). For example, what_quarter_is('1995-07-23', 4) = 2. The default EXTRACT(QUARTER FROM date) function in PostgreSQL starts quarters in January, which does not meet my requirements.\n# Error SQL:\nSELECT EXTRACT(QUARTER FROM TIMESTAMP '2001-02-16 20:38:40');\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74689430/how-to-sum-multiple-columns", "instance_id": "264_2", "selected_database": "debit_card_specializing", "query": "In the context of a database specializing in debit card transactions, a user wants to calculate the total sum of multiple columns across all transactions without grouping by any specific column. The user initially attempted to use a query that groups by a specific column, which did not yield the desired result. The user's goal is to obtain a  object containing the total sums of the 'Amount', 'Price', and 'TransactionID' columns from the 'transactions_1k' table.", "error_sql": ["SELECT CustomerID, SUM(Amount) AS Amount, SUM(Price) AS Price, SUM(TransactionID) AS TransactionID FROM transactions_1k GROUP BY CustomerID;"], "sol_sql": ["SELECT SUM(Amount) AS Amount, SUM(Price) AS Price, SUM(TransactionID) AS TransactionID FROM transactions_1k;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: debit_card_specializing********************\nCREATE TABLE \"customers\" (\ncustomerid bigint NOT NULL,\nsegment text NULL,\ncurrency text NULL,\n    PRIMARY KEY (customerid)\n);\n\nExample data:\n customerid segment currency\n          3     SME      EUR\n          5     LAM      EUR\n          6     SME      EUR\n==================================================\n\n\nCREATE TABLE \"gasstations\" (\ngasstationid bigint NOT NULL,\nchainid bigint NULL,\ncountry text NULL,\nsegment text NULL,\n    PRIMARY KEY (gasstationid)\n);\n\nExample data:\n gasstationid  chainid country         segment\n           44       13     CZE Value for money\n           45        6     CZE         Premium\n           46       23     CZE           Other\n==================================================\n\n\nCREATE TABLE \"products\" (\nproductid bigint NOT NULL,\ndescription text NULL,\n    PRIMARY KEY (productid)\n);\n\nExample data:\n productid  description\n         1 Rucní zadání\n         2        Nafta\n         3      Special\n==================================================\n\n\nCREATE TABLE \"yearmonth\" (\ncustomerid bigint NULL,\ndate text NULL,\nconsumption real NULL\n);\n\nExample data:\n customerid   date  consumption\n          5 201207       528.30\n          5 201302      1598.28\n          5 201303      1931.36\n==================================================\n\n\nCREATE TABLE \"transactions_1k\" (\ntransactionid bigint NOT NULL DEFAULT nextval('transactions_1k_transactionid_seq'::regclass),\ndate date NULL,\ntime text NULL,\ncustomerid bigint NULL,\ncardid bigint NULL,\ngasstationid bigint NULL,\nproductid bigint NULL,\namount bigint NULL,\nprice real NULL,\n    PRIMARY KEY (transactionid)\n);\n\nExample data:\n transactionid       date     time  customerid  cardid  gasstationid  productid  amount  price\n             1 2012-08-24 09:41:00       31543  486621          3704          2      28 672.64\n             2 2012-08-24 10:03:00       46707  550134          3704          2      18 430.72\n             3 2012-08-24 10:03:00       46707  550134          3704         23       1 121.99\n==================================================\n\n********************Database: debit_card_specializing********************\n\n# User Query:\nIn the context of a database specializing in debit card transactions, a user wants to calculate the total sum of multiple columns across all transactions without grouping by any specific column. The user initially attempted to use a query that groups by a specific column, which did not yield the desired result. The user's goal is to obtain a  object containing the total sums of the 'Amount', 'Price', and 'TransactionID' columns from the 'transactions_1k' table.\n# Error SQL:\nSELECT CustomerID, SUM(Amount) AS Amount, SUM(Price) AS Price, SUM(TransactionID) AS TransactionID FROM transactions_1k GROUP BY CustomerID;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/72679453/postgresql-sql-script-to-get-a-list-of-all-foreign-key-references-to-a-table", "instance_id": "265_1", "selected_database": "codebase_community", "query": "In the codebase_community database, I have a table named 'users' with a primary key of 'id'. I need to find all tables, columns, and constraints that reference the 'users' table regardless of which column in 'users' is referenced. For example, if there is a table named 'posts' with a foreign key constraint as follows:\\nCREATE TABLE posts (\\n    id bigint NOT NULL,\\n    owneruserid bigint NULL,\\n    lasteditoruserid bigint NULL,\\n    PRIMARY KEY (id),\\n    FOREIGN KEY (owneruserid) REFERENCES users(id),\\n    FOREIGN KEY (lasteditoruserid) REFERENCES users(id)\\n);\\nI should get back rows like the following:\\nbase_table     base_col    referencing_table   referencing_col  constraint_sql\\nusers          id          posts               owneruserid        CONSTRAINT posts_owneruserid_fkey FOREIGN KEY (owneruserid) REFERENCES users(id)\\nusers          id          posts               lasteditoruserid   CONSTRAINT posts_lasteditoruserid_fkey FOREIGN KEY (lasteditoruserid) REFERENCES users(id)\\nNon-primary key references should also be listed and it should handle compound keys.", "error_sql": ["SELECT (select r.relname from pg_class r where r.oid = c.confrelid) as base_table,\\n       a.attname as base_col,\\n       (select r.relname from pg_class r where r.oid = c.conrelid) as referencing_table,\\n       UNNEST((select array_agg(attname) from pg_attribute where attrelid = c.conrelid and array[attnum] <@ c.conkey)) as referencing_col,\\n       pg_get_constraintdef(c.oid) contraint_sql  FROM pg_constraint c join pg_attribute a on c.confrelid=a.attrelid and a.attnum = ANY(confkey)\\n WHERE c.confrelid = (select oid from pg_class where relname = 'users')\\n   AND c.confrelid!=c.conrelid;"], "sol_sql": ["SELECT (select r.relname from pg_class r where r.oid = c.confrelid) as base_table, a.attname as base_col, (select r.relname from pg_class r where r.oid = c.conrelid) as referencing_table, UNNEST((select array_agg(attname) from pg_attribute where attrelid = c.conrelid and array[attnum] <@ c.conkey)) as referencing_col, pg_get_constraintdef(c.oid) contraint_sql  FROM pg_constraint c join pg_attribute a on c.confrelid=a.attrelid and a.attnum = ANY(confkey) WHERE c.confrelid = (select oid from pg_class where relname = 'users') AND c.confrelid!=c.conrelid;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: codebase_community********************\nCREATE TABLE \"postlinks\" (\nid bigint NOT NULL,\ncreationdate timestamp with time zone NULL,\npostid bigint NULL,\nrelatedpostid bigint NULL,\nlinktypeid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id              creationdate  postid  relatedpostid  linktypeid\n108 2010-07-21 14:47:33+08:00     395            173           1\n145 2010-07-23 16:30:41+08:00     548            539           1\n217 2010-07-26 20:12:15+08:00     375             30           1\n==================================================\n\n\nCREATE TABLE \"posthistory\" (\nid bigint NOT NULL,\nposthistorytypeid bigint NULL,\npostid bigint NULL,\nrevisionguid text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\ntext text NULL,\ncomment text NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  posthistorytypeid  postid                         revisionguid              creationdate  userid comment userdisplayname\n  1                  2       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  2                  1       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  3                  3       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n==================================================\n\n\nCREATE TABLE \"badges\" (\nid bigint NOT NULL,\nuserid bigint NULL,\nname text NULL,\ndate timestamp with time zone NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  userid    name                      date\n  1       5 Teacher 2010-07-19 19:39:07+08:00\n  2       6 Teacher 2010-07-19 19:39:07+08:00\n  3       8 Teacher 2010-07-19 19:39:07+08:00\n==================================================\n\n\nCREATE TABLE \"posts\" (\nid bigint NOT NULL,\nposttypeid bigint NULL,\nacceptedanswerid bigint NULL,\ncreaiondate timestamp with time zone NULL,\nscore bigint NULL,\nviewcount bigint NULL,\nbody text NULL,\nowneruserid bigint NULL,\nlasactivitydate timestamp with time zone NULL,\ntitle text NULL,\ntags text NULL,\nanswercount bigint NULL,\ncommentcount bigint NULL,\nfavoritecount bigint NULL,\nlasteditoruserid bigint NULL,\nlasteditdate timestamp with time zone NULL,\ncommunityowneddate timestamp with time zone NULL,\nparentid bigint NULL,\ncloseddate timestamp with time zone NULL,\nownerdisplayname text NULL,\nlasteditordisplayname text NULL,\n    PRIMARY KEY (id),\n    FOREIGN KEY (lasteditoruserid) REFERENCES users(id),\n    FOREIGN KEY (owneruserid) REFERENCES users(id)\n);\n\nExample data:\n id  posttypeid  acceptedanswerid               creaiondate  score  viewcount  owneruserid           lasactivitydate                                                             title                           tags  answercount  commentcount  favoritecount  lasteditoruserid              lasteditdate        communityowneddate parentid closeddate ownerdisplayname lasteditordisplayname\n  1           1                15 2010-07-19 19:12:12+08:00     23       1278            8 2010-09-15 21:08:26+08:00                                     Eliciting priors from experts <bayesian><prior><elicitation>            5             1             14               NaN                       NaT                       NaT     None       None             None                  None\n  2           1                59 2010-07-19 19:12:57+08:00     22       8198           24 2012-11-12 09:21:54+08:00                                                What is normality?     <distributions><normality>            7             1              8              88.0 2010-08-07 17:56:44+08:00                       NaT     None       None             None                  None\n  3           1                 5 2010-07-19 19:13:28+08:00     54       3613           18 2013-05-27 14:48:36+08:00 What are some valuable Statistical Analysis open source projects?        <software><open-source>           19             4             36             183.0 2011-02-12 05:50:03+08:00 2010-07-19 19:13:28+08:00     None       None             None                  None\n==================================================\n\n\nCREATE TABLE \"users\" (\nid bigint NOT NULL,\nreputation bigint NULL,\ncreationdate timestamp with time zone NULL,\ndisplayname text NULL,\nlastaccessdate timestamp with time zone NULL,\nwebsiteurl text NULL,\nlocation text NULL,\naboutme text NULL,\nviews bigint NULL,\nupvotes bigint NULL,\ndownvotes bigint NULL,\naccountid bigint NULL,\nage bigint NULL,\nprofileimageurl text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  reputation              creationdate  displayname            lastaccessdate                     websiteurl           location  views  upvotes  downvotes  accountid  age\n -1           1 2010-07-19 06:55:26+08:00    Community 2010-07-19 06:55:26+08:00 http://meta.stackexchange.com/ on the server farm      0     5007       1920         -1  NaN\n  2         101 2010-07-19 14:01:36+08:00 Geoff Dalgas 2013-11-12 22:07:23+08:00       http://stackoverflow.com      Corvallis, OR     25        3          0          2 37.0\n  3         101 2010-07-19 15:34:50+08:00 Jarrod Dixon 2014-08-08 06:42:58+08:00       http://stackoverflow.com       New York, NY     22       19          0          3 35.0\n==================================================\n\n\nCREATE TABLE \"tags\" (\nid bigint NOT NULL,\ntagname text NULL,\ncount bigint NULL,\nexcerptpostid bigint NULL,\nwikipostid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id     tagname  count  excerptpostid  wikipostid\n  1    bayesian   1342        20258.0     20257.0\n  2       prior    168        62158.0     62157.0\n  3 elicitation      6            NaN         NaN\n==================================================\n\n\nCREATE TABLE \"votes\" (\nid bigint NOT NULL,\npostid bigint NULL,\nvotetypeid bigint NULL,\ncreationdate date NULL,\nuserid bigint NULL,\nbountyamount bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  votetypeid creationdate userid bountyamount\n  1       3           2   2010-07-19   None         None\n  2       2           2   2010-07-19   None         None\n  3       5           2   2010-07-19   None         None\n==================================================\n\n\nCREATE TABLE \"comments\" (\nid bigint NOT NULL,\npostid bigint NULL,\nscore bigint NULL,\ntext text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  score              creationdate  userid userdisplayname\n  1       3      5 2010-07-19 19:15:52+08:00      13            None\n  2       5      0 2010-07-19 19:16:14+08:00      13            None\n  3       9      0 2010-07-19 19:18:54+08:00      13            None\n==================================================\n\n********************Database: codebase_community********************\n\n# User Query:\nIn the codebase_community database, I have a table named 'users' with a primary key of 'id'. I need to find all tables, columns, and constraints that reference the 'users' table regardless of which column in 'users' is referenced. For example, if there is a table named 'posts' with a foreign key constraint as follows:\\nCREATE TABLE posts (\\n    id bigint NOT NULL,\\n    owneruserid bigint NULL,\\n    lasteditoruserid bigint NULL,\\n    PRIMARY KEY (id),\\n    FOREIGN KEY (owneruserid) REFERENCES users(id),\\n    FOREIGN KEY (lasteditoruserid) REFERENCES users(id)\\n);\\nI should get back rows like the following:\\nbase_table     base_col    referencing_table   referencing_col  constraint_sql\\nusers          id          posts               owneruserid        CONSTRAINT posts_owneruserid_fkey FOREIGN KEY (owneruserid) REFERENCES users(id)\\nusers          id          posts               lasteditoruserid   CONSTRAINT posts_lasteditoruserid_fkey FOREIGN KEY (lasteditoruserid) REFERENCES users(id)\\nNon-primary key references should also be listed and it should handle compound keys.\n# Error SQL:\nSELECT (select r.relname from pg_class r where r.oid = c.confrelid) as base_table,\\n       a.attname as base_col,\\n       (select r.relname from pg_class r where r.oid = c.conrelid) as referencing_table,\\n       UNNEST((select array_agg(attname) from pg_attribute where attrelid = c.conrelid and array[attnum] <@ c.conkey)) as referencing_col,\\n       pg_get_constraintdef(c.oid) contraint_sql  FROM pg_constraint c join pg_attribute a on c.confrelid=a.attrelid and a.attnum = ANY(confkey)\\n WHERE c.confrelid = (select oid from pg_class where relname = 'users')\\n   AND c.confrelid!=c.conrelid;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/37470931/how-to-ignore-nulls-in-postgresql-window-functions-or-return-the-next-non-null", "instance_id": "349_1", "selected_database": "financial", "query": "We have a table 'trans' that records all transactions made by clients in various accounts. Each transaction has a 'trans_id', 'account_id', 'date', 'type', 'operation', 'amount', 'balance', 'k_symbol', 'bank', and 'account'. We need to add a new column 'next_bank' to the 'trans' table that indicates the next non-null 'bank' value for each transaction, ordered by 'date' within each 'account_id'. For example, if a transaction has a null 'bank', the 'next_bank' should be the 'bank' of the next transaction in the same account that has a non-null 'bank'. The user attempted to use the following SQL query, which fails in PostgreSQL due to the lack of support for the 'ignore nulls' clause in the window function. The query is as follows:", "error_sql": ["SELECT first_value(bank ignore nulls) over (partition by account_id order by date rows unbounded following) as next_bank FROM trans;"], "sol_sql": ["SELECT bank, first_value(bank) over (partition by account_id order by date rows between current row and unbounded following) as next_bank FROM trans WHERE bank is not null ORDER BY account_id, date;"], "preprocess_sql": "ALTER TABLE trans ADD COLUMN next_amount int;", "clean_up_sql": "ALTER TABLE trans DROP COLUMN next_amount;", "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nWe have a table 'trans' that records all transactions made by clients in various accounts. Each transaction has a 'trans_id', 'account_id', 'date', 'type', 'operation', 'amount', 'balance', 'k_symbol', 'bank', and 'account'. We need to add a new column 'next_bank' to the 'trans' table that indicates the next non-null 'bank' value for each transaction, ordered by 'date' within each 'account_id'. For example, if a transaction has a null 'bank', the 'next_bank' should be the 'bank' of the next transaction in the same account that has a non-null 'bank'. The user attempted to use the following SQL query, which fails in PostgreSQL due to the lack of support for the 'ignore nulls' clause in the window function. The query is as follows:\n# Error SQL:\nSELECT first_value(bank ignore nulls) over (partition by account_id order by date rows unbounded following) as next_bank FROM trans;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/76284271/unexpected-behavior-for-count-on-empty-table", "instance_id": "436_1", "selected_database": "financial", "query": "In the financial database, there are two tables, `account` and `loan`. The `account` table contains multiple entries representing various bank accounts, while the `loan` table is currently empty as no loans have been issued yet. The following query correctly returns the expected result, namely `account_count` larger than `0`:\\nsql \\\\\\\\nSELECT COUNT(DISTINCT account_id) AS count_a FROM account \\\\\\\\n\\nHowever, the following query returns `0` for both `count_a` and `count_b`:\\nsql \\\\\\\\nSELECT COUNT(DISTINCT a.account_id) AS count_a, COUNT(DISTINCT l.account_id) AS count_b FROM account a, loan l \\\\\\\\n\\nWhat is the correct way to write the query so that `count_a` contains the correct (expected) value > `0`, whereas `count_b` is `0`?", "error_sql": ["SELECT COUNT(DISTINCT a.account_id) AS count_a, COUNT(DISTINCT l.account_id) AS count_b FROM account a, loan l;"], "sol_sql": ["SELECT (SELECT COUNT(DISTINCT account_id) FROM account) AS count_a, (SELECT COUNT(DISTINCT account_id) FROM loan) AS count_b;"], "preprocess_sql": ["TRUNCATE TABLE loan CASCADE;"], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, there are two tables, `account` and `loan`. The `account` table contains multiple entries representing various bank accounts, while the `loan` table is currently empty as no loans have been issued yet. The following query correctly returns the expected result, namely `account_count` larger than `0`:\\nsql \\\\\\\\nSELECT COUNT(DISTINCT account_id) AS count_a FROM account \\\\\\\\n\\nHowever, the following query returns `0` for both `count_a` and `count_b`:\\nsql \\\\\\\\nSELECT COUNT(DISTINCT a.account_id) AS count_a, COUNT(DISTINCT l.account_id) AS count_b FROM account a, loan l \\\\\\\\n\\nWhat is the correct way to write the query so that `count_a` contains the correct (expected) value > `0`, whereas `count_b` is `0`?\n# Error SQL:\nSELECT COUNT(DISTINCT a.account_id) AS count_a, COUNT(DISTINCT l.account_id) AS count_b FROM account a, loan l;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74824241/how-to-add-a-second-select-based-on-the-results-of-the-first", "instance_id": "437_1", "selected_database": "european_football_2", "query": "I have two separate queries that I want to combine. The first query retrieves the team_api_id and short names of teams from the Team table. The second query retrieves the buildUpPlaySpeed from the Team_Attributes table, based on the team_api_id. I want to combine these two queries into a single query that outputs theteam_api_id, team long name, and the corresponding buildUpPlaySpeed. I have tried the following sql: \\nsql \\\\\\\\nSELECT team_api_id, team_short_name FROM Team as data FULL OUTER JOIN ( SELECT buildUpPlaySpeed, team_api_id FROM Team_Attributes ta WHERE team_api_id = data.team_api_id ) AS subquery_alias ON data.team_api_id = subquery_alias.team_api_id; \\\\\\\\n\\n However, when I ran this query, I encountered an error: There is an entry for table 'data' but it cannot be referenced from this part of the query. How can I modify my query so that it properly combines the results of the two queries?", "error_sql": ["SELECT team_api_id, team_short_name FROM Team as data FULL OUTER JOIN (SELECT buildUpPlaySpeed, team_api_id FROM Team_Attributes ta WHERE team_api_id = data.team_api_id) AS subquery_alias ON data.team_api_id = subquery_alias.team_api_id;"], "sol_sql": ["SELECT t1.team_api_id, t1.team_short_name, t2.buildUpPlaySpeed FROM Team t1 INNER JOIN Team_Attributes t2 ON t1.team_api_id = t2.team_api_id"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: european_football_2********************\nCREATE TABLE \"team_attributes\" (\nid bigint NOT NULL DEFAULT nextval('team_attributes_id_seq'::regclass),\nteam_fifa_api_id bigint NULL,\nteam_api_id bigint NULL,\ndate text NULL,\nbuildupplayspeed bigint NULL,\nbuildupplayspeedclass text NULL,\nbuildupplaydribbling bigint NULL,\nbuildupplaydribblingclass text NULL,\nbuildupplaypassing bigint NULL,\nbuildupplaypassingclass text NULL,\nbuildupplaypositioningclass text NULL,\nchancecreationpassing bigint NULL,\nchancecreationpassingclass text NULL,\nchancecreationcrossing bigint NULL,\nchancecreationcrossingclass text NULL,\nchancecreationshooting bigint NULL,\nchancecreationshootingclass text NULL,\nchancecreationpositioningclass text NULL,\ndefencepressure bigint NULL,\ndefencepressureclass text NULL,\ndefenceaggression bigint NULL,\ndefenceaggressionclass text NULL,\ndefenceteamwidth bigint NULL,\ndefenceteamwidthclass text NULL,\ndefencedefenderlineclass text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_fifa_api_id  team_api_id                date  buildupplayspeed buildupplayspeedclass  buildupplaydribbling buildupplaydribblingclass  buildupplaypassing buildupplaypassingclass buildupplaypositioningclass  chancecreationpassing chancecreationpassingclass  chancecreationcrossing chancecreationcrossingclass  chancecreationshooting chancecreationshootingclass chancecreationpositioningclass  defencepressure defencepressureclass  defenceaggression defenceaggressionclass  defenceteamwidth defenceteamwidthclass defencedefenderlineclass\n  1               434         9930 2010-02-22 00:00:00                60              Balanced                   NaN                    Little                  50                   Mixed                   Organised                     60                     Normal                      65                      Normal                      55                      Normal                      Organised               50               Medium                 55                  Press                45                Normal                    Cover\n  2               434         9930 2014-09-19 00:00:00                52              Balanced                  48.0                    Normal                  56                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n  3               434         9930 2015-09-10 00:00:00                47              Balanced                  41.0                    Normal                  54                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n==================================================\n\n\nCREATE TABLE \"player\" (\nid bigint NOT NULL DEFAULT nextval('player_id_seq'::regclass),\nplayer_api_id bigint NULL,\nplayer_name text NULL,\nplayer_fifa_api_id bigint NULL,\nbirthday text NULL,\nheight bigint NULL,\nweight bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_api_id        player_name  player_fifa_api_id            birthday  height  weight\n  1         505942 Aaron Appindangoye              218353 1992-02-29 00:00:00     182     187\n  2         155782    Aaron Cresswell              189615 1989-12-15 00:00:00     170     146\n  3         162549        Aaron Doran              186170 1991-05-13 00:00:00     170     163\n==================================================\n\n\nCREATE TABLE \"match\" (\nid bigint NOT NULL DEFAULT nextval('match_id_seq'::regclass),\ncountry_id bigint NULL,\nleague_id bigint NULL,\nseason text NULL,\nstage bigint NULL,\ndate text NULL,\nmatch_api_id bigint NULL,\nhome_team_api_id bigint NULL,\naway_team_api_id bigint NULL,\nhome_team_goal bigint NULL,\naway_team_goal bigint NULL,\ngoal text NULL,\nshoton text NULL,\nshotoff text NULL,\nfoulcommit text NULL,\ncard text NULL,\ncross text NULL,\ncorner text NULL,\npossession text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  country_id  league_id    season  stage                date  match_api_id  home_team_api_id  away_team_api_id  home_team_goal  away_team_goal\n  1           1          1 2008/2009      1 2008-08-17 00:00:00        492473              9987              9993               1               1\n  2           1          1 2008/2009      1 2008-08-16 00:00:00        492474             10000              9994               0               0\n  3           1          1 2008/2009      1 2008-08-16 00:00:00        492475              9984              8635               0               3\n==================================================\n\n\nCREATE TABLE \"league\" (\nid bigint NOT NULL DEFAULT nextval('league_id_seq'::regclass),\ncountry_id bigint NULL,\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id  country_id                   name\n   1           1 Belgium Jupiler League\n1729        1729 England Premier League\n4769        4769         France Ligue 1\n==================================================\n\n\nCREATE TABLE \"country\" (\nid bigint NOT NULL DEFAULT nextval('country_id_seq'::regclass),\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id    name\n   1 Belgium\n1729 England\n4769  France\n==================================================\n\n\nCREATE TABLE \"player_attributes\" (\nid bigint NOT NULL DEFAULT nextval('player_attributes_id_seq'::regclass),\nplayer_fifa_api_id bigint NULL,\nplayer_api_id bigint NULL,\ndate text NULL,\noverall_rating bigint NULL,\npotential bigint NULL,\npreferred_foot text NULL,\nattacking_work_rate text NULL,\ndefensive_work_rate text NULL,\ncrossing bigint NULL,\nfinishing bigint NULL,\nheading_accuracy bigint NULL,\nshort_passing bigint NULL,\nvolleys bigint NULL,\ndribbling bigint NULL,\ncurve bigint NULL,\nfree_kick_accuracy bigint NULL,\nlong_passing bigint NULL,\nball_control bigint NULL,\nacceleration bigint NULL,\nsprint_speed bigint NULL,\nagility bigint NULL,\nreactions bigint NULL,\nbalance bigint NULL,\nshot_power bigint NULL,\njumping bigint NULL,\nstamina bigint NULL,\nstrength bigint NULL,\nlong_shots bigint NULL,\naggression bigint NULL,\ninterceptions bigint NULL,\npositioning bigint NULL,\nvision bigint NULL,\npenalties bigint NULL,\nmarking bigint NULL,\nstanding_tackle bigint NULL,\nsliding_tackle bigint NULL,\ngk_diving bigint NULL,\ngk_handling bigint NULL,\ngk_kicking bigint NULL,\ngk_positioning bigint NULL,\ngk_reflexes bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_fifa_api_id  player_api_id                date  overall_rating  potential preferred_foot attacking_work_rate defensive_work_rate  crossing  finishing  heading_accuracy  short_passing  volleys  dribbling  curve  free_kick_accuracy  long_passing  ball_control  acceleration  sprint_speed  agility  reactions  balance  shot_power  jumping  stamina  strength  long_shots  aggression  interceptions  positioning  vision  penalties  marking  standing_tackle  sliding_tackle  gk_diving  gk_handling  gk_kicking  gk_positioning  gk_reflexes\n  1              218353         505942 2016-02-18 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  2              218353         505942 2015-11-19 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  3              218353         505942 2015-09-21 00:00:00              62         66          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          63             41           45      54         48       65               66              69          6           11          10               8            8\n==================================================\n\n\nCREATE TABLE \"team\" (\nid bigint NOT NULL DEFAULT nextval('team_id_seq'::regclass),\nteam_api_id bigint NULL,\nteam_fifa_api_id bigint NULL,\nteam_long_name text NULL,\nteam_short_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_api_id  team_fifa_api_id   team_long_name team_short_name\n  1         9987               673         KRC Genk             GEN\n  2         9993               675     Beerschot AC             BAC\n  3        10000             15005 SV Zulte-Waregem             ZUL\n==================================================\n\n********************Database: european_football_2********************\n\n# User Query:\nI have two separate queries that I want to combine. The first query retrieves the team_api_id and short names of teams from the Team table. The second query retrieves the buildUpPlaySpeed from the Team_Attributes table, based on the team_api_id. I want to combine these two queries into a single query that outputs theteam_api_id, team long name, and the corresponding buildUpPlaySpeed. I have tried the following sql: \\nsql \\\\\\\\nSELECT team_api_id, team_short_name FROM Team as data FULL OUTER JOIN ( SELECT buildUpPlaySpeed, team_api_id FROM Team_Attributes ta WHERE team_api_id = data.team_api_id ) AS subquery_alias ON data.team_api_id = subquery_alias.team_api_id; \\\\\\\\n\\n However, when I ran this query, I encountered an error: There is an entry for table 'data' but it cannot be referenced from this part of the query. How can I modify my query so that it properly combines the results of the two queries?\n# Error SQL:\nSELECT team_api_id, team_short_name FROM Team as data FULL OUTER JOIN (SELECT buildUpPlaySpeed, team_api_id FROM Team_Attributes ta WHERE team_api_id = data.team_api_id) AS subquery_alias ON data.team_api_id = subquery_alias.team_api_id;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/78976146/combine-two-tables-doing-row-count-based-on-hour-value-in-timestamp", "instance_id": "439_1", "selected_database": "financial", "query": "We have two tables in our financial database: `trans` and `loan`. The `trans` table records all transactions made by clients, while the `loan` table records all loans issued to clients. Each transaction and loan has a timestamp indicating when it occurred. We want to combine these two tables into a single dataset, without worrying about clashing IDs, and then count the number of actions (transactions and loans) per year. The goal is to produce a result set that shows the total number of actions in each year (order by year). I attempted to write a query but encountered an error related to the GROUP BY clause.", "error_sql": ["WITH one AS ( SELECT date_trunc('year', date) as timeOne, COUNT(*) as trans_count FROM trans ORDER BY timeOne ), two AS ( SELECT date_trunc('year', date) as timeTwo, COUNT(*) as loan_count FROM loan ORDER BY timeTwo ) SELECT timeOne as year, SUM(trans_count, loan_count) as count FROM one, two ORDER BY 1;"], "sol_sql": ["WITH years AS ( SELECT date_trunc('year', date) as year, COUNT(*) as count FROM trans GROUP BY 1 UNION ALL SELECT date_trunc('year', date) as year, COUNT(*) as count FROM loan GROUP BY 1 ) SELECT year, SUM(count) as count FROM years GROUP BY year ORDER BY year;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nWe have two tables in our financial database: `trans` and `loan`. The `trans` table records all transactions made by clients, while the `loan` table records all loans issued to clients. Each transaction and loan has a timestamp indicating when it occurred. We want to combine these two tables into a single dataset, without worrying about clashing IDs, and then count the number of actions (transactions and loans) per year. The goal is to produce a result set that shows the total number of actions in each year (order by year). I attempted to write a query but encountered an error related to the GROUP BY clause.\n# Error SQL:\nWITH one AS ( SELECT date_trunc('year', date) as timeOne, COUNT(*) as trans_count FROM trans ORDER BY timeOne ), two AS ( SELECT date_trunc('year', date) as timeTwo, COUNT(*) as loan_count FROM loan ORDER BY timeTwo ) SELECT timeOne as year, SUM(trans_count, loan_count) as count FROM one, two ORDER BY 1;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/75742807/sql-getting-the-first-item-of-a-joined-table", "instance_id": "440_1", "selected_database": "financial", "query": "We want to display a list of districts along with the first/random client associated with each district. The initial approach might involve using MIN(client_id) and MIN(birth_date) to select the first client, but this could lead to inconsistencies as MIN(client_id) and MIN(birth_date) might refer to different clients. We need a more reliable method to fetch just one client per district.", "error_sql": ["SELECT district.district_id, district.a2, MIN(client.client_id) AS client_id, MIN(client.birth_date) AS birth_date FROM district LEFT OUTER JOIN client ON (client.district_id = district.district_id) GROUP BY district.district_id;"], "sol_sql": ["SELECT distinct on (d.district_id) d.district_id, d.a2, c.client_id AS client_id, c.birth_date AS birth_date FROM district d LEFT OUTER JOIN client c ON c.district_id = d.district_id ORDER BY d.district_id, c.client_id;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_query_result, _, _ = execute_queries(pred_sqls, 'financial', conn)\n    expected_row_count = 77\n    actual_row_count = len(pred_query_result)\n    assert actual_row_count == expected_row_count, (f'Expected {expected_row_count} rows, but found {actual_row_count} rows.')\n\n    for row in pred_query_result:\n        district_id, a2, client_id, birth_date = row\n        district_query = [f\"SELECT a2 FROM district WHERE district_id = {district_id};\"]\n        district_result, _, _ = execute_queries(district_query, 'financial', conn)\n        assert district_result, (f\"No matching district found for district_id = {district_id}.\")\n        expected_a2 = district_result[0][0]\n        assert a2 == expected_a2, (f\"For district_id {district_id}, expected a2 = {expected_a2}, but found a2 = {a2}.\")\n        \n        client_query = [f\"SELECT birth_date FROM client WHERE client_id = {client_id};\"]\n        client_result, _, _ = execute_queries(client_query, 'financial', conn)\n        assert client_result, (f\"No matching client found for client_id = {client_id} in district_id = {district_id}.\")\n        expected_birth_date = client_result[0][0]\n        assert birth_date == expected_birth_date, (f\"For client_id {client_id}, expected birth_date = {expected_birth_date}, \" f\"but found birth_date = {birth_date}.\")\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nWe want to display a list of districts along with the first/random client associated with each district. The initial approach might involve using MIN(client_id) and MIN(birth_date) to select the first client, but this could lead to inconsistencies as MIN(client_id) and MIN(birth_date) might refer to different clients. We need a more reliable method to fetch just one client per district.\n# Error SQL:\nSELECT district.district_id, district.a2, MIN(client.client_id) AS client_id, MIN(client.birth_date) AS birth_date FROM district LEFT OUTER JOIN client ON (client.district_id = district.district_id) GROUP BY district.district_id;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/77752084/postgresql-raffle-draw-query", "instance_id": "389_1", "selected_database": "debit_card_specializing", "query": "In the context of the debit_card_specializing database, we need to draw the first place to fifth place winners from a pool of customers based on their transaction amounts. A customer can't win multiple places. If a customer hasn't placed, then all of their transaction amounts must be considered in the draw. The goal is to draw all five place winners efficiently without repeating the query multiple times. The transactions_1k table contains the necessary data with columns such as CustomerID and Amount. The user initially attempted to draw one winner but couldn't extend the logic to draw all five winners without eliminating previous winners in each subsequent draw.", "error_sql": ["WITH gen_transactions AS (SELECT CustomerID, Amount FROM transactions_1k CROSS JOIN LATERAL generate_series(1, CAST(Amount AS INTEGER))), shuffle AS (SELECT CustomerID, Amount, row_number() OVER (ORDER BY random()) AS rn FROM gen_transactions) SELECT * FROM shuffle ORDER BY RANDOM() LIMIT 1;"], "sol_sql": ["WITH gen_transactions AS (SELECT CustomerID, Amount FROM transactions_1k CROSS JOIN LATERAL generate_series(1, CAST(Amount AS INTEGER))), shuffle AS (SELECT CustomerID, Amount, row_number() OVER (ORDER BY random()) AS rn FROM gen_transactions) SELECT CustomerID, Amount FROM shuffle WHERE rn <= 5 ORDER BY rn;"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert len(pred_query_result) == 5, f'Expected 5 rows, but found {len(pred_query_result)} rows'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert len(set(row[0] for row in pred_query_result)) == 5, 'All CustomerIDs should be unique'\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: debit_card_specializing********************\nCREATE TABLE \"customers\" (\ncustomerid bigint NOT NULL,\nsegment text NULL,\ncurrency text NULL,\n    PRIMARY KEY (customerid)\n);\n\nExample data:\n customerid segment currency\n          3     SME      EUR\n          5     LAM      EUR\n          6     SME      EUR\n==================================================\n\n\nCREATE TABLE \"gasstations\" (\ngasstationid bigint NOT NULL,\nchainid bigint NULL,\ncountry text NULL,\nsegment text NULL,\n    PRIMARY KEY (gasstationid)\n);\n\nExample data:\n gasstationid  chainid country         segment\n           44       13     CZE Value for money\n           45        6     CZE         Premium\n           46       23     CZE           Other\n==================================================\n\n\nCREATE TABLE \"products\" (\nproductid bigint NOT NULL,\ndescription text NULL,\n    PRIMARY KEY (productid)\n);\n\nExample data:\n productid  description\n         1 Rucní zadání\n         2        Nafta\n         3      Special\n==================================================\n\n\nCREATE TABLE \"yearmonth\" (\ncustomerid bigint NULL,\ndate text NULL,\nconsumption real NULL\n);\n\nExample data:\n customerid   date  consumption\n          5 201207       528.30\n          5 201302      1598.28\n          5 201303      1931.36\n==================================================\n\n\nCREATE TABLE \"transactions_1k\" (\ntransactionid bigint NOT NULL DEFAULT nextval('transactions_1k_transactionid_seq'::regclass),\ndate date NULL,\ntime text NULL,\ncustomerid bigint NULL,\ncardid bigint NULL,\ngasstationid bigint NULL,\nproductid bigint NULL,\namount bigint NULL,\nprice real NULL,\n    PRIMARY KEY (transactionid)\n);\n\nExample data:\n transactionid       date     time  customerid  cardid  gasstationid  productid  amount  price\n             1 2012-08-24 09:41:00       31543  486621          3704          2      28 672.64\n             2 2012-08-24 10:03:00       46707  550134          3704          2      18 430.72\n             3 2012-08-24 10:03:00       46707  550134          3704         23       1 121.99\n==================================================\n\n********************Database: debit_card_specializing********************\n\n# User Query:\nIn the context of the debit_card_specializing database, we need to draw the first place to fifth place winners from a pool of customers based on their transaction amounts. A customer can't win multiple places. If a customer hasn't placed, then all of their transaction amounts must be considered in the draw. The goal is to draw all five place winners efficiently without repeating the query multiple times. The transactions_1k table contains the necessary data with columns such as CustomerID and Amount. The user initially attempted to draw one winner but couldn't extend the logic to draw all five winners without eliminating previous winners in each subsequent draw.\n# Error SQL:\nWITH gen_transactions AS (SELECT CustomerID, Amount FROM transactions_1k CROSS JOIN LATERAL generate_series(1, CAST(Amount AS INTEGER))), shuffle AS (SELECT CustomerID, Amount, row_number() OVER (ORDER BY random()) AS rn FROM gen_transactions) SELECT * FROM shuffle ORDER BY RANDOM() LIMIT 1;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/76714227/how-to-merge-two-or-multiple-rows-of-jsonb-array-into-one-in-sql", "instance_id": "391_2", "selected_database": "card_games", "query": "The data in the table test includes one column named \" observation\". I am using postgres and I have multiple entries of jsonb inside an array in a single column called observation. They're input as '[{\"a\": 1}, {\"b\": 2}, {\"c\": 0.5}]'::jsonb. There are multiple rows, with multiple json elements inside of each one of them. I would like to combine them into one big entry in one row, so that I will just have one observation of one column as a result.", "error_sql": ["INSERT INTO test(observation) SELECT jsonb_agg(observation) FROM (SELECT observation FROM test) AS subquery; SELECT * FROM test;"], "sol_sql": ["\nINSERT INTO test(observation)\nSELECT jsonb_agg(s.elements)\nFROM (\n  SELECT jsonb_array_elements(observation) FROM test\n) AS s(elements);\n\nSELECT * FROM test;\n"], "preprocess_sql": ["\nCREATE TABLE test (observation JSONB); \nINSERT INTO test (observation) VALUES \n('[{\"a\": 1}, {\"b\": 2}, {\"c\": 0.5}]'::jsonb), \n('[{\"d\": 2.2}, {\"e\": 2.4}, {\"f\": 3.5}]'::jsonb), \n('[{\"g\": 1.7}, {\"h\": 5.4}, {\"i\": 8.9}]'::jsonb);\nSELECT * FROM test;\n"], "clean_up_sql": ["DROP TABLE test;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    concatenated_json = pred_query_result[3][0]\n    assert isinstance(concatenated_json, list), f'Expected result to be a list, but found {type(concatenated_json)}'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    concatenated_json = pred_query_result[3][0]\n    expected_json_length = 9 \n    assert len(concatenated_json) == expected_json_length, f'Expected {expected_json_length} elements, but found {len(concatenated_json)} elements'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    concatenated_json = pred_query_result[3][0]\n    expected_values = [\n        {\"a\": 1}, {\"b\": 2}, {\"c\": 0.5},\n        {\"d\": 2.2}, {\"e\": 2.4}, {\"f\": 3.5},\n        {\"g\": 1.7}, {\"h\": 5.4}, {\"i\": 8.9}\n    ]\n    assert concatenated_json == expected_values, f'Expected {expected_values} but found {concatenated_json}'\n    "], "external_data": "{\"a\": 1}, {\"b\": 2}, {\"c\": 0.5},{\"d\": 2.2}, {\"e\": 2.4}, {\"f\": 3.5},{\"g\": 1.7}, {\"h\": 5.4}, {\"i\": 8.9}", "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nThe data in the table test includes one column named \" observation\". I am using postgres and I have multiple entries of jsonb inside an array in a single column called observation. They're input as '[{\"a\": 1}, {\"b\": 2}, {\"c\": 0.5}]'::jsonb. There are multiple rows, with multiple json elements inside of each one of them. I would like to combine them into one big entry in one row, so that I will just have one observation of one column as a result.\n# Error SQL:\nINSERT INTO test(observation) SELECT jsonb_agg(observation) FROM (SELECT observation FROM test) AS subquery; SELECT * FROM test;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/71209192/sql-selecting-first-record-per-group", "instance_id": "403_1", "selected_database": "financial", "query": "In the financial database, I have two tables: `trans` and `account`. The `trans` table contains transaction details including the `account_id`, `date`, `type`, `operation`, `amount`, `balance`, `k_symbol`, `bank`, and `account`. The `account` table contains account details including `account_id`, `district_id`, `frequency`, and `date`. For each transaction in the `trans` table that matches a specific `account_id` and `type`, I want to join the corresponding record in the `account` table with the minimum transaction date. I want to group the results by `k_symbol` and extract the `k_symbol`, `operation`, `amount`,  `balance`, and `frequency` from the selected transaction record.", "error_sql": ["SELECT t.k_symbol, t.operation, t.amount, t.balance, a.frequency FROM trans t INNER JOIN account a ON t.account_id = a.account_id WHERE t.account_id = 1 AND t.type = 'PRIJEM' GROUP BY t.k_symbol -- and t.date is the minimum for each group;"], "sol_sql": ["\nSELECT t.k_symbol, t.operation, t.amount, t.balance, a.frequency\nFROM (\n    SELECT DISTINCT ON (t.k_symbol) \n           t.k_symbol, t.operation, t.amount, t.balance, t.account_id, t.date\n    FROM trans t\n    WHERE t.account_id = 1\n    AND t.type = 'PRIJEM'\n    ORDER BY t.k_symbol, t.date\n) t\nINNER JOIN account a ON t.account_id = a.account_id LIMIT 100\n"], "preprocess_sql": [""], "clean_up_sql": [""], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    \n    assert len(pred_query_result) == 2, f'Expected 2 rows, but found {len(pred_query_result)} rows'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    row_with_UROK = [i for i, row in enumerate(pred_query_result) if row[0] == 'UROK']\n    row_n = row_with_UROK[0]\n    assert pred_query_result[row_n][1] is None, f'Expected operation to be NULL, but found {pred_query_result[row_n][1]}'\n    assert pred_query_result[row_n][2] == 19, f'Expected amount to be 19, but found {pred_query_result[row_n][2]}'\n    assert pred_query_result[row_n][3] == 17298, f'Expected balance to be 17298, but found {pred_query_result[row_n][3]}'\n    assert pred_query_result[row_n][4] == 'POPLATEK MESICNE', f'Expected frequency to POPLATEK MESICNE, but found {pred_query_result[row_n][4]}'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    row_with_NULL = [i for i, row in enumerate(pred_query_result) if row[0] is None]\n    row_n = row_with_NULL[0]\n    assert pred_query_result[row_n][1] == 'VKLAD', f'Expected operation to be VKLAD, but found {pred_query_result[row_n][1]}'\n    assert pred_query_result[row_n][2] == 1000, f'Expected amount to be 1000, but found {pred_query_result[row_n][2]}'\n    assert pred_query_result[row_n][3] == 1000, f'Expected balance to be 1000, but found {pred_query_result[row_n][3]}'\n    assert pred_query_result[row_n][4] == 'POPLATEK MESICNE', f'Expected frequency to POPLATEK MESICNE, but found {pred_query_result[row_n][4]}'\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, I have two tables: `trans` and `account`. The `trans` table contains transaction details including the `account_id`, `date`, `type`, `operation`, `amount`, `balance`, `k_symbol`, `bank`, and `account`. The `account` table contains account details including `account_id`, `district_id`, `frequency`, and `date`. For each transaction in the `trans` table that matches a specific `account_id` and `type`, I want to join the corresponding record in the `account` table with the minimum transaction date. I want to group the results by `k_symbol` and extract the `k_symbol`, `operation`, `amount`,  `balance`, and `frequency` from the selected transaction record.\n# Error SQL:\nSELECT t.k_symbol, t.operation, t.amount, t.balance, a.frequency FROM trans t INNER JOIN account a ON t.account_id = a.account_id WHERE t.account_id = 1 AND t.type = 'PRIJEM' GROUP BY t.k_symbol -- and t.date is the minimum for each group;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74852072/count-of-sequential-occurrences-and-their-lengths-advanced-gaps-and-islands-pro", "instance_id": "396_2", "selected_database": "card_games", "query": "I am trying to analyze the purchasing behavior of users in our card_games database to find out the count of sequential monthly purchases and their lengths for each user. Below is a simplified structure of my table and my expected end result. I want to identify the longest streaks of consecutive monthly purchases for each user and then count how many users have each longest streak length. For example, if a user made purchases in March, April, May, and June, that would be a streak of 4 months. If another user made purchases in January, February, and March, that would be a streak of 3 months. I need to find the longest streak for each user and then count how many users have the longest streak of a certain length. The expected result should show the streak length and the number of users who have that longest streak length.", "error_sql": ["SELECT user_id, COUNT(*) AS num_consecutive_months FROM (SELECT user_id, action_date, DATE_TRUNC('month', TO_DATE(action_date || '-01', 'YYYY-MM-DD')) AS month_date, ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY DATE_TRUNC('month', TO_DATE(action_date || '-01', 'YYYY-MM-DD'))) - ROW_NUMBER() OVER(PARTITION BY user_id, DATE_TRUNC('month', TO_DATE(action_date || '-01', 'YYYY-MM-DD')) - INTERVAL '1 month' * ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY DATE_TRUNC('month', TO_DATE(action_date || '-01', 'YYYY-MM-DD')))) AS grp FROM user_actions) sub GROUP BY user_id, grp ORDER BY COUNT(*) DESC LIMIT 1;"], "sol_sql": ["\nWITH cte AS (\n    SELECT user_id, \n           TO_DATE(action_date || '-01','YYYY-MM-DD') AS date_as_date\n    FROM user_actions\n), islands AS ( \n    SELECT *, \n           CASE WHEN LAG(date_as_date) OVER(PARTITION BY user_id ORDER BY date_as_date) + INTERVAL '1 month' <> date_as_date\n                THEN 1 ELSE 0 \n           END AS new_partition\n    FROM cte\n), partitioned_islands AS (\n    SELECT user_id, \n           SUM(new_partition) OVER(PARTITION BY user_id ORDER BY date_as_date) AS partitions\n    FROM islands\n), count_per_island AS (\n    SELECT COUNT(*) AS num_consecutive_dates\n    FROM partitioned_islands\n    GROUP BY user_id, partitions\n    ORDER BY ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY COUNT(*) DESC)\n    FETCH FIRST 1 ROWS WITH TIES\n)\nSELECT num_consecutive_dates AS streakLength, \n       COUNT(*) AS numOfOccurrences  \nFROM count_per_island\nGROUP BY streakLength\nORDER BY streakLength DESC\n"], "preprocess_sql": ["CREATE TABLE user_actions ( action_date VARCHAR(255), user_id VARCHAR(255) ); INSERT INTO user_actions(action_date, user_id) VALUES('2020-03', 'alex01'), ('2020-04', 'alex01'), ('2020-05', 'alex01'), ('2020-06', 'alex01'), ('2020-12', 'alex01'), ('2021-01', 'alex01'), ('2021-02', 'alex01'), ('2021-03', 'alex01'), ('2020-04', 'jon03'), ('2020-05', 'jon03'), ('2020-06', 'jon03'), ('2020-09', 'jon03'), ('2021-11', 'jon03'), ('2021-12', 'jon03'), ('2022-01', 'jon03'), ('2022-02', 'jon03'), ('2020-05', 'mark05'), ('2020-06', 'mark05'), ('2020-07', 'mark05'), ('2020-08', 'mark05'), ('2020-09', 'mark05');"], "clean_up_sql": ["DROP TABLE user_actions;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert len(pred_query_result) == 2, f'Expected 2 rows, but found {len(pred_query_result)} rows'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert pred_query_result[0][0] == 5, f'Expected longest streak length to be 5, but found {pred_query_result[0][0]}'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert pred_query_result[0][1] == 1, f'Expected 1 user with longest streak of 5 months, but found {pred_query_result[0][1]}'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert pred_query_result[1][0] == 4, f'Expected longest streak length to be 4, but found {pred_query_result[1][0]}'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert pred_query_result[1][1] == 2, f'Expected 2 users with longest streak of 4 months, but found {pred_query_result[1][1]}'\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nI am trying to analyze the purchasing behavior of users in our card_games database to find out the count of sequential monthly purchases and their lengths for each user. Below is a simplified structure of my table and my expected end result. I want to identify the longest streaks of consecutive monthly purchases for each user and then count how many users have each longest streak length. For example, if a user made purchases in March, April, May, and June, that would be a streak of 4 months. If another user made purchases in January, February, and March, that would be a streak of 3 months. I need to find the longest streak for each user and then count how many users have the longest streak of a certain length. The expected result should show the streak length and the number of users who have that longest streak length.\n# Error SQL:\nSELECT user_id, COUNT(*) AS num_consecutive_months FROM (SELECT user_id, action_date, DATE_TRUNC('month', TO_DATE(action_date || '-01', 'YYYY-MM-DD')) AS month_date, ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY DATE_TRUNC('month', TO_DATE(action_date || '-01', 'YYYY-MM-DD'))) - ROW_NUMBER() OVER(PARTITION BY user_id, DATE_TRUNC('month', TO_DATE(action_date || '-01', 'YYYY-MM-DD')) - INTERVAL '1 month' * ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY DATE_TRUNC('month', TO_DATE(action_date || '-01', 'YYYY-MM-DD')))) AS grp FROM user_actions) sub GROUP BY user_id, grp ORDER BY COUNT(*) DESC LIMIT 1;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/73826720/query-to-remove-everything-between-1st-and-2nd-hypen-for-string-in-column", "instance_id": "398_1", "selected_database": "financial", "query": "I have a table named \"test\" with columns \"ku\", \"item\" and \"l1m_visits\". I am trying to retrieve records based on a custom field \"ci_ku\". For the same values of \"ci_ku\" we will be having multiple \"l1m_visits\", and I want to retrieve the minimum value of \"l1mvisits\" for each \"ci_ku\". and i want to get the ci_ku by removing the string between 1st and 2nd underscore(-) in ku, how to write a query to get the ci_ku here.", "error_sql": ["\nWITH tab_with_ci_ku AS (\n   select split(ku, '-', 3)ivm_arr,\n\n           l1m_visits,\n           last_refresh_date\n    FROM db.scema.table\n), ranked_visits AS (\n    SELECT *, ROW_NUMBER() OVER(PARTITION BY CONCAT(ivm_arr[2],item) as ci_sku ORDER BY l1m_visits) AS rn\n    FROM tab_with_ci_ku\n)\nSELECT sku,ci_ku\nFROM ranked_visits\nWHERE rn = 1\n"], "sol_sql": ["\nWITH tab_with_ci_ku AS (\n    SELECT *, \n           REGEXP_REPLACE(ku, '([^-]+)-[^-]+-(.*)', '\\1-\\2') AS ci_ku\n    FROM test\n),\nranked_visits AS (\n    SELECT *, \n           ROW_NUMBER() OVER (PARTITION BY ci_ku ORDER BY l1m_visits) AS rn\n    FROM tab_with_ci_ku\n)\nSELECT ku, ci_ku, l1m_visits\nFROM ranked_visits\nWHERE rn = 1\n"], "preprocess_sql": ["\nCREATE TABLE test (\n    ku VARCHAR(50),\n    item VARCHAR(10),\n    l1m_visits CHAR(1)\n);\n\nINSERT INTO test (ku, item, l1m_visits) VALUES\n('1234-5678-HIJK', '1234', 'A'),\n('1234-9012-HIJK', '1234', 'B'),\n('56457-12456-DF-GH-TC', '56457', 'D');\n"], "clean_up_sql": ["DROP TABLE test;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert len(pred_query_result) == 2, f'Expected 2 rows, but found {len(pred_query_result)} rows'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert pred_query_result[0][1] == '1234-HIJK', f'Expected ci_ku to be 1234-HIJK, but found {pred_query_result[0][1]}'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert pred_query_result[0][2] == 'A', f'Expected l1m_visits to be A, but found {pred_query_result[0][2]}'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert pred_query_result[1][1] == '56457-DF-GH-TC', f'Expected ci_ku to be 56457-DF-GH-TC, but found {pred_query_result[1][1]}'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert pred_query_result[1][2] == 'D', f'Expected l1m_visits to be D, but found {pred_query_result[1][2]}'\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nI have a table named \"test\" with columns \"ku\", \"item\" and \"l1m_visits\". I am trying to retrieve records based on a custom field \"ci_ku\". For the same values of \"ci_ku\" we will be having multiple \"l1m_visits\", and I want to retrieve the minimum value of \"l1mvisits\" for each \"ci_ku\". and i want to get the ci_ku by removing the string between 1st and 2nd underscore(-) in ku, how to write a query to get the ci_ku here.\n# Error SQL:\n\nWITH tab_with_ci_ku AS (\n   select split(ku, '-', 3)ivm_arr,\n\n           l1m_visits,\n           last_refresh_date\n    FROM db.scema.table\n), ranked_visits AS (\n    SELECT *, ROW_NUMBER() OVER(PARTITION BY CONCAT(ivm_arr[2],item) as ci_sku ORDER BY l1m_visits) AS rn\n    FROM tab_with_ci_ku\n)\nSELECT sku,ci_ku\nFROM ranked_visits\nWHERE rn = 1\n\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/73773017/sql-group-by-get-value-on-one-column-based-on-order-of-another-column", "instance_id": "266_2", "selected_database": "european_football_2", "query": "Suppose we have the following table in the 'european_football_2' database that records the overall rating of players over time:\\n|player_api_id|date|overall_rating|\\n|-------------|----|--------------|\\n|505942       |2016-02-18|67          |\\n|505942       |2015-11-19|67          |\\n|505942       |2015-09-21|62          |\\n|155782       |2016-03-15|75          |\\n|155782       |2015-12-10|74          |\\n|162549       |2016-01-20|70          |\\n|162549       |2015-10-25|68          |\\nFor each player, we want the latest overall rating based on the date. The final table would be:\\n|player_api_id|date|overall_rating|\\n|-------------|----|--------------|\\n|505942       |2016-02-18|67          |\\n|155782       |2016-03-15|75          |\\n|162549       |2016-01-20|70          |\\nI attempted to group by player_api_id while ordering by date and then getting the first value:\\nsql \\\\nSELECT player_api_id, MAX(date), FIRST(overall_rating) \\\\nFROM Player_Attributes \\\\nGROUP BY player_api_id \\\\nORDER BY date desc \\\\n\\nBut this doesn't work.", "error_sql": ["SELECT player_api_id, MAX(date), FIRST(overall_rating) FROM Player_Attributes GROUP BY player_api_id ORDER BY date desc;"], "sol_sql": ["SELECT player_api_id, date, overall_rating FROM Player_Attributes ORDER BY ROW_NUMBER() OVER(PARTITION BY player_api_id ORDER BY date DESC) FETCH FIRST 1 ROWS WITH TIES;"], "preprocess_sql": [""], "clean_up_sql": [""], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result\n"], "status": "success", "error_message": null, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: european_football_2********************\nCREATE TABLE \"team_attributes\" (\nid bigint NOT NULL DEFAULT nextval('team_attributes_id_seq'::regclass),\nteam_fifa_api_id bigint NULL,\nteam_api_id bigint NULL,\ndate text NULL,\nbuildupplayspeed bigint NULL,\nbuildupplayspeedclass text NULL,\nbuildupplaydribbling bigint NULL,\nbuildupplaydribblingclass text NULL,\nbuildupplaypassing bigint NULL,\nbuildupplaypassingclass text NULL,\nbuildupplaypositioningclass text NULL,\nchancecreationpassing bigint NULL,\nchancecreationpassingclass text NULL,\nchancecreationcrossing bigint NULL,\nchancecreationcrossingclass text NULL,\nchancecreationshooting bigint NULL,\nchancecreationshootingclass text NULL,\nchancecreationpositioningclass text NULL,\ndefencepressure bigint NULL,\ndefencepressureclass text NULL,\ndefenceaggression bigint NULL,\ndefenceaggressionclass text NULL,\ndefenceteamwidth bigint NULL,\ndefenceteamwidthclass text NULL,\ndefencedefenderlineclass text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_fifa_api_id  team_api_id                date  buildupplayspeed buildupplayspeedclass  buildupplaydribbling buildupplaydribblingclass  buildupplaypassing buildupplaypassingclass buildupplaypositioningclass  chancecreationpassing chancecreationpassingclass  chancecreationcrossing chancecreationcrossingclass  chancecreationshooting chancecreationshootingclass chancecreationpositioningclass  defencepressure defencepressureclass  defenceaggression defenceaggressionclass  defenceteamwidth defenceteamwidthclass defencedefenderlineclass\n  1               434         9930 2010-02-22 00:00:00                60              Balanced                   NaN                    Little                  50                   Mixed                   Organised                     60                     Normal                      65                      Normal                      55                      Normal                      Organised               50               Medium                 55                  Press                45                Normal                    Cover\n  2               434         9930 2014-09-19 00:00:00                52              Balanced                  48.0                    Normal                  56                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n  3               434         9930 2015-09-10 00:00:00                47              Balanced                  41.0                    Normal                  54                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n==================================================\n\n\nCREATE TABLE \"player\" (\nid bigint NOT NULL DEFAULT nextval('player_id_seq'::regclass),\nplayer_api_id bigint NULL,\nplayer_name text NULL,\nplayer_fifa_api_id bigint NULL,\nbirthday text NULL,\nheight bigint NULL,\nweight bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_api_id        player_name  player_fifa_api_id            birthday  height  weight\n  1         505942 Aaron Appindangoye              218353 1992-02-29 00:00:00     182     187\n  2         155782    Aaron Cresswell              189615 1989-12-15 00:00:00     170     146\n  3         162549        Aaron Doran              186170 1991-05-13 00:00:00     170     163\n==================================================\n\n\nCREATE TABLE \"match\" (\nid bigint NOT NULL DEFAULT nextval('match_id_seq'::regclass),\ncountry_id bigint NULL,\nleague_id bigint NULL,\nseason text NULL,\nstage bigint NULL,\ndate text NULL,\nmatch_api_id bigint NULL,\nhome_team_api_id bigint NULL,\naway_team_api_id bigint NULL,\nhome_team_goal bigint NULL,\naway_team_goal bigint NULL,\ngoal text NULL,\nshoton text NULL,\nshotoff text NULL,\nfoulcommit text NULL,\ncard text NULL,\ncross text NULL,\ncorner text NULL,\npossession text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  country_id  league_id    season  stage                date  match_api_id  home_team_api_id  away_team_api_id  home_team_goal  away_team_goal\n  1           1          1 2008/2009      1 2008-08-17 00:00:00        492473              9987              9993               1               1\n  2           1          1 2008/2009      1 2008-08-16 00:00:00        492474             10000              9994               0               0\n  3           1          1 2008/2009      1 2008-08-16 00:00:00        492475              9984              8635               0               3\n==================================================\n\n\nCREATE TABLE \"league\" (\nid bigint NOT NULL DEFAULT nextval('league_id_seq'::regclass),\ncountry_id bigint NULL,\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id  country_id                   name\n   1           1 Belgium Jupiler League\n1729        1729 England Premier League\n4769        4769         France Ligue 1\n==================================================\n\n\nCREATE TABLE \"country\" (\nid bigint NOT NULL DEFAULT nextval('country_id_seq'::regclass),\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id    name\n   1 Belgium\n1729 England\n4769  France\n==================================================\n\n\nCREATE TABLE \"player_attributes\" (\nid bigint NOT NULL DEFAULT nextval('player_attributes_id_seq'::regclass),\nplayer_fifa_api_id bigint NULL,\nplayer_api_id bigint NULL,\ndate text NULL,\noverall_rating bigint NULL,\npotential bigint NULL,\npreferred_foot text NULL,\nattacking_work_rate text NULL,\ndefensive_work_rate text NULL,\ncrossing bigint NULL,\nfinishing bigint NULL,\nheading_accuracy bigint NULL,\nshort_passing bigint NULL,\nvolleys bigint NULL,\ndribbling bigint NULL,\ncurve bigint NULL,\nfree_kick_accuracy bigint NULL,\nlong_passing bigint NULL,\nball_control bigint NULL,\nacceleration bigint NULL,\nsprint_speed bigint NULL,\nagility bigint NULL,\nreactions bigint NULL,\nbalance bigint NULL,\nshot_power bigint NULL,\njumping bigint NULL,\nstamina bigint NULL,\nstrength bigint NULL,\nlong_shots bigint NULL,\naggression bigint NULL,\ninterceptions bigint NULL,\npositioning bigint NULL,\nvision bigint NULL,\npenalties bigint NULL,\nmarking bigint NULL,\nstanding_tackle bigint NULL,\nsliding_tackle bigint NULL,\ngk_diving bigint NULL,\ngk_handling bigint NULL,\ngk_kicking bigint NULL,\ngk_positioning bigint NULL,\ngk_reflexes bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_fifa_api_id  player_api_id                date  overall_rating  potential preferred_foot attacking_work_rate defensive_work_rate  crossing  finishing  heading_accuracy  short_passing  volleys  dribbling  curve  free_kick_accuracy  long_passing  ball_control  acceleration  sprint_speed  agility  reactions  balance  shot_power  jumping  stamina  strength  long_shots  aggression  interceptions  positioning  vision  penalties  marking  standing_tackle  sliding_tackle  gk_diving  gk_handling  gk_kicking  gk_positioning  gk_reflexes\n  1              218353         505942 2016-02-18 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  2              218353         505942 2015-11-19 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  3              218353         505942 2015-09-21 00:00:00              62         66          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          63             41           45      54         48       65               66              69          6           11          10               8            8\n==================================================\n\n\nCREATE TABLE \"team\" (\nid bigint NOT NULL DEFAULT nextval('team_id_seq'::regclass),\nteam_api_id bigint NULL,\nteam_fifa_api_id bigint NULL,\nteam_long_name text NULL,\nteam_short_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_api_id  team_fifa_api_id   team_long_name team_short_name\n  1         9987               673         KRC Genk             GEN\n  2         9993               675     Beerschot AC             BAC\n  3        10000             15005 SV Zulte-Waregem             ZUL\n==================================================\n\n********************Database: european_football_2********************\n\n# User Query:\nSuppose we have the following table in the 'european_football_2' database that records the overall rating of players over time:\\n|player_api_id|date|overall_rating|\\n|-------------|----|--------------|\\n|505942       |2016-02-18|67          |\\n|505942       |2015-11-19|67          |\\n|505942       |2015-09-21|62          |\\n|155782       |2016-03-15|75          |\\n|155782       |2015-12-10|74          |\\n|162549       |2016-01-20|70          |\\n|162549       |2015-10-25|68          |\\nFor each player, we want the latest overall rating based on the date. The final table would be:\\n|player_api_id|date|overall_rating|\\n|-------------|----|--------------|\\n|505942       |2016-02-18|67          |\\n|155782       |2016-03-15|75          |\\n|162549       |2016-01-20|70          |\\nI attempted to group by player_api_id while ordering by date and then getting the first value:\\nsql \\\\nSELECT player_api_id, MAX(date), FIRST(overall_rating) \\\\nFROM Player_Attributes \\\\nGROUP BY player_api_id \\\\nORDER BY date desc \\\\n\\nBut this doesn't work.\n# Error SQL:\nSELECT player_api_id, MAX(date), FIRST(overall_rating) FROM Player_Attributes GROUP BY player_api_id ORDER BY date desc;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74954624/ignore-exceptions-in-select-query", "instance_id": "251_2", "selected_database": "codebase_community", "query": "I am using a tool that allows querying user data in our local database using the PostgreSQL interface. I am running a simple query to print all ages of the users on our platform. However, I am getting an error message that says 'ERROR:  invalid input syntax for type numeric: \"text\"'. I am not sure why I am getting this error. Can you help me understand why this error is occurring and how I can fix it?", "error_sql": ["SELECT Age::numeric FROM users;"], "sol_sql": ["CREATE OR REPLACE FUNCTION get_user_ages() RETURNS setof numeric AS $BODY$ DECLARE curr_age  text; BEGIN FOR curr_age IN SELECT Age FROM users LOOP BEGIN RETURN NEXT curr_age::numeric; EXCEPTION WHEN OTHERS THEN NULL; END; END LOOP; END $BODY$  LANGUAGE plpgsql; SELECT * FROM get_user_ages();"], "preprocess_sql": ["ALTER TABLE users ALTER COLUMN Age SET DATA TYPE text; INSERT INTO users VALUES (1212121,3150,'2010-07-19 19:09:39','JMS','2014-09-13 04:03:25',NULL,NULL,NULL,257,138,7,134002,'Invalid Age',NULL);"], "clean_up_sql": ["DELETE FROM users WHERE id = 1212121; ALTER TABLE users ALTER COLUMN age SET DATA TYPE integer USING age::integer;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    res, _, _ = execute_queries([\"SELECT count(*) FROM users;\"], db_name, conn)\n    ori_count = res[0][0]\n    res, _, _ = execute_queries([\"SELECT count(*) FROM get_user_ages();\"], db_name, conn)\n    next_count = res[0][0]\n    assert next_count ==  (ori_count-1), f'Expected 40325 row in get_user_ages table, got {next_count}'\n    res,_, _ = execute_queries([\"SELECT count(get_user_ages) FROM get_user_ages() where get_user_ages = 31 GROUP BY get_user_ages order by get_user_ages;\"], db_name,conn)\n    init_res = res[0][0]\n    res, _, _ = execute_queries([\"select count(age) from users where age = '31' group by age order by age ;\"], db_name,conn)\n    other_res = res[0][0]\n    assert init_res == other_res, f'Expected same result, got {init_res} and {other_res}'\n    \n"], "status": "success", "error_message": null, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: codebase_community********************\nCREATE TABLE \"postlinks\" (\nid bigint NOT NULL,\ncreationdate timestamp with time zone NULL,\npostid bigint NULL,\nrelatedpostid bigint NULL,\nlinktypeid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id              creationdate  postid  relatedpostid  linktypeid\n108 2010-07-21 14:47:33+08:00     395            173           1\n145 2010-07-23 16:30:41+08:00     548            539           1\n217 2010-07-26 20:12:15+08:00     375             30           1\n==================================================\n\n\nCREATE TABLE \"posthistory\" (\nid bigint NOT NULL,\nposthistorytypeid bigint NULL,\npostid bigint NULL,\nrevisionguid text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\ntext text NULL,\ncomment text NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  posthistorytypeid  postid                         revisionguid              creationdate  userid comment userdisplayname\n  1                  2       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  2                  1       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  3                  3       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n==================================================\n\n\nCREATE TABLE \"badges\" (\nid bigint NOT NULL,\nuserid bigint NULL,\nname text NULL,\ndate timestamp with time zone NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  userid    name                      date\n  1       5 Teacher 2010-07-19 19:39:07+08:00\n  2       6 Teacher 2010-07-19 19:39:07+08:00\n  3       8 Teacher 2010-07-19 19:39:07+08:00\n==================================================\n\n\nCREATE TABLE \"posts\" (\nid bigint NOT NULL,\nposttypeid bigint NULL,\nacceptedanswerid bigint NULL,\ncreaiondate timestamp with time zone NULL,\nscore bigint NULL,\nviewcount bigint NULL,\nbody text NULL,\nowneruserid bigint NULL,\nlasactivitydate timestamp with time zone NULL,\ntitle text NULL,\ntags text NULL,\nanswercount bigint NULL,\ncommentcount bigint NULL,\nfavoritecount bigint NULL,\nlasteditoruserid bigint NULL,\nlasteditdate timestamp with time zone NULL,\ncommunityowneddate timestamp with time zone NULL,\nparentid bigint NULL,\ncloseddate timestamp with time zone NULL,\nownerdisplayname text NULL,\nlasteditordisplayname text NULL,\n    PRIMARY KEY (id),\n    FOREIGN KEY (lasteditoruserid) REFERENCES users(id),\n    FOREIGN KEY (owneruserid) REFERENCES users(id)\n);\n\nExample data:\n id  posttypeid  acceptedanswerid               creaiondate  score  viewcount  owneruserid           lasactivitydate                                                             title                           tags  answercount  commentcount  favoritecount  lasteditoruserid              lasteditdate        communityowneddate parentid closeddate ownerdisplayname lasteditordisplayname\n  1           1                15 2010-07-19 19:12:12+08:00     23       1278            8 2010-09-15 21:08:26+08:00                                     Eliciting priors from experts <bayesian><prior><elicitation>            5             1             14               NaN                       NaT                       NaT     None       None             None                  None\n  2           1                59 2010-07-19 19:12:57+08:00     22       8198           24 2012-11-12 09:21:54+08:00                                                What is normality?     <distributions><normality>            7             1              8              88.0 2010-08-07 17:56:44+08:00                       NaT     None       None             None                  None\n  3           1                 5 2010-07-19 19:13:28+08:00     54       3613           18 2013-05-27 14:48:36+08:00 What are some valuable Statistical Analysis open source projects?        <software><open-source>           19             4             36             183.0 2011-02-12 05:50:03+08:00 2010-07-19 19:13:28+08:00     None       None             None                  None\n==================================================\n\n\nCREATE TABLE \"users\" (\nid bigint NOT NULL,\nreputation bigint NULL,\ncreationdate timestamp with time zone NULL,\ndisplayname text NULL,\nlastaccessdate timestamp with time zone NULL,\nwebsiteurl text NULL,\nlocation text NULL,\naboutme text NULL,\nviews bigint NULL,\nupvotes bigint NULL,\ndownvotes bigint NULL,\naccountid bigint NULL,\nage bigint NULL,\nprofileimageurl text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  reputation              creationdate  displayname            lastaccessdate                     websiteurl           location  views  upvotes  downvotes  accountid  age\n -1           1 2010-07-19 06:55:26+08:00    Community 2010-07-19 06:55:26+08:00 http://meta.stackexchange.com/ on the server farm      0     5007       1920         -1  NaN\n  2         101 2010-07-19 14:01:36+08:00 Geoff Dalgas 2013-11-12 22:07:23+08:00       http://stackoverflow.com      Corvallis, OR     25        3          0          2 37.0\n  3         101 2010-07-19 15:34:50+08:00 Jarrod Dixon 2014-08-08 06:42:58+08:00       http://stackoverflow.com       New York, NY     22       19          0          3 35.0\n==================================================\n\n\nCREATE TABLE \"tags\" (\nid bigint NOT NULL,\ntagname text NULL,\ncount bigint NULL,\nexcerptpostid bigint NULL,\nwikipostid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id     tagname  count  excerptpostid  wikipostid\n  1    bayesian   1342        20258.0     20257.0\n  2       prior    168        62158.0     62157.0\n  3 elicitation      6            NaN         NaN\n==================================================\n\n\nCREATE TABLE \"votes\" (\nid bigint NOT NULL,\npostid bigint NULL,\nvotetypeid bigint NULL,\ncreationdate date NULL,\nuserid bigint NULL,\nbountyamount bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  votetypeid creationdate userid bountyamount\n  1       3           2   2010-07-19   None         None\n  2       2           2   2010-07-19   None         None\n  3       5           2   2010-07-19   None         None\n==================================================\n\n\nCREATE TABLE \"comments\" (\nid bigint NOT NULL,\npostid bigint NULL,\nscore bigint NULL,\ntext text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  score              creationdate  userid userdisplayname\n  1       3      5 2010-07-19 19:15:52+08:00      13            None\n  2       5      0 2010-07-19 19:16:14+08:00      13            None\n  3       9      0 2010-07-19 19:18:54+08:00      13            None\n==================================================\n\n********************Database: codebase_community********************\n\n# User Query:\nI am using a tool that allows querying user data in our local database using the PostgreSQL interface. I am running a simple query to print all ages of the users on our platform. However, I am getting an error message that says 'ERROR:  invalid input syntax for type numeric: \"text\"'. I am not sure why I am getting this error. Can you help me understand why this error is occurring and how I can fix it?\n# Error SQL:\nSELECT Age::numeric FROM users;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/73772704/supabase-triggers-error-function-charindexunknown-text-does-not-exist-sql", "instance_id": "257_1", "selected_database": "codebase_community", "query": "In our local database, we have two tables `users` and `profiles`. When a new user is added to the `users` table, we want to automatically create a corresponding profile in the `profiles` table. The `profiles` table has three columns: `id`, `CreationDate`, and `WebsiteUrl`. The `WebsiteUrl` should be derived from the user's WebsiteUrl by taking the part before the '.com'  and after the 'http://'. For example, 'http://stackoverflow.com' should become 'stackoverflow'. To achieve this, I created a trigger on the `users` table with the following function: sql begin insert into profiles (Id, CreationDate, WebsiteUrl) select new.id, new.WebsiteUrl, left(replace(new.WebsiteUrl, '.', '-'), charindex('@', replace(new.WebsiteUrl, '.', '-')) - 1); return new; end;  However, when a new user is added, I encounter the error:  ERROR: function charindex(unknown, text) does not exist (SQLSTATE 42883)", "error_sql": ["begin insert into profiles (Id, CreationDate, WebsiteUrl) select new.Id, new.CreationDate, left(replace(new.WebsiteUrl, '.', '-'), charindex('@', replace(new.WebsiteUrl, '.', '-')) - 1); return new; end;"], "sol_sql": ["CREATE OR REPLACE FUNCTION profileTrigger() RETURNS TRIGGER AS $profile_table$ begin insert into profiles (id, CreationDate, WebsiteUrl) select new.Id, new.CreationDate, left(right(new.WebsiteUrl, char_length(new.WebsiteUrl) - 7), strpos(right(new.WebsiteUrl, char_length(new.WebsiteUrl) - 7), '.')-1);return new; end; $profile_table$ LANGUAGE plpgsql; CREATE TRIGGER profile_table AFTER INSERT ON users FOR EACH ROW EXECUTE PROCEDURE profileTrigger();"], "preprocess_sql": ["DROP TABLE IF EXISTS profiles; CREATE TABLE profiles (id varchar(256) NOT NULL, CreationDate text, WebsiteUrl text, PRIMARY KEY (id));"], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    check_sql = [\"INSERT INTO users VALUES (341111,185,'2010-07-19 19:11:11','Christopher D. Long','2014-09-13 00:02:35','http://angrystatistician.blogspot.com','Versailles, KY','<p>Consulting analyst for the San Diego Padres, Houston Rockets.</p><p>Twitter:</a></p><p>LinkedIn/p>',27,23,0,509455,NULL,'http://i.stack.imgur.com/km1pr.jpg')\"]\n    execute_queries(check_sql, db_name,conn)\n    res, _, _ = execute_queries([\"SELECT * FROM profiles LIMIT 1;\"], db_name,conn)\n    res_id, res_CreationDate, res_WebsiteUrl = res[0][0], res[0][1], res[0][2]\n    assert len(res) == 1, f\"Expected 1 row in profiles table, got {len(res)}\"\n    assert res_id == '341111', f\"Expected id to be '341111', got {res_id}\"\n    assert res_WebsiteUrl == 'angrystatistician', f\"Expected WebsiteUrl to be 'angrystatistician', got {res_WebsiteUrl}\"\n    \n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: codebase_community********************\nCREATE TABLE \"postlinks\" (\nid bigint NOT NULL,\ncreationdate timestamp with time zone NULL,\npostid bigint NULL,\nrelatedpostid bigint NULL,\nlinktypeid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id              creationdate  postid  relatedpostid  linktypeid\n108 2010-07-21 14:47:33+08:00     395            173           1\n145 2010-07-23 16:30:41+08:00     548            539           1\n217 2010-07-26 20:12:15+08:00     375             30           1\n==================================================\n\n\nCREATE TABLE \"posthistory\" (\nid bigint NOT NULL,\nposthistorytypeid bigint NULL,\npostid bigint NULL,\nrevisionguid text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\ntext text NULL,\ncomment text NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  posthistorytypeid  postid                         revisionguid              creationdate  userid comment userdisplayname\n  1                  2       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  2                  1       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  3                  3       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n==================================================\n\n\nCREATE TABLE \"badges\" (\nid bigint NOT NULL,\nuserid bigint NULL,\nname text NULL,\ndate timestamp with time zone NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  userid    name                      date\n  1       5 Teacher 2010-07-19 19:39:07+08:00\n  2       6 Teacher 2010-07-19 19:39:07+08:00\n  3       8 Teacher 2010-07-19 19:39:07+08:00\n==================================================\n\n\nCREATE TABLE \"posts\" (\nid bigint NOT NULL,\nposttypeid bigint NULL,\nacceptedanswerid bigint NULL,\ncreaiondate timestamp with time zone NULL,\nscore bigint NULL,\nviewcount bigint NULL,\nbody text NULL,\nowneruserid bigint NULL,\nlasactivitydate timestamp with time zone NULL,\ntitle text NULL,\ntags text NULL,\nanswercount bigint NULL,\ncommentcount bigint NULL,\nfavoritecount bigint NULL,\nlasteditoruserid bigint NULL,\nlasteditdate timestamp with time zone NULL,\ncommunityowneddate timestamp with time zone NULL,\nparentid bigint NULL,\ncloseddate timestamp with time zone NULL,\nownerdisplayname text NULL,\nlasteditordisplayname text NULL,\n    PRIMARY KEY (id),\n    FOREIGN KEY (lasteditoruserid) REFERENCES users(id),\n    FOREIGN KEY (owneruserid) REFERENCES users(id)\n);\n\nExample data:\n id  posttypeid  acceptedanswerid               creaiondate  score  viewcount  owneruserid           lasactivitydate                                                             title                           tags  answercount  commentcount  favoritecount  lasteditoruserid              lasteditdate        communityowneddate parentid closeddate ownerdisplayname lasteditordisplayname\n  1           1                15 2010-07-19 19:12:12+08:00     23       1278            8 2010-09-15 21:08:26+08:00                                     Eliciting priors from experts <bayesian><prior><elicitation>            5             1             14               NaN                       NaT                       NaT     None       None             None                  None\n  2           1                59 2010-07-19 19:12:57+08:00     22       8198           24 2012-11-12 09:21:54+08:00                                                What is normality?     <distributions><normality>            7             1              8              88.0 2010-08-07 17:56:44+08:00                       NaT     None       None             None                  None\n  3           1                 5 2010-07-19 19:13:28+08:00     54       3613           18 2013-05-27 14:48:36+08:00 What are some valuable Statistical Analysis open source projects?        <software><open-source>           19             4             36             183.0 2011-02-12 05:50:03+08:00 2010-07-19 19:13:28+08:00     None       None             None                  None\n==================================================\n\n\nCREATE TABLE \"users\" (\nid bigint NOT NULL,\nreputation bigint NULL,\ncreationdate timestamp with time zone NULL,\ndisplayname text NULL,\nlastaccessdate timestamp with time zone NULL,\nwebsiteurl text NULL,\nlocation text NULL,\naboutme text NULL,\nviews bigint NULL,\nupvotes bigint NULL,\ndownvotes bigint NULL,\naccountid bigint NULL,\nage bigint NULL,\nprofileimageurl text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  reputation              creationdate  displayname            lastaccessdate                     websiteurl           location  views  upvotes  downvotes  accountid  age\n -1           1 2010-07-19 06:55:26+08:00    Community 2010-07-19 06:55:26+08:00 http://meta.stackexchange.com/ on the server farm      0     5007       1920         -1  NaN\n  2         101 2010-07-19 14:01:36+08:00 Geoff Dalgas 2013-11-12 22:07:23+08:00       http://stackoverflow.com      Corvallis, OR     25        3          0          2 37.0\n  3         101 2010-07-19 15:34:50+08:00 Jarrod Dixon 2014-08-08 06:42:58+08:00       http://stackoverflow.com       New York, NY     22       19          0          3 35.0\n==================================================\n\n\nCREATE TABLE \"tags\" (\nid bigint NOT NULL,\ntagname text NULL,\ncount bigint NULL,\nexcerptpostid bigint NULL,\nwikipostid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id     tagname  count  excerptpostid  wikipostid\n  1    bayesian   1342        20258.0     20257.0\n  2       prior    168        62158.0     62157.0\n  3 elicitation      6            NaN         NaN\n==================================================\n\n\nCREATE TABLE \"votes\" (\nid bigint NOT NULL,\npostid bigint NULL,\nvotetypeid bigint NULL,\ncreationdate date NULL,\nuserid bigint NULL,\nbountyamount bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  votetypeid creationdate userid bountyamount\n  1       3           2   2010-07-19   None         None\n  2       2           2   2010-07-19   None         None\n  3       5           2   2010-07-19   None         None\n==================================================\n\n\nCREATE TABLE \"comments\" (\nid bigint NOT NULL,\npostid bigint NULL,\nscore bigint NULL,\ntext text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  score              creationdate  userid userdisplayname\n  1       3      5 2010-07-19 19:15:52+08:00      13            None\n  2       5      0 2010-07-19 19:16:14+08:00      13            None\n  3       9      0 2010-07-19 19:18:54+08:00      13            None\n==================================================\n\n********************Database: codebase_community********************\n\n# User Query:\nIn our local database, we have two tables `users` and `profiles`. When a new user is added to the `users` table, we want to automatically create a corresponding profile in the `profiles` table. The `profiles` table has three columns: `id`, `CreationDate`, and `WebsiteUrl`. The `WebsiteUrl` should be derived from the user's WebsiteUrl by taking the part before the '.com'  and after the 'http://'. For example, 'http://stackoverflow.com' should become 'stackoverflow'. To achieve this, I created a trigger on the `users` table with the following function: sql begin insert into profiles (Id, CreationDate, WebsiteUrl) select new.id, new.WebsiteUrl, left(replace(new.WebsiteUrl, '.', '-'), charindex('@', replace(new.WebsiteUrl, '.', '-')) - 1); return new; end;  However, when a new user is added, I encounter the error:  ERROR: function charindex(unknown, text) does not exist (SQLSTATE 42883)\n# Error SQL:\nbegin insert into profiles (Id, CreationDate, WebsiteUrl) select new.Id, new.CreationDate, left(replace(new.WebsiteUrl, '.', '-'), charindex('@', replace(new.WebsiteUrl, '.', '-')) - 1); return new; end;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/73332354/postgresql-underperforming-query-on-large-table-with-composite-key", "instance_id": "237_1", "selected_database": "financial", "query": "We have a large transaction table in our financial database with over 180 million rows and 20 GB in size. The table is structured to store detailed transaction records for various accounts. We are running a query to retrieve specific transactions based on a list of account IDs, a specific bank, and a range of transaction types. The query is taking an unexpectedly long time to execute when the shared buffers are cold, around 9 seconds, but only 25 ms when the data is cached. We suspect that the query planner is not choosing the most optimal execution plan. We have tried adding a covering index and forcing a Bitmap Heap Scan, but we would like to understand why the planner is not making the best choice and find a more permanent solution to improve performance to around 1-2 seconds.", "error_sql": ["SELECT t.trans_id,       t.account_id,       t.date,       t.type,       t.amount  FROM trans t  JOIN account a    ON t.account_id = a.account_id WHERE a.district_id = 18   AND t.bank = 'AB'  AND t.type IN ('PRIJEM', 'VYDAJ')"], "sol_sql": ["DROP INDEX IF EXISTS idx_trans_account_bank_type", "CREATE INDEX idx_trans_account_bank_type ON trans (account_id, bank, type);", "ANALYZE trans;", "SELECT trans_id, account_id, date, type, amount FROM trans WHERE account_id IN (SELECT account_id FROM account WHERE district_id = 18) AND bank = 'AB' AND type IN ('PRIJEM', 'VYDAJ')"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    result = performance_compare_by_qep(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"performance_check returned {result} but expected 1.\"\n    return result\n    "], "efficiency": true, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nWe have a large transaction table in our financial database with over 180 million rows and 20 GB in size. The table is structured to store detailed transaction records for various accounts. We are running a query to retrieve specific transactions based on a list of account IDs, a specific bank, and a range of transaction types. The query is taking an unexpectedly long time to execute when the shared buffers are cold, around 9 seconds, but only 25 ms when the data is cached. We suspect that the query planner is not choosing the most optimal execution plan. We have tried adding a covering index and forcing a Bitmap Heap Scan, but we would like to understand why the planner is not making the best choice and find a more permanent solution to improve performance to around 1-2 seconds.\n# Error SQL:\nSELECT t.trans_id,       t.account_id,       t.date,       t.type,       t.amount  FROM trans t  JOIN account a    ON t.account_id = a.account_id WHERE a.district_id = 18   AND t.bank = 'AB'  AND t.type IN ('PRIJEM', 'VYDAJ')\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/75702490/find-rows-that-match-all-or-some-of-the-where-clause-conditions", "instance_id": "441_2", "selected_database": "card_games", "query": "A user is working with a table named `cards` in the `card_games` database. They want to find card records that match specific criteria: `availability` is 'paper', `bordercolor` is 'black', `rarity` is 'uncommon', and `type` is 'Creature'. They can write a query to get rows that match all these conditions. However, they also want to find cards that meet 3 out of these 4 criteria. Can this be done in a single SQL query?", "error_sql": ["SELECT * FROM cards WHERE availability = 'paper' AND bordercolor = 'black' AND rarity = 'uncommon' AND types = 'Creature';"], "sol_sql": ["SELECT * FROM cards WHERE  3 = (CASE WHEN availability = 'paper' THEN 1 ELSE 0 END) + (CASE WHEN bordercolor = 'black' THEN 1 ELSE 0 END) + (CASE WHEN rarity = 'uncommon' THEN 1 ELSE 0 END) + (CASE WHEN types = 'Creature' THEN 1 ELSE 0 END);"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nA user is working with a table named `cards` in the `card_games` database. They want to find card records that match specific criteria: `availability` is 'paper', `bordercolor` is 'black', `rarity` is 'uncommon', and `type` is 'Creature'. They can write a query to get rows that match all these conditions. However, they also want to find cards that meet 3 out of these 4 criteria. Can this be done in a single SQL query?\n# Error SQL:\nSELECT * FROM cards WHERE availability = 'paper' AND bordercolor = 'black' AND rarity = 'uncommon' AND types = 'Creature';\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74653362/how-to-delete-all-of-the-duplicate-rows-in-posgresql-not-leave-a-single", "instance_id": "444_2", "selected_database": "card_games", "query": "I need to remove all cards from the 'cards' table that from the same artist. The provided SQL query only deletes duplicates but leaves one instance of each duplicate artist name. I want to remove all instances of any artist name (not NULL) that appears more than once in the table.", "error_sql": ["DELETE FROM cards c1 USING cards c2 WHERE c1.artist = c2.artist AND c1.id < c2.id;"], "sol_sql": ["DELETE FROM cards WHERE artist IN (SELECT artist FROM cards GROUP BY artist HAVING COUNT(*) > 1);"], "preprocess_sql": [], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    total_rows_query = [\"SELECT COUNT(*) FROM cards;\"]\n    number, _, _ = execute_queries(total_rows_query, db_name, conn)\n    expected_row_count = 193\n    actual_row_count = number[0][0]\n    assert actual_row_count == expected_row_count, (f'Expected {expected_row_count} rows, but found {actual_row_count} rows.')\n\n    duplicate_count_query = [\"SELECT COUNT(*) FROM (SELECT artist FROM cards WHERE artist <> NULL GROUP BY artist HAVING COUNT(*) > 1) AS duplicates;\"]\n    duplicates, _, _ = execute_queries(duplicate_count_query, db_name, conn)\n    dup = duplicates[0][0]\n    assert dup == 0, (f'Expected 0 duplicate artists after sol_sql, but found {dup} duplicates.')\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nI need to remove all cards from the 'cards' table that from the same artist. The provided SQL query only deletes duplicates but leaves one instance of each duplicate artist name. I want to remove all instances of any artist name (not NULL) that appears more than once in the table.\n# Error SQL:\nDELETE FROM cards c1 USING cards c2 WHERE c1.artist = c2.artist AND c1.id < c2.id;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/75037080/how-to-insert-a-row-into-another-table-during-an-on-conflict", "instance_id": "442_3", "selected_database": "student_club", "query": "I want to insert a new event into the 'event' table and, in case of a duplicate event ID (which is unique), log the failure in the 'failure' table with specific event ID and member ID indicating the error. For example, I want to insert an event with the ID 'recAlAwtBZ0Fqbr5K' and name 'Annual Gala'. If it fails due to a duplicate name, log the failure with the member ID 'rec280Sk7o31iG0Tx'. My current SQL statement is producing an error: syntax error at or near 'insert'.", "error_sql": ["insert into event (event_id, event_name, event_date, type, notes, location, status) values ('recAlAwtBZ0Fqbr5K', 'Annual Gala', '2023-12-15T19:00:00', 'Social', 'Annual Gala for club members', 'Grand Ballroom', 'Open') on conflict (event_id) do insert into failure (event, member) values ('recAlAwtBZ0Fqbr5K', 'rec280Sk7o31iG0Tx');"], "sol_sql": ["WITH j AS (INSERT INTO event (event_id, event_name, event_date, type, notes, location, status) VALUES ('recAlAwtBZ0Fqbr5K', 'Annual Gala', '2023-12-15T19:00:00', 'Social', 'Annual Gala for club members', 'Grand Ballroom', 'Open') ON CONFLICT (event_id) DO UPDATE SET event_id = event.event_id RETURNING xmax = 0 AS inserted, *) INSERT INTO failure (event, member) SELECT event_id, 'rec280Sk7o31iG0Tx' FROM j WHERE NOT inserted RETURNING *;"], "preprocess_sql": ["CREATE TABLE failure (event VARCHAR(255) NOT NULL, member VARCHAR(255) NOT NULL, PRIMARY KEY (event, member));"], "clean_up_sql": ["DROP TABLE IF EXISTS failure;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_query_result_1, _, _ = execute_queries([\"SELECT event FROM failure;\"], db_name, conn)\n    pred_query_result_2, _, _  = execute_queries([\"SELECT member FROM failure;\"], db_name, conn)\n    assert len(pred_query_result_1) == 1, f'Expected 1 rows, but found {len(pred_query_result_1)} rows' \n    assert len(pred_query_result_2) == 1, f'Expected 1 rows, but found {len(pred_query_result_2)} rows'\n    assert pred_query_result_1[0][0] == 'recAlAwtBZ0Fqbr5K', f'Expected event ID to match, but found {pred_query_result_1[0][0]}'\n    assert pred_query_result_2[0][0] == 'rec280Sk7o31iG0Tx', f'Expected member ID to match, but found {pred_query_result_2[0][0]}'\n    "], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: student_club********************\nCREATE TABLE \"income\" (\nincome_id text NOT NULL,\ndate_received text NULL,\namount bigint NULL,\nsource text NULL,\nnotes text NULL,\nlink_to_member text NULL,\n    PRIMARY KEY (income_id),\n    FOREIGN KEY (link_to_member) REFERENCES member(member_id)\n);\n\nExample data:\n        income_id date_received  amount source notes    link_to_member\nrec0s9ZrO15zhzUeE    2019-10-17      50   Dues  None reccW7q1KkhSKZsea\nrec7f5XMQZexgtQJo    2019-09-04      50   Dues  None recTjHY5xXhvkCdVT\nrec8BUJa8GXUjiglg    2019-10-08      50   Dues  None recUdRhbhcEO1Hk5r\n==================================================\n\n\nCREATE TABLE \"budget\" (\nbudget_id text NOT NULL,\ncategory text NULL,\nspent real NULL,\nremaining real NULL,\namount bigint NULL,\nevent_status text NULL,\nlink_to_event text NULL,\n    PRIMARY KEY (budget_id),\n    FOREIGN KEY (link_to_event) REFERENCES event(event_id)\n);\n\nExample data:\n        budget_id      category  spent  remaining  amount event_status     link_to_event\nrec0QmEc3cSQFQ6V2 Advertisement  67.81       7.19      75       Closed recI43CzsZ0Q625ma\nrec1bG6HSft7XIvTP          Food 121.14      28.86     150       Closed recggMW2eyCYceNcy\nrec1z6ISJU2HdIsVm          Food  20.20      -0.20      20       Closed recJ4Witp9tpjaugn\n==================================================\n\n\nCREATE TABLE \"zip_code\" (\nzip_code bigint NOT NULL,\ntype text NULL,\ncity text NULL,\ncounty text NULL,\nstate text NULL,\nshort_state text NULL,\n    PRIMARY KEY (zip_code)\n);\n\nExample data:\n zip_code     type       city             county       state short_state\n      501   Unique Holtsville     Suffolk County    New York          NY\n      544   Unique Holtsville     Suffolk County    New York          NY\n      601 Standard   Adjuntas Adjuntas Municipio Puerto Rico          PR\n==================================================\n\n\nCREATE TABLE \"expense\" (\nexpense_id text NOT NULL,\nexpense_description text NULL,\nexpense_date text NULL,\ncost real NULL,\napproved text NULL,\nlink_to_member text NULL,\nlink_to_budget text NULL,\n    PRIMARY KEY (expense_id)\n);\n\nExample data:\n       expense_id expense_description expense_date   cost approved    link_to_member    link_to_budget\nrec017x6R3hQqkLAo Post Cards, Posters   2019-08-20 122.06     true rec4BLdZHS2Blfp4v recvKTAWAFKkVNnXQ\nrec1nIjoZKTYayqZ6      Water, Cookies   2019-10-08  20.20     true recro8T1MPMwRadVH recy8KY5bUdzF81vv\nrec1oMgNFt7Y0G40x               Pizza   2019-09-10  51.81     true recD078PnS3x2doBe recwXIiKoBMjXJsGZ\n==================================================\n\n\nCREATE TABLE \"member\" (\nmember_id text NOT NULL,\nfirst_name text NULL,\nlast_name text NULL,\nemail text NULL,\nposition text NULL,\nt_shirt_size text NULL,\nphone text NULL,\nzip bigint NULL,\nlink_to_major text NULL,\n    PRIMARY KEY (member_id)\n);\n\nExample data:\n        member_id first_name last_name                  email position t_shirt_size          phone   zip     link_to_major\nrec1x5zBFIqoOuPW8     Angela   Sanders angela.sanders@lpu.edu   Member       Medium (651) 928-4507 55108 recxK3MHQFbR9J5uO\nrec280Sk7o31iG0Tx      Grant   Gilmour  grant.gilmour@lpu.edu   Member      X-Large   403-555-1310 29440 rec7BxKpjJ7bNph3O\nrec28ORZgcm1dtqBZ      Luisa     Guidi    luisa.guidi@lpu.edu   Member       Medium   442-555-5882 10002 recdIBgeU38UbV2sy\n==================================================\n\n\nCREATE TABLE \"attendance\" (\nlink_to_event text NOT NULL,\nlink_to_member text NOT NULL,\n    PRIMARY KEY (link_to_event, link_to_member)\n);\n\nExample data:\n    link_to_event    link_to_member\nrec2N69DMcrqN9PJC recD078PnS3x2doBe\nrec2N69DMcrqN9PJC recP6DJPyi5donvXL\nrec2N69DMcrqN9PJC rec28ORZgcm1dtqBZ\n==================================================\n\n\nCREATE TABLE \"event\" (\nevent_id text NOT NULL,\nevent_name text NULL,\nevent_date text NULL,\ntype text NULL,\nnotes text NULL,\nlocation text NULL,\nstatus text NULL,\n    PRIMARY KEY (event_id)\n);\n\nExample data:\n         event_id                 event_name          event_date     type location status\nrec0Si5cQ4rJRVzd6              March Meeting 2020-03-10T12:00:00  Meeting   MU 215   Open\nrec0akZnLLpGUloLH Officers meeting - January 2020-01-14T09:30:00  Meeting     None   Open\nrec0dZPcWXF0QjNnE           Spring Elections 2019-11-24T09:00:00 Election   MU 215   Open\n==================================================\n\n\nCREATE TABLE \"major\" (\nmajor_id text NOT NULL,\nmajor_name text NULL,\ndepartment text NULL,\ncollege text NULL,\n    PRIMARY KEY (major_id)\n);\n\nExample data:\n         major_id                             major_name                                           department                                     college\nrec06DF6vZ1CyPKpc Outdoor Product Design and Development School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec09LedkREyskCNv             Agricultural Communication School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec0Eanv576RhQllI         Fisheries and Aquatic Sciences                        Watershed Sciences Department                College of Natural Resources\n==================================================\n\n********************Database: student_club********************\n\n# User Query:\nI want to insert a new event into the 'event' table and, in case of a duplicate event ID (which is unique), log the failure in the 'failure' table with specific event ID and member ID indicating the error. For example, I want to insert an event with the ID 'recAlAwtBZ0Fqbr5K' and name 'Annual Gala'. If it fails due to a duplicate name, log the failure with the member ID 'rec280Sk7o31iG0Tx'. My current SQL statement is producing an error: syntax error at or near 'insert'.\n# Error SQL:\ninsert into event (event_id, event_name, event_date, type, notes, location, status) values ('recAlAwtBZ0Fqbr5K', 'Annual Gala', '2023-12-15T19:00:00', 'Social', 'Annual Gala for club members', 'Grand Ballroom', 'Open') on conflict (event_id) do insert into failure (event, member) values ('recAlAwtBZ0Fqbr5K', 'rec280Sk7o31iG0Tx');\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/38073291/postgresql-where-in-like-query", "instance_id": "261_3", "selected_database": "student_club", "query": "I am trying to find all events that are either 'Closed' or 'Planning' and have a budget amount greater than 100. However, I want to use the IN clause with LIKE conditions to filter the event_status. My current query works but seems inefficient. Is there a way to simplify it using the SIMILAR TO clause?", "error_sql": ["SELECT * FROM budget WHERE amount > 100 AND event_status IN ('%Closed%', '%Planning%');"], "sol_sql": ["SELECT * FROM budget WHERE amount > 100 AND event_status SIMILAR TO '%(Clos|Pla)%';"], "preprocess_sql": [""], "clean_up_sql": [""], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result\n"], "status": "success", "error_message": null, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: student_club********************\nCREATE TABLE \"income\" (\nincome_id text NOT NULL,\ndate_received text NULL,\namount bigint NULL,\nsource text NULL,\nnotes text NULL,\nlink_to_member text NULL,\n    PRIMARY KEY (income_id),\n    FOREIGN KEY (link_to_member) REFERENCES member(member_id)\n);\n\nExample data:\n        income_id date_received  amount source notes    link_to_member\nrec0s9ZrO15zhzUeE    2019-10-17      50   Dues  None reccW7q1KkhSKZsea\nrec7f5XMQZexgtQJo    2019-09-04      50   Dues  None recTjHY5xXhvkCdVT\nrec8BUJa8GXUjiglg    2019-10-08      50   Dues  None recUdRhbhcEO1Hk5r\n==================================================\n\n\nCREATE TABLE \"budget\" (\nbudget_id text NOT NULL,\ncategory text NULL,\nspent real NULL,\nremaining real NULL,\namount bigint NULL,\nevent_status text NULL,\nlink_to_event text NULL,\n    PRIMARY KEY (budget_id),\n    FOREIGN KEY (link_to_event) REFERENCES event(event_id)\n);\n\nExample data:\n        budget_id      category  spent  remaining  amount event_status     link_to_event\nrec0QmEc3cSQFQ6V2 Advertisement  67.81       7.19      75       Closed recI43CzsZ0Q625ma\nrec1bG6HSft7XIvTP          Food 121.14      28.86     150       Closed recggMW2eyCYceNcy\nrec1z6ISJU2HdIsVm          Food  20.20      -0.20      20       Closed recJ4Witp9tpjaugn\n==================================================\n\n\nCREATE TABLE \"zip_code\" (\nzip_code bigint NOT NULL,\ntype text NULL,\ncity text NULL,\ncounty text NULL,\nstate text NULL,\nshort_state text NULL,\n    PRIMARY KEY (zip_code)\n);\n\nExample data:\n zip_code     type       city             county       state short_state\n      501   Unique Holtsville     Suffolk County    New York          NY\n      544   Unique Holtsville     Suffolk County    New York          NY\n      601 Standard   Adjuntas Adjuntas Municipio Puerto Rico          PR\n==================================================\n\n\nCREATE TABLE \"expense\" (\nexpense_id text NOT NULL,\nexpense_description text NULL,\nexpense_date text NULL,\ncost real NULL,\napproved text NULL,\nlink_to_member text NULL,\nlink_to_budget text NULL,\n    PRIMARY KEY (expense_id)\n);\n\nExample data:\n       expense_id expense_description expense_date   cost approved    link_to_member    link_to_budget\nrec017x6R3hQqkLAo Post Cards, Posters   2019-08-20 122.06     true rec4BLdZHS2Blfp4v recvKTAWAFKkVNnXQ\nrec1nIjoZKTYayqZ6      Water, Cookies   2019-10-08  20.20     true recro8T1MPMwRadVH recy8KY5bUdzF81vv\nrec1oMgNFt7Y0G40x               Pizza   2019-09-10  51.81     true recD078PnS3x2doBe recwXIiKoBMjXJsGZ\n==================================================\n\n\nCREATE TABLE \"member\" (\nmember_id text NOT NULL,\nfirst_name text NULL,\nlast_name text NULL,\nemail text NULL,\nposition text NULL,\nt_shirt_size text NULL,\nphone text NULL,\nzip bigint NULL,\nlink_to_major text NULL,\n    PRIMARY KEY (member_id)\n);\n\nExample data:\n        member_id first_name last_name                  email position t_shirt_size          phone   zip     link_to_major\nrec1x5zBFIqoOuPW8     Angela   Sanders angela.sanders@lpu.edu   Member       Medium (651) 928-4507 55108 recxK3MHQFbR9J5uO\nrec280Sk7o31iG0Tx      Grant   Gilmour  grant.gilmour@lpu.edu   Member      X-Large   403-555-1310 29440 rec7BxKpjJ7bNph3O\nrec28ORZgcm1dtqBZ      Luisa     Guidi    luisa.guidi@lpu.edu   Member       Medium   442-555-5882 10002 recdIBgeU38UbV2sy\n==================================================\n\n\nCREATE TABLE \"attendance\" (\nlink_to_event text NOT NULL,\nlink_to_member text NOT NULL,\n    PRIMARY KEY (link_to_event, link_to_member)\n);\n\nExample data:\n    link_to_event    link_to_member\nrec2N69DMcrqN9PJC recD078PnS3x2doBe\nrec2N69DMcrqN9PJC recP6DJPyi5donvXL\nrec2N69DMcrqN9PJC rec28ORZgcm1dtqBZ\n==================================================\n\n\nCREATE TABLE \"event\" (\nevent_id text NOT NULL,\nevent_name text NULL,\nevent_date text NULL,\ntype text NULL,\nnotes text NULL,\nlocation text NULL,\nstatus text NULL,\n    PRIMARY KEY (event_id)\n);\n\nExample data:\n         event_id                 event_name          event_date     type location status\nrec0Si5cQ4rJRVzd6              March Meeting 2020-03-10T12:00:00  Meeting   MU 215   Open\nrec0akZnLLpGUloLH Officers meeting - January 2020-01-14T09:30:00  Meeting     None   Open\nrec0dZPcWXF0QjNnE           Spring Elections 2019-11-24T09:00:00 Election   MU 215   Open\n==================================================\n\n\nCREATE TABLE \"major\" (\nmajor_id text NOT NULL,\nmajor_name text NULL,\ndepartment text NULL,\ncollege text NULL,\n    PRIMARY KEY (major_id)\n);\n\nExample data:\n         major_id                             major_name                                           department                                     college\nrec06DF6vZ1CyPKpc Outdoor Product Design and Development School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec09LedkREyskCNv             Agricultural Communication School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec0Eanv576RhQllI         Fisheries and Aquatic Sciences                        Watershed Sciences Department                College of Natural Resources\n==================================================\n\n********************Database: student_club********************\n\n# User Query:\nI am trying to find all events that are either 'Closed' or 'Planning' and have a budget amount greater than 100. However, I want to use the IN clause with LIKE conditions to filter the event_status. My current query works but seems inefficient. Is there a way to simplify it using the SIMILAR TO clause?\n# Error SQL:\nSELECT * FROM budget WHERE amount > 100 AND event_status IN ('%Closed%', '%Planning%');\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/39607334/postgres-function-creation-error-no-language-specified-sql-state-42p13", "instance_id": "259_2", "selected_database": "european_football_2", "query": "I am new to functions and triggers in PostgreSQL. I am trying to create a trigger function to log changes in the player's name in the Player table. I followed a tutorial but encountered an error. The code block and the error are provided below. The Player table contains detailed information about players. The player_audits table is intended to keep track of any changes to the player's name along with the timestamp of the change.", "error_sql": ["CREATE OR REPLACE FUNCTION log_player_name_changes() RETURNS trigger AS $BODY$ BEGIN IF NEW.player_name <> OLD.player_name THEN INSERT INTO player_audits(player_id, old_player_name, changed_on) VALUES(OLD.id, OLD.player_name, now()); END IF; RETURN NEW; END; $BODY$ CREATE TRIGGER tr_change_playername AFTER UPDATE OF player_name ON player FOR EACH ROW EXECUTE PROCEDURE log_player_name_changes();"], "sol_sql": ["CREATE OR REPLACE FUNCTION log_player_name_changes() RETURNS trigger AS $BODY$ BEGIN IF NEW.player_name <> OLD.player_name THEN INSERT INTO player_audits(player_id, old_player_name, changed_on) VALUES(OLD.id, OLD.player_name, now()); END IF; RETURN NEW; END; $BODY$ LANGUAGE plpgsql;CREATE TRIGGER tr_change_playername AFTER UPDATE OF player_name ON player FOR EACH ROW EXECUTE PROCEDURE log_player_name_changes();"], "preprocess_sql": ["CREATE TABLE player_audits (player_id int, old_player_name text, changed_on timestamp );"], "clean_up_sql": ["DROP TABLE IF EXISTS player_audits;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    res, _, _ = execute_queries([f\"SELECT player_name FROM player WHERE id = 1;\"], db_name,conn)\n    old_p_name = res[0][0]\n    check_sql = [f\"UPDATE player SET player_name = {old_p_name} WHERE id = 1;\"]\n    execute_queries(check_sql, db_name,conn)\n    res, _, _ = execute_queries([f\"SELECT * FROM player_audits\"], db_name, conn)\n    assert len(res) == 0, f\"The trigger conditioning does not work.\"\n    \n    check_sql = [f\"UPDATE player SET player_name = 'James Higginsons' WHERE id = 1;\"]\n    execute_queries(check_sql, db_name,conn)\n    res, _, _ = execute_queries([f\"SELECT old_player_name FROM player_audits LIMIT 1\"], db_name,conn)\n    old_name = res[0][0]\n    assert old_name == 'Aaron Appindangoye', f\"The trigger does not work.\"\n"], "status": "success", "error_message": null, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: european_football_2********************\nCREATE TABLE \"team_attributes\" (\nid bigint NOT NULL DEFAULT nextval('team_attributes_id_seq'::regclass),\nteam_fifa_api_id bigint NULL,\nteam_api_id bigint NULL,\ndate text NULL,\nbuildupplayspeed bigint NULL,\nbuildupplayspeedclass text NULL,\nbuildupplaydribbling bigint NULL,\nbuildupplaydribblingclass text NULL,\nbuildupplaypassing bigint NULL,\nbuildupplaypassingclass text NULL,\nbuildupplaypositioningclass text NULL,\nchancecreationpassing bigint NULL,\nchancecreationpassingclass text NULL,\nchancecreationcrossing bigint NULL,\nchancecreationcrossingclass text NULL,\nchancecreationshooting bigint NULL,\nchancecreationshootingclass text NULL,\nchancecreationpositioningclass text NULL,\ndefencepressure bigint NULL,\ndefencepressureclass text NULL,\ndefenceaggression bigint NULL,\ndefenceaggressionclass text NULL,\ndefenceteamwidth bigint NULL,\ndefenceteamwidthclass text NULL,\ndefencedefenderlineclass text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_fifa_api_id  team_api_id                date  buildupplayspeed buildupplayspeedclass  buildupplaydribbling buildupplaydribblingclass  buildupplaypassing buildupplaypassingclass buildupplaypositioningclass  chancecreationpassing chancecreationpassingclass  chancecreationcrossing chancecreationcrossingclass  chancecreationshooting chancecreationshootingclass chancecreationpositioningclass  defencepressure defencepressureclass  defenceaggression defenceaggressionclass  defenceteamwidth defenceteamwidthclass defencedefenderlineclass\n  1               434         9930 2010-02-22 00:00:00                60              Balanced                   NaN                    Little                  50                   Mixed                   Organised                     60                     Normal                      65                      Normal                      55                      Normal                      Organised               50               Medium                 55                  Press                45                Normal                    Cover\n  2               434         9930 2014-09-19 00:00:00                52              Balanced                  48.0                    Normal                  56                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n  3               434         9930 2015-09-10 00:00:00                47              Balanced                  41.0                    Normal                  54                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n==================================================\n\n\nCREATE TABLE \"player\" (\nid bigint NOT NULL DEFAULT nextval('player_id_seq'::regclass),\nplayer_api_id bigint NULL,\nplayer_name text NULL,\nplayer_fifa_api_id bigint NULL,\nbirthday text NULL,\nheight bigint NULL,\nweight bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_api_id        player_name  player_fifa_api_id            birthday  height  weight\n  1         505942 Aaron Appindangoye              218353 1992-02-29 00:00:00     182     187\n  2         155782    Aaron Cresswell              189615 1989-12-15 00:00:00     170     146\n  3         162549        Aaron Doran              186170 1991-05-13 00:00:00     170     163\n==================================================\n\n\nCREATE TABLE \"match\" (\nid bigint NOT NULL DEFAULT nextval('match_id_seq'::regclass),\ncountry_id bigint NULL,\nleague_id bigint NULL,\nseason text NULL,\nstage bigint NULL,\ndate text NULL,\nmatch_api_id bigint NULL,\nhome_team_api_id bigint NULL,\naway_team_api_id bigint NULL,\nhome_team_goal bigint NULL,\naway_team_goal bigint NULL,\ngoal text NULL,\nshoton text NULL,\nshotoff text NULL,\nfoulcommit text NULL,\ncard text NULL,\ncross text NULL,\ncorner text NULL,\npossession text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  country_id  league_id    season  stage                date  match_api_id  home_team_api_id  away_team_api_id  home_team_goal  away_team_goal\n  1           1          1 2008/2009      1 2008-08-17 00:00:00        492473              9987              9993               1               1\n  2           1          1 2008/2009      1 2008-08-16 00:00:00        492474             10000              9994               0               0\n  3           1          1 2008/2009      1 2008-08-16 00:00:00        492475              9984              8635               0               3\n==================================================\n\n\nCREATE TABLE \"league\" (\nid bigint NOT NULL DEFAULT nextval('league_id_seq'::regclass),\ncountry_id bigint NULL,\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id  country_id                   name\n   1           1 Belgium Jupiler League\n1729        1729 England Premier League\n4769        4769         France Ligue 1\n==================================================\n\n\nCREATE TABLE \"country\" (\nid bigint NOT NULL DEFAULT nextval('country_id_seq'::regclass),\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id    name\n   1 Belgium\n1729 England\n4769  France\n==================================================\n\n\nCREATE TABLE \"player_attributes\" (\nid bigint NOT NULL DEFAULT nextval('player_attributes_id_seq'::regclass),\nplayer_fifa_api_id bigint NULL,\nplayer_api_id bigint NULL,\ndate text NULL,\noverall_rating bigint NULL,\npotential bigint NULL,\npreferred_foot text NULL,\nattacking_work_rate text NULL,\ndefensive_work_rate text NULL,\ncrossing bigint NULL,\nfinishing bigint NULL,\nheading_accuracy bigint NULL,\nshort_passing bigint NULL,\nvolleys bigint NULL,\ndribbling bigint NULL,\ncurve bigint NULL,\nfree_kick_accuracy bigint NULL,\nlong_passing bigint NULL,\nball_control bigint NULL,\nacceleration bigint NULL,\nsprint_speed bigint NULL,\nagility bigint NULL,\nreactions bigint NULL,\nbalance bigint NULL,\nshot_power bigint NULL,\njumping bigint NULL,\nstamina bigint NULL,\nstrength bigint NULL,\nlong_shots bigint NULL,\naggression bigint NULL,\ninterceptions bigint NULL,\npositioning bigint NULL,\nvision bigint NULL,\npenalties bigint NULL,\nmarking bigint NULL,\nstanding_tackle bigint NULL,\nsliding_tackle bigint NULL,\ngk_diving bigint NULL,\ngk_handling bigint NULL,\ngk_kicking bigint NULL,\ngk_positioning bigint NULL,\ngk_reflexes bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_fifa_api_id  player_api_id                date  overall_rating  potential preferred_foot attacking_work_rate defensive_work_rate  crossing  finishing  heading_accuracy  short_passing  volleys  dribbling  curve  free_kick_accuracy  long_passing  ball_control  acceleration  sprint_speed  agility  reactions  balance  shot_power  jumping  stamina  strength  long_shots  aggression  interceptions  positioning  vision  penalties  marking  standing_tackle  sliding_tackle  gk_diving  gk_handling  gk_kicking  gk_positioning  gk_reflexes\n  1              218353         505942 2016-02-18 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  2              218353         505942 2015-11-19 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  3              218353         505942 2015-09-21 00:00:00              62         66          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          63             41           45      54         48       65               66              69          6           11          10               8            8\n==================================================\n\n\nCREATE TABLE \"team\" (\nid bigint NOT NULL DEFAULT nextval('team_id_seq'::regclass),\nteam_api_id bigint NULL,\nteam_fifa_api_id bigint NULL,\nteam_long_name text NULL,\nteam_short_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_api_id  team_fifa_api_id   team_long_name team_short_name\n  1         9987               673         KRC Genk             GEN\n  2         9993               675     Beerschot AC             BAC\n  3        10000             15005 SV Zulte-Waregem             ZUL\n==================================================\n\n********************Database: european_football_2********************\n\n# User Query:\nI am new to functions and triggers in PostgreSQL. I am trying to create a trigger function to log changes in the player's name in the Player table. I followed a tutorial but encountered an error. The code block and the error are provided below. The Player table contains detailed information about players. The player_audits table is intended to keep track of any changes to the player's name along with the timestamp of the change.\n# Error SQL:\nCREATE OR REPLACE FUNCTION log_player_name_changes() RETURNS trigger AS $BODY$ BEGIN IF NEW.player_name <> OLD.player_name THEN INSERT INTO player_audits(player_id, old_player_name, changed_on) VALUES(OLD.id, OLD.player_name, now()); END IF; RETURN NEW; END; $BODY$ CREATE TRIGGER tr_change_playername AFTER UPDATE OF player_name ON player FOR EACH ROW EXECUTE PROCEDURE log_player_name_changes();\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/76401278/find-the-latest-rating-for-each-category-for-each-customer", "instance_id": "392_2", "selected_database": "student_club", "query": "The data in the event_attendance table looks like this:\\n| MemberID | EventID | EventType | AttendanceDate |\\n| -------- | ------- | --------- | -------------- |\\n| 1        | 101     | Game      | 2023-01-01     |\\n| 1        | 102     | Game      | 2023-01-10     |\\n| 1        | 103     | Game      | 2023-02-15     |\\n| 1        | 104     | Game      | 2023-02-20     |\\n| 1        | 105     | Workshop  | 2023-03-01     |\\n| 1        | 106     | Workshop  | 2023-03-20     |\\n| 2        | 107     | Game      | 2023-01-15     |\\n| 2        | 108     | Workshop  | 2023-02-06     |\\nWhat I am trying to build is like this:\\n| MemberID | Game_AttendanceDate | Game_Attendances | Workshop_AttendanceDate | Workshop_Attendances | Total_Attendances |\\n| -------- | ------------------- | ---------------- | ----------------------- | ---------------------- | ------------------- |\\n| 1        | 2023-02-20          | 4                | 2023-03-20              | 2                    | 6                   |\\n| 2        | 2023-01-15          | 1                | 2023-02-06              | 1                    | 2                   |\\nThe data should be one row for each member.\\nColumn definitions of the expected output:\\nGame_AttendanceDate : Latest attendance date based on date where EventType = 'Game'\\nGame_Attendances: Total number of Game events attended by each member.\\nWorkshop_AttendanceDate: Latest attendance date based on date where EventType = 'Workshop'\\nWorkshop_Attendances: Total number of Workshop events attended by each member.\\nTotal_Attendances: Total events attended by each member.\\nThe SQL Code that I have tried:\\nsql\\nselect\\n    coalesce(a.MemberID,b.MemberID) as MemberID,\\n    a.AttendanceDate as Game_AttendanceDate,\\n    Game_Attendances,\\n    b.AttendanceDate as Workshop_AttendanceDate,\\n    Workshop_Attendances,\\n    Game_Attendances + Workshop_Attendances as Total_Attendances    \\\\nfrom \\\\n(select \\\\n    MemberID, \\\\n    EventType,\\n    AttendanceDate,\\n    count(*) over(partition by MemberID,EventType) as Game_Attendances,\\n    row_number() over(partition by MemberID,EventType order by AttendanceDate desc) as RNUM\\\\nfrom event_attendance \\\\n    where EventType ='Game'\\\\n) a join (\\\\n    select \\\\n    MemberID, \\\\n    EventType,\\n    AttendanceDate,\\n    count(*) over(partition by MemberID,EventType) as Workshop_Attendances,\\n    row_number() over(partition by MemberID,EventType order by AttendanceDate desc) as RNUM\\\\nfrom event_attendance \\\\n    where EventType ='Workshop'\\\\n) b on a.MemberID = b.MemberID \\\\nwhere a.RNUM = 1 and b.RNUM = 1\\\\n\\nI have to do this calculation for another 2 categories then that will add up another 2 sub queries. Is there anyway to optimize this SQL code?", "error_sql": ["\nSELECT\n    COALESCE(a.MemberID, b.MemberID) AS MemberID,\n    a.AttendanceDate AS Latest_Game_Date,\n    a.Game_Attendance AS Total_Game_Attendance,\n    b.AttendanceDate AS Latest_Workshop_Date,\n    b.Workshop_Attendance AS Total_Workshop_Attendance,\n    a.Game_Attendance + b.Workshop_Attendance AS Total_Attendance\nFROM \n(\n    SELECT \n        MemberID, \n        EventType,\n        AttendanceDate,\n        COUNT(EventID) OVER(PARTITION BY MemberID, EventType) AS Game_Attendance,\n        ROW_NUMBER() OVER(PARTITION BY MemberID, EventType ORDER BY AttendanceDate DESC) AS RNUM\n    FROM event_attendance\n    WHERE EventType = 'Game'\n) a\nFULL JOIN \n(\n    SELECT \n        MemberID, \n        EventType,\n        AttendanceDate,\n        COUNT(EventID) OVER(PARTITION BY MemberID, EventType) AS Workshop_Attendance,\n        ROW_NUMBER() OVER(PARTITION BY MemberID, EventType ORDER BY AttendanceDate DESC) AS RNUM\n    FROM event_attendance\n    WHERE EventType = 'Workshop'\n) b\nON a.MemberID = b.MemberID\nWHERE (a.RNUM = 1 OR a.RNUM IS NULL) AND (b.RNUM = 1 OR b.RNUM IS NULL);\n\n"], "sol_sql": ["\nSELECT\n    ea.MemberID,\n    MAX(CASE WHEN ea.EventType = 'Game' THEN ea.AttendanceDate END) AS Latest_Game_Date,\n    SUM(CASE WHEN ea.EventType = 'Game' THEN 1 ELSE 0 END) AS Total_Game_Attendance,\n    MAX(CASE WHEN ea.EventType = 'Workshop' THEN ea.AttendanceDate END) AS Latest_Workshop_Date,\n    SUM(CASE WHEN ea.EventType = 'Workshop' THEN 1 ELSE 0 END) AS Total_Workshop_Attendance,\n    COUNT(*) AS Total_Attendance\nFROM (\n    SELECT MemberID, EventType, AttendanceDate\n    FROM event_attendance\n    WHERE EventType IN ('Game', 'Workshop')\n) ea\nGROUP BY ea.MemberID\nORDER BY ea.MemberID;\n\n"], "preprocess_sql": ["\nCREATE TABLE event_attendance (MemberID int, EventID int, EventType text, AttendanceDate date); INSERT INTO event_attendance (MemberID, EventID, EventType, AttendanceDate) VALUES (1, 101, 'Game', '2023-01-01'), (1, 102, 'Game', '2023-01-10'), (1, 103, 'Game', '2023-02-15'), (1, 104, 'Game', '2023-02-20'), (1, 105, 'Workshop', '2023-03-01'), (1, 106, 'Workshop', '2023-03-20'), (2, 107, 'Game', '2023-01-15'), (2, 108, 'Workshop', '2023-02-06');\n"], "clean_up_sql": ["\nDROP TABLE event_attendance;\n\n"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert len(pred_query_result) == 2, f'Expected 2 rows, but found {len(pred_query_result)} rows'\n\n    ", "\nimport datetime\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert pred_query_result[0][0] == 1, f'Expected MemberID 1 in the first row, but found {pred_query_result[0][0]}'\n    pred_game_date = pred_query_result[0][1]\n    pred_game_date_str = pred_game_date.strftime('%Y-%m-%d')\n    expected_date_str = '2023-02-20'\n    assert pred_game_date_str == expected_date_str, f'Expected Game_AttendanceDate 2023-02-20 for MemberID 1, but found {pred_game_date_str}'\n    assert pred_query_result[1][4] == 1, f'Expected Workshop_Attendances 1 for MemberID 2, but found {pred_query_result[1][4]}'\n\n    assert pred_query_result[0][5] == 6, f'Expected Total_Attendances 6 for MemberID 1, but found {pred_query_result[0][5]}'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    result = performance_compare_by_qep(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"performance_check returned {result} but expected 1.\"\n    return result\n    "], "efficiency": true, "status": "success", "error_message": null, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: student_club********************\nCREATE TABLE \"income\" (\nincome_id text NOT NULL,\ndate_received text NULL,\namount bigint NULL,\nsource text NULL,\nnotes text NULL,\nlink_to_member text NULL,\n    PRIMARY KEY (income_id),\n    FOREIGN KEY (link_to_member) REFERENCES member(member_id)\n);\n\nExample data:\n        income_id date_received  amount source notes    link_to_member\nrec0s9ZrO15zhzUeE    2019-10-17      50   Dues  None reccW7q1KkhSKZsea\nrec7f5XMQZexgtQJo    2019-09-04      50   Dues  None recTjHY5xXhvkCdVT\nrec8BUJa8GXUjiglg    2019-10-08      50   Dues  None recUdRhbhcEO1Hk5r\n==================================================\n\n\nCREATE TABLE \"budget\" (\nbudget_id text NOT NULL,\ncategory text NULL,\nspent real NULL,\nremaining real NULL,\namount bigint NULL,\nevent_status text NULL,\nlink_to_event text NULL,\n    PRIMARY KEY (budget_id),\n    FOREIGN KEY (link_to_event) REFERENCES event(event_id)\n);\n\nExample data:\n        budget_id      category  spent  remaining  amount event_status     link_to_event\nrec0QmEc3cSQFQ6V2 Advertisement  67.81       7.19      75       Closed recI43CzsZ0Q625ma\nrec1bG6HSft7XIvTP          Food 121.14      28.86     150       Closed recggMW2eyCYceNcy\nrec1z6ISJU2HdIsVm          Food  20.20      -0.20      20       Closed recJ4Witp9tpjaugn\n==================================================\n\n\nCREATE TABLE \"zip_code\" (\nzip_code bigint NOT NULL,\ntype text NULL,\ncity text NULL,\ncounty text NULL,\nstate text NULL,\nshort_state text NULL,\n    PRIMARY KEY (zip_code)\n);\n\nExample data:\n zip_code     type       city             county       state short_state\n      501   Unique Holtsville     Suffolk County    New York          NY\n      544   Unique Holtsville     Suffolk County    New York          NY\n      601 Standard   Adjuntas Adjuntas Municipio Puerto Rico          PR\n==================================================\n\n\nCREATE TABLE \"expense\" (\nexpense_id text NOT NULL,\nexpense_description text NULL,\nexpense_date text NULL,\ncost real NULL,\napproved text NULL,\nlink_to_member text NULL,\nlink_to_budget text NULL,\n    PRIMARY KEY (expense_id)\n);\n\nExample data:\n       expense_id expense_description expense_date   cost approved    link_to_member    link_to_budget\nrec017x6R3hQqkLAo Post Cards, Posters   2019-08-20 122.06     true rec4BLdZHS2Blfp4v recvKTAWAFKkVNnXQ\nrec1nIjoZKTYayqZ6      Water, Cookies   2019-10-08  20.20     true recro8T1MPMwRadVH recy8KY5bUdzF81vv\nrec1oMgNFt7Y0G40x               Pizza   2019-09-10  51.81     true recD078PnS3x2doBe recwXIiKoBMjXJsGZ\n==================================================\n\n\nCREATE TABLE \"member\" (\nmember_id text NOT NULL,\nfirst_name text NULL,\nlast_name text NULL,\nemail text NULL,\nposition text NULL,\nt_shirt_size text NULL,\nphone text NULL,\nzip bigint NULL,\nlink_to_major text NULL,\n    PRIMARY KEY (member_id)\n);\n\nExample data:\n        member_id first_name last_name                  email position t_shirt_size          phone   zip     link_to_major\nrec1x5zBFIqoOuPW8     Angela   Sanders angela.sanders@lpu.edu   Member       Medium (651) 928-4507 55108 recxK3MHQFbR9J5uO\nrec280Sk7o31iG0Tx      Grant   Gilmour  grant.gilmour@lpu.edu   Member      X-Large   403-555-1310 29440 rec7BxKpjJ7bNph3O\nrec28ORZgcm1dtqBZ      Luisa     Guidi    luisa.guidi@lpu.edu   Member       Medium   442-555-5882 10002 recdIBgeU38UbV2sy\n==================================================\n\n\nCREATE TABLE \"attendance\" (\nlink_to_event text NOT NULL,\nlink_to_member text NOT NULL,\n    PRIMARY KEY (link_to_event, link_to_member)\n);\n\nExample data:\n    link_to_event    link_to_member\nrec2N69DMcrqN9PJC recD078PnS3x2doBe\nrec2N69DMcrqN9PJC recP6DJPyi5donvXL\nrec2N69DMcrqN9PJC rec28ORZgcm1dtqBZ\n==================================================\n\n\nCREATE TABLE \"event\" (\nevent_id text NOT NULL,\nevent_name text NULL,\nevent_date text NULL,\ntype text NULL,\nnotes text NULL,\nlocation text NULL,\nstatus text NULL,\n    PRIMARY KEY (event_id)\n);\n\nExample data:\n         event_id                 event_name          event_date     type location status\nrec0Si5cQ4rJRVzd6              March Meeting 2020-03-10T12:00:00  Meeting   MU 215   Open\nrec0akZnLLpGUloLH Officers meeting - January 2020-01-14T09:30:00  Meeting     None   Open\nrec0dZPcWXF0QjNnE           Spring Elections 2019-11-24T09:00:00 Election   MU 215   Open\n==================================================\n\n\nCREATE TABLE \"major\" (\nmajor_id text NOT NULL,\nmajor_name text NULL,\ndepartment text NULL,\ncollege text NULL,\n    PRIMARY KEY (major_id)\n);\n\nExample data:\n         major_id                             major_name                                           department                                     college\nrec06DF6vZ1CyPKpc Outdoor Product Design and Development School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec09LedkREyskCNv             Agricultural Communication School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences\nrec0Eanv576RhQllI         Fisheries and Aquatic Sciences                        Watershed Sciences Department                College of Natural Resources\n==================================================\n\n********************Database: student_club********************\n\n# User Query:\nThe data in the event_attendance table looks like this:\\n| MemberID | EventID | EventType | AttendanceDate |\\n| -------- | ------- | --------- | -------------- |\\n| 1        | 101     | Game      | 2023-01-01     |\\n| 1        | 102     | Game      | 2023-01-10     |\\n| 1        | 103     | Game      | 2023-02-15     |\\n| 1        | 104     | Game      | 2023-02-20     |\\n| 1        | 105     | Workshop  | 2023-03-01     |\\n| 1        | 106     | Workshop  | 2023-03-20     |\\n| 2        | 107     | Game      | 2023-01-15     |\\n| 2        | 108     | Workshop  | 2023-02-06     |\\nWhat I am trying to build is like this:\\n| MemberID | Game_AttendanceDate | Game_Attendances | Workshop_AttendanceDate | Workshop_Attendances | Total_Attendances |\\n| -------- | ------------------- | ---------------- | ----------------------- | ---------------------- | ------------------- |\\n| 1        | 2023-02-20          | 4                | 2023-03-20              | 2                    | 6                   |\\n| 2        | 2023-01-15          | 1                | 2023-02-06              | 1                    | 2                   |\\nThe data should be one row for each member.\\nColumn definitions of the expected output:\\nGame_AttendanceDate : Latest attendance date based on date where EventType = 'Game'\\nGame_Attendances: Total number of Game events attended by each member.\\nWorkshop_AttendanceDate: Latest attendance date based on date where EventType = 'Workshop'\\nWorkshop_Attendances: Total number of Workshop events attended by each member.\\nTotal_Attendances: Total events attended by each member.\\nThe SQL Code that I have tried:\\nsql\\nselect\\n    coalesce(a.MemberID,b.MemberID) as MemberID,\\n    a.AttendanceDate as Game_AttendanceDate,\\n    Game_Attendances,\\n    b.AttendanceDate as Workshop_AttendanceDate,\\n    Workshop_Attendances,\\n    Game_Attendances + Workshop_Attendances as Total_Attendances    \\\\nfrom \\\\n(select \\\\n    MemberID, \\\\n    EventType,\\n    AttendanceDate,\\n    count(*) over(partition by MemberID,EventType) as Game_Attendances,\\n    row_number() over(partition by MemberID,EventType order by AttendanceDate desc) as RNUM\\\\nfrom event_attendance \\\\n    where EventType ='Game'\\\\n) a join (\\\\n    select \\\\n    MemberID, \\\\n    EventType,\\n    AttendanceDate,\\n    count(*) over(partition by MemberID,EventType) as Workshop_Attendances,\\n    row_number() over(partition by MemberID,EventType order by AttendanceDate desc) as RNUM\\\\nfrom event_attendance \\\\n    where EventType ='Workshop'\\\\n) b on a.MemberID = b.MemberID \\\\nwhere a.RNUM = 1 and b.RNUM = 1\\\\n\\nI have to do this calculation for another 2 categories then that will add up another 2 sub queries. Is there anyway to optimize this SQL code?\n# Error SQL:\n\nSELECT\n    COALESCE(a.MemberID, b.MemberID) AS MemberID,\n    a.AttendanceDate AS Latest_Game_Date,\n    a.Game_Attendance AS Total_Game_Attendance,\n    b.AttendanceDate AS Latest_Workshop_Date,\n    b.Workshop_Attendance AS Total_Workshop_Attendance,\n    a.Game_Attendance + b.Workshop_Attendance AS Total_Attendance\nFROM \n(\n    SELECT \n        MemberID, \n        EventType,\n        AttendanceDate,\n        COUNT(EventID) OVER(PARTITION BY MemberID, EventType) AS Game_Attendance,\n        ROW_NUMBER() OVER(PARTITION BY MemberID, EventType ORDER BY AttendanceDate DESC) AS RNUM\n    FROM event_attendance\n    WHERE EventType = 'Game'\n) a\nFULL JOIN \n(\n    SELECT \n        MemberID, \n        EventType,\n        AttendanceDate,\n        COUNT(EventID) OVER(PARTITION BY MemberID, EventType) AS Workshop_Attendance,\n        ROW_NUMBER() OVER(PARTITION BY MemberID, EventType ORDER BY AttendanceDate DESC) AS RNUM\n    FROM event_attendance\n    WHERE EventType = 'Workshop'\n) b\nON a.MemberID = b.MemberID\nWHERE (a.RNUM = 1 OR a.RNUM IS NULL) AND (b.RNUM = 1 OR b.RNUM IS NULL);\n\n\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/70824794/return-rows-where-array-column-has-match-for-every-pattern-in-given-array", "instance_id": "405_3", "selected_database": "codebase_community", "query": "I have a table named \"test\" under database \"codebase_community\". My goal is to return all rows where value contains a given array. For example:['friend', 'cat'] should return rows 1 and 2.['%friend%', '%cat%'] should return rows 1, 2 and 4.Currently I'm using this command but it's not working for example 2 listed above, when (array['%friend%', '%cat%']::varchar[]).As it works for example 1, I think the problem is with the % symbols, but I don't know how to handle this, since I don't need to explicitly match the values.", "error_sql": ["\nSELECT DISTINCT id, value\nFROM test\nWHERE value @> (ARRAY['friend', 'cat']::VARCHAR[]);\n"], "sol_sql": ["\nSELECT t.id, t.value\nFROM   test t\nWHERE  NOT EXISTS (\n   SELECT FROM unnest('{%friend%, %cat%}'::text[]) AS p(pattern)\n   WHERE  NOT EXISTS (\n      SELECT FROM unnest(t.value) AS a(elem)\n      WHERE  a.elem LIKE p.pattern\n      )\n   )\n"], "preprocess_sql": ["\nCREATE TABLE test (\n    id INT PRIMARY KEY,\n    value TEXT[]\n);\n\nINSERT INTO test (id, value) VALUES\n(1, ARRAY['friend', 'apple', 'cat']),\n(2, ARRAY['cat', 'friend', 'dog']),\n(3, ARRAY['pasta', 'best-friend', 'lizard']),\n(4, ARRAY['wildcat', 'potato', 'alices-friend']);\n"], "clean_up_sql": ["DROP TABLE test;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert len(pred_query_result) == 3, f'Expected 3 rows, but found {len(pred_query_result)} rows'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert pred_query_result[0][0] == 1, f'Expected id to be 1, but found {pred_query_result[0][0]}'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert pred_query_result[2][1] == ['wildcat', 'potato', 'alices-friend'], f\"Expected value to be ['wildcat', 'potato', 'alices-friend'], but found {pred_query_result[2][1]}\"\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert pred_query_result[2][0] == 4, f'Expected id to be 4, but found {pred_query_result[2][0]}'\n    "], "status": "success", "error_message": null, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: codebase_community********************\nCREATE TABLE \"postlinks\" (\nid bigint NOT NULL,\ncreationdate timestamp with time zone NULL,\npostid bigint NULL,\nrelatedpostid bigint NULL,\nlinktypeid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id              creationdate  postid  relatedpostid  linktypeid\n108 2010-07-21 14:47:33+08:00     395            173           1\n145 2010-07-23 16:30:41+08:00     548            539           1\n217 2010-07-26 20:12:15+08:00     375             30           1\n==================================================\n\n\nCREATE TABLE \"posthistory\" (\nid bigint NOT NULL,\nposthistorytypeid bigint NULL,\npostid bigint NULL,\nrevisionguid text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\ntext text NULL,\ncomment text NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  posthistorytypeid  postid                         revisionguid              creationdate  userid comment userdisplayname\n  1                  2       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  2                  1       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n  3                  3       1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12+08:00       8                        \n==================================================\n\n\nCREATE TABLE \"badges\" (\nid bigint NOT NULL,\nuserid bigint NULL,\nname text NULL,\ndate timestamp with time zone NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  userid    name                      date\n  1       5 Teacher 2010-07-19 19:39:07+08:00\n  2       6 Teacher 2010-07-19 19:39:07+08:00\n  3       8 Teacher 2010-07-19 19:39:07+08:00\n==================================================\n\n\nCREATE TABLE \"posts\" (\nid bigint NOT NULL,\nposttypeid bigint NULL,\nacceptedanswerid bigint NULL,\ncreaiondate timestamp with time zone NULL,\nscore bigint NULL,\nviewcount bigint NULL,\nbody text NULL,\nowneruserid bigint NULL,\nlasactivitydate timestamp with time zone NULL,\ntitle text NULL,\ntags text NULL,\nanswercount bigint NULL,\ncommentcount bigint NULL,\nfavoritecount bigint NULL,\nlasteditoruserid bigint NULL,\nlasteditdate timestamp with time zone NULL,\ncommunityowneddate timestamp with time zone NULL,\nparentid bigint NULL,\ncloseddate timestamp with time zone NULL,\nownerdisplayname text NULL,\nlasteditordisplayname text NULL,\n    PRIMARY KEY (id),\n    FOREIGN KEY (lasteditoruserid) REFERENCES users(id),\n    FOREIGN KEY (owneruserid) REFERENCES users(id)\n);\n\nExample data:\n id  posttypeid  acceptedanswerid               creaiondate  score  viewcount  owneruserid           lasactivitydate                                                             title                           tags  answercount  commentcount  favoritecount  lasteditoruserid              lasteditdate        communityowneddate parentid closeddate ownerdisplayname lasteditordisplayname\n  1           1                15 2010-07-19 19:12:12+08:00     23       1278            8 2010-09-15 21:08:26+08:00                                     Eliciting priors from experts <bayesian><prior><elicitation>            5             1             14               NaN                       NaT                       NaT     None       None             None                  None\n  2           1                59 2010-07-19 19:12:57+08:00     22       8198           24 2012-11-12 09:21:54+08:00                                                What is normality?     <distributions><normality>            7             1              8              88.0 2010-08-07 17:56:44+08:00                       NaT     None       None             None                  None\n  3           1                 5 2010-07-19 19:13:28+08:00     54       3613           18 2013-05-27 14:48:36+08:00 What are some valuable Statistical Analysis open source projects?        <software><open-source>           19             4             36             183.0 2011-02-12 05:50:03+08:00 2010-07-19 19:13:28+08:00     None       None             None                  None\n==================================================\n\n\nCREATE TABLE \"users\" (\nid bigint NOT NULL,\nreputation bigint NULL,\ncreationdate timestamp with time zone NULL,\ndisplayname text NULL,\nlastaccessdate timestamp with time zone NULL,\nwebsiteurl text NULL,\nlocation text NULL,\naboutme text NULL,\nviews bigint NULL,\nupvotes bigint NULL,\ndownvotes bigint NULL,\naccountid bigint NULL,\nage bigint NULL,\nprofileimageurl text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  reputation              creationdate  displayname            lastaccessdate                     websiteurl           location  views  upvotes  downvotes  accountid  age\n -1           1 2010-07-19 06:55:26+08:00    Community 2010-07-19 06:55:26+08:00 http://meta.stackexchange.com/ on the server farm      0     5007       1920         -1  NaN\n  2         101 2010-07-19 14:01:36+08:00 Geoff Dalgas 2013-11-12 22:07:23+08:00       http://stackoverflow.com      Corvallis, OR     25        3          0          2 37.0\n  3         101 2010-07-19 15:34:50+08:00 Jarrod Dixon 2014-08-08 06:42:58+08:00       http://stackoverflow.com       New York, NY     22       19          0          3 35.0\n==================================================\n\n\nCREATE TABLE \"tags\" (\nid bigint NOT NULL,\ntagname text NULL,\ncount bigint NULL,\nexcerptpostid bigint NULL,\nwikipostid bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id     tagname  count  excerptpostid  wikipostid\n  1    bayesian   1342        20258.0     20257.0\n  2       prior    168        62158.0     62157.0\n  3 elicitation      6            NaN         NaN\n==================================================\n\n\nCREATE TABLE \"votes\" (\nid bigint NOT NULL,\npostid bigint NULL,\nvotetypeid bigint NULL,\ncreationdate date NULL,\nuserid bigint NULL,\nbountyamount bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  votetypeid creationdate userid bountyamount\n  1       3           2   2010-07-19   None         None\n  2       2           2   2010-07-19   None         None\n  3       5           2   2010-07-19   None         None\n==================================================\n\n\nCREATE TABLE \"comments\" (\nid bigint NOT NULL,\npostid bigint NULL,\nscore bigint NULL,\ntext text NULL,\ncreationdate timestamp with time zone NULL,\nuserid bigint NULL,\nuserdisplayname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  postid  score              creationdate  userid userdisplayname\n  1       3      5 2010-07-19 19:15:52+08:00      13            None\n  2       5      0 2010-07-19 19:16:14+08:00      13            None\n  3       9      0 2010-07-19 19:18:54+08:00      13            None\n==================================================\n\n********************Database: codebase_community********************\n\n# User Query:\nI have a table named \"test\" under database \"codebase_community\". My goal is to return all rows where value contains a given array. For example:['friend', 'cat'] should return rows 1 and 2.['%friend%', '%cat%'] should return rows 1, 2 and 4.Currently I'm using this command but it's not working for example 2 listed above, when (array['%friend%', '%cat%']::varchar[]).As it works for example 1, I think the problem is with the % symbols, but I don't know how to handle this, since I don't need to explicitly match the values.\n# Error SQL:\n\nSELECT DISTINCT id, value\nFROM test\nWHERE value @> (ARRAY['friend', 'cat']::VARCHAR[]);\n\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/75292518/how-to-filter-a-value-of-nested-key-of-json", "instance_id": "510_3", "selected_database": "financial", "query": "In the financial database, there is a table named 'account_info' that stores the detailed information of accounts. Each row in the table includes an array in the 'condition' column, which contains various conditions related to the account. We need to find all qualifying accounts where the 'condition' column contains a condition with a specific 'rootcompanyid' value of 5. The current query is only returning the last row that matches the condition, but we need all rows that have this 'rootcompanyid' value in any part of the array.", "error_sql": ["SELECT *  FROM account_info WHERE ((condition->0->>'conditions')::json->>'rootcompanyid')::json->>'$in' = '[5]';"], "sol_sql": ["SELECT * FROM account_info WHERE condition::jsonb @> '[ { \"conditions\": { \"rootcompanyid\": { \"$in\": [5] } } } ]'"], "preprocess_sql": ["CREATE TABLE IF NOT EXISTS account_info (account_id INTEGER, condition JSONB);", "INSERT INTO account_info (account_id, condition) VALUES (1, '[{\"action\":\"read\",\"subject\":\"rootcompany\",\"conditions\":{\"rootcompanyid\":{\"$in\":[35,20,5,6]}}}]'::jsonb), (2, '[{\"action\":\"read\",\"subject\":\"rootcompany\",\"conditions\":{\"rootcompanyid\":{\"$in\":[1,4,2,3,6]}}}]'::jsonb), (3, '[{\"action\":\"read\",\"subject\":\"rootcompany\",\"conditions\":{\"rootcompanyid\":{\"$in\":[5]}}}]'::jsonb);"], "clean_up_sql": ["DROP TABLE IF EXISTS account_info;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    assert len(pred_query_result) == 2, f'Expected 2 rows, but found {len(pred_query_result)} row(s).'\n    assert pred_query_result[0][0] == 1, f'Expected the account_id is 1, but found {pred_query_result[0][0]}'\n    assert pred_query_result[1][0] == 3, f'Expected the account_id is 3, but found {pred_query_result[1][0]}'"], "external_data": "{\"action\":\"read\",\"subject\":\"rootcompany\",\"conditions\":{\"rootcompanyid\":{\"$in\":[35,20,5,6]}}}, {\"action\":\"read\",\"subject\":\"rootcompany\",\"conditions\":{\"rootcompanyid\":{\"$in\":[1,4,2,3,6]}}}, {\"action\":\"read\",\"subject\":\"rootcompany\",\"conditions\":{\"rootcompanyid\":{\"$in\":[5]}}}", "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, there is a table named 'account_info' that stores the detailed information of accounts. Each row in the table includes an array in the 'condition' column, which contains various conditions related to the account. We need to find all qualifying accounts where the 'condition' column contains a condition with a specific 'rootcompanyid' value of 5. The current query is only returning the last row that matches the condition, but we need all rows that have this 'rootcompanyid' value in any part of the array.\n# Error SQL:\nSELECT *  FROM account_info WHERE ((condition->0->>'conditions')::json->>'rootcompanyid')::json->>'$in' = '[5]';\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74978371/how-to-enforce-a-uniqueness-constraint-in-a-sql-database-based-on-a-certain-cond", "instance_id": "511_2", "selected_database": "superhero", "query": "I am working on a superhero database and have a table called 'hero_power' that records the powers of each superhero. Currently, the combination of 'hero_id' and 'power_id' is supposed to be unique, meaning that a superhero cannot have the same power listed more than once. However, this is not quite what I want. Instead, I would want the combination 'hero_id' and 'power_id' to be unique only in cases where the power is currently active. In other words, a superhero should be able to have multiple instances of the same power listed if the power is inactive, but should not be allowed to have duplicates that are active. Is there a way to enforce this in this table?", "error_sql": ["ALTER TABLE hero_power ADD CONSTRAINT unique_active_hero_power UNIQUE (hero_id, power_id);"], "sol_sql": ["CREATE UNIQUE INDEX idx_hero_power_active ON hero_power (hero_id, power_id) WHERE active;"], "preprocess_sql": ["ALTER TABLE hero_power ADD COLUMN active BOOLEAN DEFAULT TRUE;"], "clean_up_sql": ["ALTER TABLE hero_power DROP COLUMN IF EXISTS active;", "DROP INDEX IF EXISTS idx_hero_power_active;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    try:\n        insert_sql_1 = execute_queries(['INSERT INTO hero_power (hero_id, power_id, active) VALUES (1, 1, TRUE);'], db_name, conn)[0];\n        assert False, 'Inserting duplicate id should have raised an error'\n    except Exception as err:\n        assert 'duplicate' in str(err), f'Expected duplicate key error, but found {err}.'\n    check_insertion_result_1 = execute_queries(['SELECT COUNT(*) FROM hero_power WHERE hero_id = 1 AND power_id = 1;'], db_name, conn)[0];\n    assert check_insertion_result_1[0][0] == 1, 'Expected only 1 entry for hero_id 1 and power_id 1.'\n    insert_sql_2 = execute_queries(['INSERT INTO hero_power (hero_id, power_id, active) VALUES (1, 1, FALSE);'], db_name, conn)[0];\n    check_insertion_result_2 = execute_queries(['SELECT COUNT(*) FROM hero_power WHERE hero_id = 1 AND power_id = 1;'], db_name, conn)[0];\n    assert check_insertion_result_2[0][0] == 2, 'Expected two entries for hero_id 1 and power_id 1, one active and one inactive.'\n    insert_sql_3 = execute_queries(['INSERT INTO hero_power (hero_id, power_id, active) VALUES (1, 1, FALSE);'], db_name, conn)[0];\n    check_insertion_result_3 = execute_queries(['SELECT COUNT(*) FROM hero_power WHERE hero_id = 1 AND power_id = 1;'], db_name, conn)[0];\n    assert check_insertion_result_3[0][0] == 3, 'Expected three entries for hero_id 1 and power_id 1, one active and two inactive.'"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: superhero********************\nCREATE TABLE \"gender\" (\nid bigint NOT NULL,\ngender text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id gender\n  1   Male\n  2 Female\n  3    N/A\n==================================================\n\n\nCREATE TABLE \"superpower\" (\nid bigint NOT NULL,\npower_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id          power_name\n  1             Agility\n  2 Accelerated Healing\n  3  Lantern Power Ring\n==================================================\n\n\nCREATE TABLE \"publisher\" (\nid bigint NOT NULL,\npublisher_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    publisher_name\n  1                  \n  2       ABC Studios\n  3 Dark Horse Comics\n==================================================\n\n\nCREATE TABLE \"superhero\" (\nid bigint NOT NULL,\nsuperhero_name text NULL,\nfull_name text NULL,\ngender_id bigint NULL,\neye_colour_id bigint NULL,\nhair_colour_id bigint NULL,\nskin_colour_id bigint NULL,\nrace_id bigint NULL,\npublisher_id bigint NULL,\nalignment_id bigint NULL,\nheight_cm bigint NULL,\nweight_kg bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id superhero_name              full_name  gender_id  eye_colour_id  hair_colour_id  skin_colour_id  race_id  publisher_id  alignment_id  height_cm  weight_kg\n  1        3-D Man       Charles Chandler          1              9              13               1        1            13             1        188         90\n  2         A-Bomb Richard Milhouse Jones          1             33               1               1       24            13             1        203        441\n  3     Abe Sapien         Abraham Sapien          1              7               1               7       33             3             1        191         65\n==================================================\n\n\nCREATE TABLE \"colour\" (\nid bigint NOT NULL,\ncolour text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    colour\n  1 No Colour\n  2     Amber\n  3    Auburn\n==================================================\n\n\nCREATE TABLE \"attribute\" (\nid bigint NOT NULL,\nattribute_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id attribute_name\n  1   Intelligence\n  2       Strength\n  3          Speed\n==================================================\n\n\nCREATE TABLE \"hero_power\" (\nhero_id bigint NULL,\npower_id bigint NULL\n);\n\nExample data:\n hero_id  power_id\n       1         1\n       1        18\n       1        26\n==================================================\n\n\nCREATE TABLE \"race\" (\nid bigint NOT NULL,\nrace text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  race\n  1     -\n  2 Alien\n  3 Alpha\n==================================================\n\n\nCREATE TABLE \"alignment\" (\nid bigint NOT NULL,\nalignment text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id alignment\n  1      Good\n  2       Bad\n  3   Neutral\n==================================================\n\n\nCREATE TABLE \"hero_attribute\" (\nhero_id bigint NULL,\nattribute_id bigint NULL,\nattribute_value bigint NULL\n);\n\nExample data:\n hero_id  attribute_id  attribute_value\n       1             1               80\n       2             1               75\n       3             1               95\n==================================================\n\n********************Database: superhero********************\n\n# User Query:\nI am working on a superhero database and have a table called 'hero_power' that records the powers of each superhero. Currently, the combination of 'hero_id' and 'power_id' is supposed to be unique, meaning that a superhero cannot have the same power listed more than once. However, this is not quite what I want. Instead, I would want the combination 'hero_id' and 'power_id' to be unique only in cases where the power is currently active. In other words, a superhero should be able to have multiple instances of the same power listed if the power is inactive, but should not be allowed to have duplicates that are active. Is there a way to enforce this in this table?\n# Error SQL:\nALTER TABLE hero_power ADD CONSTRAINT unique_active_hero_power UNIQUE (hero_id, power_id);\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74527021/how-to-filter-based-on-events-that-have-happened-and-have-not-happened", "instance_id": "513_3", "selected_database": "toxicology", "query": "In the toxicology database, we have a table named `orders` that records the purchases made by users. Each record includes the `user_id`, `email`, `segment` (type of purchase), `destination` (location of purchase), and `revenue` (amount spent). We need to identify users who meet specific criteria based on their purchase history:\\n1) Users who have made a purchase in the `luxury` segment with a `destination` of `New York`.\\n2) Users who have made a purchase in the `luxury` segment with a `destination` of `London`.\\n3) Users who have made purchases in the `basic` segment with a `destination` of `New York` and the total revenue from these purchases exceeds $2,000.\\n4) Users who have never made a purchase with a `destination` of `Miami`.\\nGiven the sample data, we expect to retrieve the following users:\\nuser_id     email \\\\(3           mike@me.com \\\\(4           sally@you.com \\\\(5           bob@gmail.com \\\\)The user attempted to use the following SQL query to get part of the required results, but it did not account for conditions 3 and 4:\\nsql \\\\(SELECT DISTINCT(user_id), email FROM orders o WHERE (o.segment = 'luxury' AND o.destination = 'New York') OR (o.segment = 'luxury' AND o.destination = 'London') \\\\)", "error_sql": ["SELECT DISTINCT(user_id), email FROM orders o WHERE (o.segment = 'luxury' AND o.destination = 'New York') OR (o.segment = 'luxury' AND o.destination = 'London')"], "sol_sql": ["SELECT DISTINCT o1.user_id, o1.email FROM orders o1 WHERE (o1.segment = 'luxury' AND o1.destination = 'New York') OR (o1.segment = 'luxury' AND o1.destination = 'London') OR (o1.segment = 'basic' AND o1.destination = 'New York' AND o1.user_id IN (SELECT o2.user_id FROM orders o2 WHERE o2.segment = 'basic' AND o2.destination = 'New York' GROUP BY o2.user_id HAVING SUM(o2.revenue) > 2000)) EXCEPT SELECT DISTINCT o3.user_id, o3.email FROM orders o3 WHERE o3.destination = 'Miami'"], "preprocess_sql": ["CREATE TABLE orders (user_id INT, email TEXT, segment TEXT, destination TEXT, revenue NUMERIC); INSERT INTO orders (user_id, email, segment, destination, revenue) VALUES (1, 'joe@smith.com', 'basic', 'New York', 500), (1, 'joe@smith.com', 'luxury', 'London', 750), (1, 'joe@smith.com', 'luxury', 'London', 500), (1, 'joe@smith.com', 'basic', 'New York', 625), (1, 'joe@smith.com', 'basic', 'Miami', 925), (1, 'joe@smith.com', 'basic', 'Los Angeles', 218), (1, 'joe@smith.com', 'basic', 'Sydney', 200), (2, 'mary@jones.com', 'basic', 'Chicago', 375), (2, 'mary@jones.com', 'luxury', 'New York', 1500), (2, 'mary@jones.com', 'basic', 'Toronto', 2800), (2, 'mary@jones.com', 'basic', 'Miami', 750), (2, 'mary@jones.com', 'basic', 'New York', 500), (2, 'mary@jones.com', 'basic', 'New York', 625), (3, 'mike@me.com', 'luxury', 'New York', 650), (3, 'mike@me.com', 'basic', 'New York', 875), (4, 'sally@you.com', 'luxury', 'Chicago', 1300), (4, 'sally@you.com', 'basic', 'New York', 1200), (4, 'sally@you.com', 'basic', 'New York', 1000), (4, 'sally@you.com', 'luxury', 'Sydney', 725), (5, 'bob@gmail.com', 'basic', 'London', 500), (5, 'bob@gmail.com', 'luxury', 'London', 750);"], "clean_up_sql": ["DROP TABLE orders;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: toxicology********************\nCREATE TABLE \"bond\" (\nbond_id text NOT NULL,\nmolecule_id text NULL,\nbond_type text NULL,\n    PRIMARY KEY (bond_id),\n    FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id)\n);\n\nExample data:\n  bond_id molecule_id bond_type\nTR000_1_2       TR000         -\nTR000_2_3       TR000         -\nTR000_2_4       TR000         -\n==================================================\n\n\nCREATE TABLE \"molecule\" (\nmolecule_id text NOT NULL,\nlabel text NULL,\n    PRIMARY KEY (molecule_id)\n);\n\nExample data:\nmolecule_id label\n      TR000     +\n      TR001     +\n      TR002     -\n==================================================\n\n\nCREATE TABLE \"atom\" (\natom_id text NOT NULL,\nmolecule_id text NULL,\nelement text NULL,\n    PRIMARY KEY (atom_id),\n    FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id)\n);\n\nExample data:\natom_id molecule_id element\nTR000_1       TR000      cl\nTR000_2       TR000       c\nTR000_3       TR000      cl\n==================================================\n\n\nCREATE TABLE \"connected\" (\natom_id text NOT NULL,\natom_id2 text NOT NULL,\nbond_id text NULL,\n    PRIMARY KEY (atom_id, atom_id2)\n);\n\nExample data:\natom_id atom_id2   bond_id\nTR000_1  TR000_2 TR000_1_2\nTR000_2  TR000_1 TR000_1_2\nTR000_2  TR000_3 TR000_2_3\n==================================================\n\n********************Database: toxicology********************\n\n# User Query:\nIn the toxicology database, we have a table named `orders` that records the purchases made by users. Each record includes the `user_id`, `email`, `segment` (type of purchase), `destination` (location of purchase), and `revenue` (amount spent). We need to identify users who meet specific criteria based on their purchase history:\\n1) Users who have made a purchase in the `luxury` segment with a `destination` of `New York`.\\n2) Users who have made a purchase in the `luxury` segment with a `destination` of `London`.\\n3) Users who have made purchases in the `basic` segment with a `destination` of `New York` and the total revenue from these purchases exceeds $2,000.\\n4) Users who have never made a purchase with a `destination` of `Miami`.\\nGiven the sample data, we expect to retrieve the following users:\\nuser_id     email \\\\(3           mike@me.com \\\\(4           sally@you.com \\\\(5           bob@gmail.com \\\\)The user attempted to use the following SQL query to get part of the required results, but it did not account for conditions 3 and 4:\\nsql \\\\(SELECT DISTINCT(user_id), email FROM orders o WHERE (o.segment = 'luxury' AND o.destination = 'New York') OR (o.segment = 'luxury' AND o.destination = 'London') \\\\)\n# Error SQL:\nSELECT DISTINCT(user_id), email FROM orders o WHERE (o.segment = 'luxury' AND o.destination = 'New York') OR (o.segment = 'luxury' AND o.destination = 'London')\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74813794/sorting-varchar-version-in-postgres", "instance_id": "512_1", "selected_database": "formula_1", "query": "In the Formula 1 database, there is a table named 'cars' which contains the information of cars. Each entry includes a 'version' column that records the version of the car used by the driver in the race. The version numbers are in a format similar to '3.0.5-1-test-dev' and need to be sorted correctly to determine the latest version used in a race. However, the current sorting method does not handle multi-digit numbers correctly and fails when the version includes additional string information after the numeric version. The task is to write a query that correctly sorts the versions. If the table is sorted, I can get the latest version by select the first one.", "error_sql": ["SELECT version FROM cars ORDER BY SUBSTRING(version, '^[0-9]+') DESC, SUBSTRING(version, '[0-9]+\\.[0-9]+\\.([0-9]+)-') DESC, CAST(SUBSTRING(version, '[0-9]+\\.[0-9]+\\.[0-9]+-([0-9]+)') AS INTEGER) DESC, SUBSTRING(version, '[0-9]+\\.[0-9]+\\.[0-9]+-[0-9]+\\.([0-9]+)') DESC"], "sol_sql": ["SELECT version FROM cars ORDER BY CAST(SUBSTRING(version FROM '^[0-9]+') AS INTEGER) DESC, CAST(SUBSTRING(version FROM '[0-9]+\\.[0-9]+\\.([0-9]+)') AS INTEGER) DESC, CAST(SUBSTRING(version FROM '[0-9]+\\.[0-9]+\\.[0-9]+-([0-9]+)') AS INTEGER) DESC, CASE WHEN version LIKE '%-%' THEN SUBSTRING(version FROM '-(.*)') ELSE '' END DESC;"], "preprocess_sql": ["CREATE TABLE cars (version varchar(100))", "INSERT INTO cars (version) VALUES ('3.0.5-1-test-dev'), ('3.0.6-1'), ('3.0.7-1-test'), ('3.0.8-1-test-dev-test23'), ('3.0.9-1'), ('3.0.13-2'), ('3.0.4-1-1'), ('3.0.10-1'), ('3.0.11-2'), ('3.0.11-1')"], "clean_up_sql": ["DROP TABLE cars;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls_result = execute_queries(pred_sqls, db_name, conn)\n    sol_sqls_result = execute_queries(sol_sqls, db_name, conn)\n    assert pred_sqls_result == sol_sqls_result, f\"Expected pred_result and sol_result are the same but pred_result is {pred_sqls_result} and sol_result is {sol_sqls_result}.\"\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: formula_1********************\nCREATE TABLE \"circuits\" (\ncircuitid bigint NOT NULL DEFAULT nextval('circuits_circuitid_seq'::regclass),\ncircuitref text NULL DEFAULT ''::text,\nname text NULL DEFAULT ''::text,\nlocation text NULL,\ncountry text NULL,\nlat real NULL,\nlng real NULL,\nalt bigint NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (circuitid)\n);\n\nExample data:\n circuitid circuitref                           name     location  country      lat       lng  alt                                                         url\n         2     sepang   Sepang International Circuit Kuala Lumpur Malaysia  2.76083 101.73800 None   http://en.wikipedia.org/wiki/Sepang_International_Circuit\n         3    bahrain  Bahrain International Circuit       Sakhir  Bahrain 26.03250  50.51060 None  http://en.wikipedia.org/wiki/Bahrain_International_Circuit\n         4  catalunya Circuit de Barcelona-Catalunya     Montmeló    Spain 41.57000   2.26111 None http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya\n==================================================\n\n\nCREATE TABLE \"status\" (\nstatusid bigint NOT NULL DEFAULT nextval('status_statusid_seq'::regclass),\nstatus text NULL DEFAULT ''::text,\n    PRIMARY KEY (statusid)\n);\n\nExample data:\n statusid       status\n        1     Finished\n        2 Disqualified\n        3     Accident\n==================================================\n\n\nCREATE TABLE \"drivers\" (\ndriverid bigint NOT NULL DEFAULT nextval('drivers_driverid_seq'::regclass),\ndriverref text NULL DEFAULT ''::text,\nnumber bigint NULL,\ncode text NULL,\nforename text NULL DEFAULT ''::text,\nsurname text NULL DEFAULT ''::text,\ndob date NULL,\nnationality text NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (driverid)\n);\n\nExample data:\n driverid driverref  number code forename  surname        dob nationality                                         url\n        1  hamilton    44.0  HAM    Lewis Hamilton 1985-01-07     British http://en.wikipedia.org/wiki/Lewis_Hamilton\n        2  heidfeld     NaN  HEI     Nick Heidfeld 1977-05-10      German  http://en.wikipedia.org/wiki/Nick_Heidfeld\n        3   rosberg     6.0  ROS     Nico  Rosberg 1985-06-27      German   http://en.wikipedia.org/wiki/Nico_Rosberg\n==================================================\n\n\nCREATE TABLE \"driverstandings\" (\ndriverstandingsid bigint NOT NULL DEFAULT nextval('driverstandings_driverstandingsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nposition bigint NULL,\npositiontext text NULL,\nwins bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (driverstandingsid)\n);\n\nExample data:\n driverstandingsid  raceid  driverid  points  position  wins positiontext\n                 1      18         1    10.0         1     1            1\n                 2      18         2     8.0         2     0            2\n                 3      18         3     6.0         3     0            3\n==================================================\n\n\nCREATE TABLE \"races\" (\nraceid bigint NOT NULL DEFAULT nextval('races_raceid_seq'::regclass),\nyear bigint NULL DEFAULT '0'::bigint,\nround bigint NULL DEFAULT '0'::bigint,\ncircuitid bigint NULL DEFAULT '0'::bigint,\nname text NULL DEFAULT ''::text,\ndate date NULL,\ntime text NULL,\nurl text NULL,\n    PRIMARY KEY (raceid),\n    FOREIGN KEY (year) REFERENCES seasons(year)\n);\n\nExample data:\n raceid  year  round  circuitid                 name       date     time                                                    url\n      2  2009      2          2 Malaysian Grand Prix 2009-04-05 09:00:00 http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix\n      3  2009      3         17   Chinese Grand Prix 2009-04-19 07:00:00   http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix\n      4  2009      4          3   Bahrain Grand Prix 2009-04-26 12:00:00   http://en.wikipedia.org/wiki/2009_Bahrain_Grand_Prix\n==================================================\n\n\nCREATE TABLE \"constructors\" (\nconstructorid bigint NOT NULL DEFAULT nextval('constructors_constructorid_seq'::regclass),\nconstructorref text NULL DEFAULT ''::text,\nname text NULL DEFAULT ''::text,\nnationality text NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (constructorid)\n);\n\nExample data:\n constructorid constructorref       name nationality                                                          url\n             1        mclaren    McLaren     British                         http://en.wikipedia.org/wiki/McLaren\n             2     bmw_sauber BMW Sauber      German                      http://en.wikipedia.org/wiki/BMW_Sauber\n             3       williams   Williams     British http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering\n==================================================\n\n\nCREATE TABLE \"constructorresults\" (\nconstructorresultsid bigint NOT NULL DEFAULT nextval('constructorresults_constructorresultsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\npoints real NULL,\nstatus text NULL,\n    PRIMARY KEY (constructorresultsid)\n);\n\nExample data:\n constructorresultsid  raceid  constructorid  points status\n                    1      18              1    14.0   None\n                    2      18              2     8.0   None\n                    3      18              3     9.0   None\n==================================================\n\n\nCREATE TABLE \"laptimes\" (\nraceid bigint NOT NULL,\ndriverid bigint NOT NULL,\nlap bigint NOT NULL,\nposition bigint NULL,\ntime text NULL,\nmilliseconds bigint NULL,\n    PRIMARY KEY (raceid, driverid, lap)\n);\n\nExample data:\n raceid  driverid  lap  position     time  milliseconds\n      2         1    1        10 1:52.965        112965\n      2         1    2        10 1:41.865        101865\n      2         1    3        10 1:40.869        100869\n==================================================\n\n\nCREATE TABLE \"qualifying\" (\nqualifyid bigint NOT NULL DEFAULT nextval('qualifying_qualifyid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\nnumber bigint NULL DEFAULT '0'::bigint,\nposition bigint NULL,\nq1 text NULL,\nq2 text NULL,\nq3 text NULL,\n    PRIMARY KEY (qualifyid)\n);\n\nExample data:\n qualifyid  raceid  driverid  constructorid  number  position       q1       q2       q3\n        23      19        13              6       2         1 1:35.347 1:34.412 1:35.748\n        24      19         8              6       1         2 1:35.645 1:34.188 1:36.230\n        25      19         5              1      23         3 1:35.227 1:34.759 1:36.613\n==================================================\n\n\nCREATE TABLE \"pitstops\" (\nraceid bigint NOT NULL,\ndriverid bigint NOT NULL,\nstop bigint NOT NULL,\nlap bigint NULL,\ntime text NULL,\nduration text NULL,\nmilliseconds bigint NULL,\n    PRIMARY KEY (raceid, driverid, stop)\n);\n\nExample data:\n raceid  driverid  stop  lap     time duration  milliseconds\n    842         1     1   12 16:24:40   22.552         22552\n    842         1     2   24 16:45:48   22.611         22611\n    842         1     3   37 17:08:28   25.382         25382\n==================================================\n\n\nCREATE TABLE \"seasons\" (\nyear bigint NOT NULL DEFAULT '0'::bigint,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (year)\n);\n\nExample data:\n year                                                  url\n 1950 http://en.wikipedia.org/wiki/1950_Formula_One_season\n 1951 http://en.wikipedia.org/wiki/1951_Formula_One_season\n 1952 http://en.wikipedia.org/wiki/1952_Formula_One_season\n==================================================\n\n\nCREATE TABLE \"constructorstandings\" (\nconstructorstandingsid bigint NOT NULL DEFAULT nextval('constructorstandings_constructorstandingsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nposition bigint NULL,\npositiontext text NULL,\nwins bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (constructorstandingsid)\n);\n\nExample data:\n constructorstandingsid  raceid  constructorid  points  position positiontext  wins\n                      1      18              1    14.0         1            1     1\n                      2      18              2     8.0         3            3     0\n                      3      18              3     9.0         2            2     0\n==================================================\n\n\nCREATE TABLE \"results\" (\nresultid bigint NOT NULL DEFAULT nextval('results_resultid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\nnumber bigint NULL,\ngrid bigint NULL DEFAULT '0'::bigint,\nposition bigint NULL,\npositiontext text NULL DEFAULT ''::text,\npositionorder bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nlaps bigint NULL DEFAULT '0'::bigint,\ntime text NULL,\nmilliseconds bigint NULL,\nfastestlap bigint NULL,\nrank bigint NULL DEFAULT '0'::bigint,\nfastestlaptime text NULL,\nfastestlapspeed text NULL,\nstatusid bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (resultid)\n);\n\nExample data:\n resultid  raceid  driverid  constructorid  number  grid  position positiontext  positionorder  points  laps        time  milliseconds  fastestlap  rank fastestlaptime fastestlapspeed  statusid\n       23      19         8              6       1     2         1            1              1    10.0    56 1:31:18.555       5478555          37     2       1:35.405         209.158         1\n       24      19         9              2       4     4         2            2              2     8.0    56     +19.570       5498125          39     6       1:35.921         208.033         1\n       25      19         5              1      23     8         3            3              3     6.0    56     +38.450       5517005          19     7       1:35.922         208.031         1\n==================================================\n\n********************Database: formula_1********************\n\n# User Query:\nIn the Formula 1 database, there is a table named 'cars' which contains the information of cars. Each entry includes a 'version' column that records the version of the car used by the driver in the race. The version numbers are in a format similar to '3.0.5-1-test-dev' and need to be sorted correctly to determine the latest version used in a race. However, the current sorting method does not handle multi-digit numbers correctly and fails when the version includes additional string information after the numeric version. The task is to write a query that correctly sorts the versions. If the table is sorted, I can get the latest version by select the first one.\n# Error SQL:\nSELECT version FROM cars ORDER BY SUBSTRING(version, '^[0-9]+') DESC, SUBSTRING(version, '[0-9]+\\.[0-9]+\\.([0-9]+)-') DESC, CAST(SUBSTRING(version, '[0-9]+\\.[0-9]+\\.[0-9]+-([0-9]+)') AS INTEGER) DESC, SUBSTRING(version, '[0-9]+\\.[0-9]+\\.[0-9]+-[0-9]+\\.([0-9]+)') DESC\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74462805/sql-filter-after-aggregation", "instance_id": "514_3", "selected_database": "thrombosis_prediction", "query": "In the thrombosis_prediction database, we have a set of normalized tables representing patients, medications, and their prescriptions. Each patient can be prescribed multiple medications, and each medication can be prescribed to multiple patients. For reporting purposes, we need a highly denormalized view that shows each patient's name and a list of all medications they are prescribed. However, when we filter the list to show only patients who are prescribed a specific medication (e.g., Aspirin), we lose the information about other medications those patients are prescribed. We want to filter by a specific medication but still get a list of all medications that a patient is prescribed in one row.", "error_sql": ["SELECT prescriptions.patient_id, array_agg(DISTINCT prescriptions.medication_id ORDER BY prescriptions.medication_id) AS medications FROM prescriptions INNER JOIN prescriptions AS Aspirin_filter ON prescriptions.patient_id = Aspirin_filter.patient_id AND Aspirin_filter.medication_id = 1 GROUP BY prescriptions.patient_id;"], "sol_sql": ["WITH select_patient AS ( SELECT patient_id FROM prescriptions WHERE medication_id = 1 ) SELECT patient_id, array_agg(DISTINCT medication_id ORDER BY medication_id) AS medications FROM prescriptions WHERE patient_id in (select patient_id from select_patient) GROUP BY patient_id;"], "preprocess_sql": ["CREATE TABLE patients ( patient_id SERIAL PRIMARY KEY, patient_name TEXT NOT NULL );", "CREATE TABLE medications ( medication_id SERIAL PRIMARY KEY, medication_name TEXT NOT NULL );", "CREATE TABLE prescriptions ( patient_id INT REFERENCES patients (patient_id), medication_id INT REFERENCES medications (medication_id), PRIMARY KEY (patient_id, medication_id) );", "INSERT INTO patients (patient_name) VALUES ('Alice'), ('Bob'), ('Charlie');", "INSERT INTO medications (medication_name) VALUES ('Aspirin'), ('Ibuprofen'), ('Paracetamol'), ('Warfarin');", "INSERT INTO prescriptions (patient_id, medication_id) VALUES (1, 1), (1, 2), (1, 3);", "INSERT INTO prescriptions (patient_id, medication_id) VALUES (2, 2);", "INSERT INTO prescriptions (patient_id, medication_id) VALUES (3, 2), (3, 1), (3, 3), (3, 4);"], "clean_up_sql": [], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls_result = execute_queries(pred_sqls, db_name, conn)\n    sol_sqls_result = execute_queries(sol_sqls, db_name, conn)\n    assert pred_sqls_result == sol_sqls_result, f\"Expected pred_result and sol_result are the same but pred_result is {pred_sqls_result} and sol_result is {sol_sqls_result}.\"\n    result = performance_compare_by_qep(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"performance_check returned {result} but expected 1.\"\n    return result\n    "], "efficiency": true, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: thrombosis_prediction********************\nCREATE TABLE \"laboratory\" (\nid bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ngot bigint NULL,\ngpt bigint NULL,\nldh bigint NULL,\nalp bigint NULL,\ntp real NULL,\nalb real NULL,\nua real NULL,\nun bigint NULL,\ncre real NULL,\nT-BIL real NULL,\nT-CHO bigint NULL,\ntg bigint NULL,\ncpk bigint NULL,\nglu bigint NULL,\nwbc real NULL,\nrbc real NULL,\nhgb real NULL,\nhct real NULL,\nplt bigint NULL,\npt real NULL,\naptt bigint NULL,\nfg real NULL,\nU-PRO text NULL,\nigg bigint NULL,\niga bigint NULL,\nigm bigint NULL,\ncrp text NULL,\nra text NULL,\nrf text NULL,\nc3 bigint NULL,\nc4 bigint NULL,\nrnp text NULL,\nsm text NULL,\nsc170 text NULL,\nssa text NULL,\nssb text NULL,\ncentromea text NULL,\ndna text NULL,\nDNA-II bigint NULL\n);\n\nExample data:\n   id       date  got  gpt  ldh  alp  tp  alb  ua  un  cre   tg  cpk  glu  wbc  rbc  hgb  hct  plt   pt aptt   fg   igg   iga   igm crp   ra   rf   c3   c4  rnp   sm sc170  ssa  ssb centromea  dna\n27654 1991-09-11   34   36  567  166 4.5  3.3 3.8  29  0.8 None  9.0  NaN  5.0  2.6  6.4 20.3  227 None None None 339.0 145.0  46.0 0.6 None None None None None None  None None None      None None\n27654 1991-09-17   29   31  579  154 5.1  3.4 4.2  36  0.8 None  NaN  NaN 10.4  2.9  6.7 21.6  242 None None None 771.0 188.0 132.0 0.6 None None None None None None  None None None      None None\n27654 1991-09-19   26   22  684  138 5.5  3.6 4.9  34  0.9 None  NaN 88.0 10.5  3.4  7.9 24.7  233 None None None   NaN   NaN   NaN 2.7 None None None None None None  None None None      None None\n==================================================\n\n\nCREATE TABLE \"patient\" (\nid bigint NOT NULL DEFAULT '0'::bigint,\nsex text NULL,\nbirthday date NULL,\ndescription date NULL,\nFirst Date date NULL,\nadmission text NULL,\ndiagnosis text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n   id sex   birthday description admission diagnosis\n 2110   F 1934-02-13  1994-02-14         +  RA susp.\n11408   F 1937-05-02  1996-12-01         +       PSS\n12052   F 1956-04-14  1991-08-13         +       SLE\n==================================================\n\n\nCREATE TABLE \"examination\" (\nid bigint NULL,\nExamination Date date NULL,\naCL IgG real NULL,\naCL IgM real NULL,\nana bigint NULL,\nANA Pattern text NULL,\naCL IgA bigint NULL,\ndiagnosis text NULL,\nkct text NULL,\nrvvt text NULL,\nlac text NULL,\nsymptoms text NULL,\nthrombosis bigint NULL\n);\n\nExample data:\n    id  ana diagnosis  kct rvvt  lac symptoms  thrombosis\n 14872  256 MCTD, AMI None None    -      AMI           1\n 48473  256       SLE    -    -    -     None           0\n102490    0       PSS None None None     None           0\n==================================================\n\n********************Database: thrombosis_prediction********************\n\n# User Query:\nIn the thrombosis_prediction database, we have a set of normalized tables representing patients, medications, and their prescriptions. Each patient can be prescribed multiple medications, and each medication can be prescribed to multiple patients. For reporting purposes, we need a highly denormalized view that shows each patient's name and a list of all medications they are prescribed. However, when we filter the list to show only patients who are prescribed a specific medication (e.g., Aspirin), we lose the information about other medications those patients are prescribed. We want to filter by a specific medication but still get a list of all medications that a patient is prescribed in one row.\n# Error SQL:\nSELECT prescriptions.patient_id, array_agg(DISTINCT prescriptions.medication_id ORDER BY prescriptions.medication_id) AS medications FROM prescriptions INNER JOIN prescriptions AS Aspirin_filter ON prescriptions.patient_id = Aspirin_filter.patient_id AND Aspirin_filter.medication_id = 1 GROUP BY prescriptions.patient_id;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/70743689/how-to-select-data-with-group-by-and-subquery-calculations", "instance_id": "491_1", "selected_database": "formula_1", "query": "In the context of Formula 1 racing data, I have two tables: `races` and `results`. The `races` table contains information about each race, including the `raceId` which uniquely identifies each race. The `results` table contains detailed information about the results of each race, including the `raceId` to link back to the `races` table, `driverId` to identify the driver, and `points` which represent the points scored by the driver in that race. I need to calculate the total points scored by each driver across all races, but only for races where the driver has participated. If a driver has not participated in any races, their total points should be `0`. I attempted to write a query to achieve this but encountered issues with grouping and ensuring that drivers who haven't participated in any races are included with a total of `0` points.", "error_sql": ["SELECT r.driverId, ((SELECT COALESCE(SUM(r.points), 0) FROM results r WHERE r.raceId = races.raceId) - (SELECT COALESCE(SUM(r.points), 0) FROM results r WHERE r.raceId = races.raceId)) AS total_points FROM results r GROUP BY r.driverId"], "sol_sql": ["SELECT d.driverId, COALESCE(SUM(r.points), 0) AS total_points FROM drivers d LEFT JOIN results r ON d.driverId = r.driverId GROUP BY d.driverId"], "preprocess_sql": "", "clean_up_sql": "", "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: formula_1********************\nCREATE TABLE \"circuits\" (\ncircuitid bigint NOT NULL DEFAULT nextval('circuits_circuitid_seq'::regclass),\ncircuitref text NULL DEFAULT ''::text,\nname text NULL DEFAULT ''::text,\nlocation text NULL,\ncountry text NULL,\nlat real NULL,\nlng real NULL,\nalt bigint NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (circuitid)\n);\n\nExample data:\n circuitid circuitref                           name     location  country      lat       lng  alt                                                         url\n         2     sepang   Sepang International Circuit Kuala Lumpur Malaysia  2.76083 101.73800 None   http://en.wikipedia.org/wiki/Sepang_International_Circuit\n         3    bahrain  Bahrain International Circuit       Sakhir  Bahrain 26.03250  50.51060 None  http://en.wikipedia.org/wiki/Bahrain_International_Circuit\n         4  catalunya Circuit de Barcelona-Catalunya     Montmeló    Spain 41.57000   2.26111 None http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya\n==================================================\n\n\nCREATE TABLE \"status\" (\nstatusid bigint NOT NULL DEFAULT nextval('status_statusid_seq'::regclass),\nstatus text NULL DEFAULT ''::text,\n    PRIMARY KEY (statusid)\n);\n\nExample data:\n statusid       status\n        1     Finished\n        2 Disqualified\n        3     Accident\n==================================================\n\n\nCREATE TABLE \"drivers\" (\ndriverid bigint NOT NULL DEFAULT nextval('drivers_driverid_seq'::regclass),\ndriverref text NULL DEFAULT ''::text,\nnumber bigint NULL,\ncode text NULL,\nforename text NULL DEFAULT ''::text,\nsurname text NULL DEFAULT ''::text,\ndob date NULL,\nnationality text NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (driverid)\n);\n\nExample data:\n driverid driverref  number code forename  surname        dob nationality                                         url\n        1  hamilton    44.0  HAM    Lewis Hamilton 1985-01-07     British http://en.wikipedia.org/wiki/Lewis_Hamilton\n        2  heidfeld     NaN  HEI     Nick Heidfeld 1977-05-10      German  http://en.wikipedia.org/wiki/Nick_Heidfeld\n        3   rosberg     6.0  ROS     Nico  Rosberg 1985-06-27      German   http://en.wikipedia.org/wiki/Nico_Rosberg\n==================================================\n\n\nCREATE TABLE \"driverstandings\" (\ndriverstandingsid bigint NOT NULL DEFAULT nextval('driverstandings_driverstandingsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nposition bigint NULL,\npositiontext text NULL,\nwins bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (driverstandingsid)\n);\n\nExample data:\n driverstandingsid  raceid  driverid  points  position  wins positiontext\n                 1      18         1    10.0         1     1            1\n                 2      18         2     8.0         2     0            2\n                 3      18         3     6.0         3     0            3\n==================================================\n\n\nCREATE TABLE \"races\" (\nraceid bigint NOT NULL DEFAULT nextval('races_raceid_seq'::regclass),\nyear bigint NULL DEFAULT '0'::bigint,\nround bigint NULL DEFAULT '0'::bigint,\ncircuitid bigint NULL DEFAULT '0'::bigint,\nname text NULL DEFAULT ''::text,\ndate date NULL,\ntime text NULL,\nurl text NULL,\n    PRIMARY KEY (raceid),\n    FOREIGN KEY (year) REFERENCES seasons(year)\n);\n\nExample data:\n raceid  year  round  circuitid                 name       date     time                                                    url\n      2  2009      2          2 Malaysian Grand Prix 2009-04-05 09:00:00 http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix\n      3  2009      3         17   Chinese Grand Prix 2009-04-19 07:00:00   http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix\n      4  2009      4          3   Bahrain Grand Prix 2009-04-26 12:00:00   http://en.wikipedia.org/wiki/2009_Bahrain_Grand_Prix\n==================================================\n\n\nCREATE TABLE \"constructors\" (\nconstructorid bigint NOT NULL DEFAULT nextval('constructors_constructorid_seq'::regclass),\nconstructorref text NULL DEFAULT ''::text,\nname text NULL DEFAULT ''::text,\nnationality text NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (constructorid)\n);\n\nExample data:\n constructorid constructorref       name nationality                                                          url\n             1        mclaren    McLaren     British                         http://en.wikipedia.org/wiki/McLaren\n             2     bmw_sauber BMW Sauber      German                      http://en.wikipedia.org/wiki/BMW_Sauber\n             3       williams   Williams     British http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering\n==================================================\n\n\nCREATE TABLE \"constructorresults\" (\nconstructorresultsid bigint NOT NULL DEFAULT nextval('constructorresults_constructorresultsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\npoints real NULL,\nstatus text NULL,\n    PRIMARY KEY (constructorresultsid)\n);\n\nExample data:\n constructorresultsid  raceid  constructorid  points status\n                    1      18              1    14.0   None\n                    2      18              2     8.0   None\n                    3      18              3     9.0   None\n==================================================\n\n\nCREATE TABLE \"laptimes\" (\nraceid bigint NOT NULL,\ndriverid bigint NOT NULL,\nlap bigint NOT NULL,\nposition bigint NULL,\ntime text NULL,\nmilliseconds bigint NULL,\n    PRIMARY KEY (raceid, driverid, lap)\n);\n\nExample data:\n raceid  driverid  lap  position     time  milliseconds\n      2         1    1        10 1:52.965        112965\n      2         1    2        10 1:41.865        101865\n      2         1    3        10 1:40.869        100869\n==================================================\n\n\nCREATE TABLE \"qualifying\" (\nqualifyid bigint NOT NULL DEFAULT nextval('qualifying_qualifyid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\nnumber bigint NULL DEFAULT '0'::bigint,\nposition bigint NULL,\nq1 text NULL,\nq2 text NULL,\nq3 text NULL,\n    PRIMARY KEY (qualifyid)\n);\n\nExample data:\n qualifyid  raceid  driverid  constructorid  number  position       q1       q2       q3\n        23      19        13              6       2         1 1:35.347 1:34.412 1:35.748\n        24      19         8              6       1         2 1:35.645 1:34.188 1:36.230\n        25      19         5              1      23         3 1:35.227 1:34.759 1:36.613\n==================================================\n\n\nCREATE TABLE \"pitstops\" (\nraceid bigint NOT NULL,\ndriverid bigint NOT NULL,\nstop bigint NOT NULL,\nlap bigint NULL,\ntime text NULL,\nduration text NULL,\nmilliseconds bigint NULL,\n    PRIMARY KEY (raceid, driverid, stop)\n);\n\nExample data:\n raceid  driverid  stop  lap     time duration  milliseconds\n    842         1     1   12 16:24:40   22.552         22552\n    842         1     2   24 16:45:48   22.611         22611\n    842         1     3   37 17:08:28   25.382         25382\n==================================================\n\n\nCREATE TABLE \"seasons\" (\nyear bigint NOT NULL DEFAULT '0'::bigint,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (year)\n);\n\nExample data:\n year                                                  url\n 1950 http://en.wikipedia.org/wiki/1950_Formula_One_season\n 1951 http://en.wikipedia.org/wiki/1951_Formula_One_season\n 1952 http://en.wikipedia.org/wiki/1952_Formula_One_season\n==================================================\n\n\nCREATE TABLE \"constructorstandings\" (\nconstructorstandingsid bigint NOT NULL DEFAULT nextval('constructorstandings_constructorstandingsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nposition bigint NULL,\npositiontext text NULL,\nwins bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (constructorstandingsid)\n);\n\nExample data:\n constructorstandingsid  raceid  constructorid  points  position positiontext  wins\n                      1      18              1    14.0         1            1     1\n                      2      18              2     8.0         3            3     0\n                      3      18              3     9.0         2            2     0\n==================================================\n\n\nCREATE TABLE \"results\" (\nresultid bigint NOT NULL DEFAULT nextval('results_resultid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\nnumber bigint NULL,\ngrid bigint NULL DEFAULT '0'::bigint,\nposition bigint NULL,\npositiontext text NULL DEFAULT ''::text,\npositionorder bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nlaps bigint NULL DEFAULT '0'::bigint,\ntime text NULL,\nmilliseconds bigint NULL,\nfastestlap bigint NULL,\nrank bigint NULL DEFAULT '0'::bigint,\nfastestlaptime text NULL,\nfastestlapspeed text NULL,\nstatusid bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (resultid)\n);\n\nExample data:\n resultid  raceid  driverid  constructorid  number  grid  position positiontext  positionorder  points  laps        time  milliseconds  fastestlap  rank fastestlaptime fastestlapspeed  statusid\n       23      19         8              6       1     2         1            1              1    10.0    56 1:31:18.555       5478555          37     2       1:35.405         209.158         1\n       24      19         9              2       4     4         2            2              2     8.0    56     +19.570       5498125          39     6       1:35.921         208.033         1\n       25      19         5              1      23     8         3            3              3     6.0    56     +38.450       5517005          19     7       1:35.922         208.031         1\n==================================================\n\n********************Database: formula_1********************\n\n# User Query:\nIn the context of Formula 1 racing data, I have two tables: `races` and `results`. The `races` table contains information about each race, including the `raceId` which uniquely identifies each race. The `results` table contains detailed information about the results of each race, including the `raceId` to link back to the `races` table, `driverId` to identify the driver, and `points` which represent the points scored by the driver in that race. I need to calculate the total points scored by each driver across all races, but only for races where the driver has participated. If a driver has not participated in any races, their total points should be `0`. I attempted to write a query to achieve this but encountered issues with grouping and ensuring that drivers who haven't participated in any races are included with a total of `0` points.\n# Error SQL:\nSELECT r.driverId, ((SELECT COALESCE(SUM(r.points), 0) FROM results r WHERE r.raceId = races.raceId) - (SELECT COALESCE(SUM(r.points), 0) FROM results r WHERE r.raceId = races.raceId)) AS total_points FROM results r GROUP BY r.driverId\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/78955403/total-and-sum-of-two-columns-in-a-single-query", "instance_id": "492_1", "selected_database": "superhero", "query": "In the context of the superhero database, I need to calculate the total count of superheroes by their alignment and also display the count of superheroes for each specific alignment and race combination. I attempted to write a query to achieve this but it doesn't provide the total count by alignment as I expected. Here's what I tried:", "error_sql": ["select count(S.id), A.alignment, count(R.race), R.race from superhero S, alignment A, race R where S.alignment_id=A.id and S.race_id=R.id group by A.alignment, R.race;"], "sol_sql": ["SELECT \n    sqA.alignment_count     AS total_by_alignment,\n    A.alignment             AS alignment,\n    R.race                  AS race,\n    sqAR.alignment_race_count AS count_by_alignment_race\nFROM\n    (\n       SELECT\n           alignment_id,\n           COUNT(*) AS alignment_count\n       FROM superhero\n       GROUP BY alignment_id\n    ) sqA\n\n    INNER JOIN\n    (\n       SELECT\n           alignment_id,\n           race_id,\n           COUNT(*) AS alignment_race_count\n       FROM superhero\n       GROUP BY alignment_id, race_id\n    ) sqAR ON sqA.alignment_id = sqAR.alignment_id\n\n    INNER JOIN alignment A ON sqA.alignment_id = A.id\n\n    INNER JOIN race R ON sqAR.race_id = R.id\nORDER BY\n    A.alignment,\n    R.race;"], "preprocess_sql": "", "clean_up_sql": "", "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: superhero********************\nCREATE TABLE \"gender\" (\nid bigint NOT NULL,\ngender text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id gender\n  1   Male\n  2 Female\n  3    N/A\n==================================================\n\n\nCREATE TABLE \"superpower\" (\nid bigint NOT NULL,\npower_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id          power_name\n  1             Agility\n  2 Accelerated Healing\n  3  Lantern Power Ring\n==================================================\n\n\nCREATE TABLE \"publisher\" (\nid bigint NOT NULL,\npublisher_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    publisher_name\n  1                  \n  2       ABC Studios\n  3 Dark Horse Comics\n==================================================\n\n\nCREATE TABLE \"superhero\" (\nid bigint NOT NULL,\nsuperhero_name text NULL,\nfull_name text NULL,\ngender_id bigint NULL,\neye_colour_id bigint NULL,\nhair_colour_id bigint NULL,\nskin_colour_id bigint NULL,\nrace_id bigint NULL,\npublisher_id bigint NULL,\nalignment_id bigint NULL,\nheight_cm bigint NULL,\nweight_kg bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id superhero_name              full_name  gender_id  eye_colour_id  hair_colour_id  skin_colour_id  race_id  publisher_id  alignment_id  height_cm  weight_kg\n  1        3-D Man       Charles Chandler          1              9              13               1        1            13             1        188         90\n  2         A-Bomb Richard Milhouse Jones          1             33               1               1       24            13             1        203        441\n  3     Abe Sapien         Abraham Sapien          1              7               1               7       33             3             1        191         65\n==================================================\n\n\nCREATE TABLE \"colour\" (\nid bigint NOT NULL,\ncolour text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    colour\n  1 No Colour\n  2     Amber\n  3    Auburn\n==================================================\n\n\nCREATE TABLE \"attribute\" (\nid bigint NOT NULL,\nattribute_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id attribute_name\n  1   Intelligence\n  2       Strength\n  3          Speed\n==================================================\n\n\nCREATE TABLE \"hero_power\" (\nhero_id bigint NULL,\npower_id bigint NULL\n);\n\nExample data:\n hero_id  power_id\n       1         1\n       1        18\n       1        26\n==================================================\n\n\nCREATE TABLE \"race\" (\nid bigint NOT NULL,\nrace text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  race\n  1     -\n  2 Alien\n  3 Alpha\n==================================================\n\n\nCREATE TABLE \"alignment\" (\nid bigint NOT NULL,\nalignment text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id alignment\n  1      Good\n  2       Bad\n  3   Neutral\n==================================================\n\n\nCREATE TABLE \"hero_attribute\" (\nhero_id bigint NULL,\nattribute_id bigint NULL,\nattribute_value bigint NULL\n);\n\nExample data:\n hero_id  attribute_id  attribute_value\n       1             1               80\n       2             1               75\n       3             1               95\n==================================================\n\n********************Database: superhero********************\n\n# User Query:\nIn the context of the superhero database, I need to calculate the total count of superheroes by their alignment and also display the count of superheroes for each specific alignment and race combination. I attempted to write a query to achieve this but it doesn't provide the total count by alignment as I expected. Here's what I tried:\n# Error SQL:\nselect count(S.id), A.alignment, count(R.race), R.race from superhero S, alignment A, race R where S.alignment_id=A.id and S.race_id=R.id group by A.alignment, R.race;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/70842623/does-postgres-window-function-perform-an-implicit-filtering-when-using-order-by", "instance_id": "490_1", "selected_database": "formula_1", "query": "In the context of analyzing Formula 1 race results, I'm trying to understand the behavior of window functions in PostgreSQL. Specifically, I'm looking at the `array_agg` function with and without an `ORDER BY` clause within a window function. I expect both to return the same result since no filtering is applied, but they don't. Here's the scenario: I have a table of race results, and I want to aggregate the driver IDs in two ways: one with an order by the points they scored in the race, and another without any order. The results seem to suggest that ordering the partition affects the aggregation, which is confusing. Here's the SQL I used:", "error_sql": ["select driverId, points, lead(driverId) over (order by points asc) as \"lead(driverId) with order\", array_agg(driverId) over (order by points asc) as \"array_agg(driverId) with order\", lead(driverId) over () as \"lead(driverId) without order\", array_agg(driverId) over () as \"array_agg(driverId) without order\" from results where raceId = 19 order by driverId asc"], "sol_sql": ["select driverId, points, array_agg(driverId) over (order by points asc) as \"array_agg(driverId) with order\", array_agg(driverId) over () as \"array_agg(driverId) without order\" from results where raceId = 19 order by driverId asc"], "preprocess_sql": "", "clean_up_sql": "", "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred = execute_queries(pred_sqls,db_name,conn)\n    sol = execute_queries(sol_sqls,db_name,conn)\n    assert pred == sol\n    return pred == sol"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: formula_1********************\nCREATE TABLE \"circuits\" (\ncircuitid bigint NOT NULL DEFAULT nextval('circuits_circuitid_seq'::regclass),\ncircuitref text NULL DEFAULT ''::text,\nname text NULL DEFAULT ''::text,\nlocation text NULL,\ncountry text NULL,\nlat real NULL,\nlng real NULL,\nalt bigint NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (circuitid)\n);\n\nExample data:\n circuitid circuitref                           name     location  country      lat       lng  alt                                                         url\n         2     sepang   Sepang International Circuit Kuala Lumpur Malaysia  2.76083 101.73800 None   http://en.wikipedia.org/wiki/Sepang_International_Circuit\n         3    bahrain  Bahrain International Circuit       Sakhir  Bahrain 26.03250  50.51060 None  http://en.wikipedia.org/wiki/Bahrain_International_Circuit\n         4  catalunya Circuit de Barcelona-Catalunya     Montmeló    Spain 41.57000   2.26111 None http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya\n==================================================\n\n\nCREATE TABLE \"status\" (\nstatusid bigint NOT NULL DEFAULT nextval('status_statusid_seq'::regclass),\nstatus text NULL DEFAULT ''::text,\n    PRIMARY KEY (statusid)\n);\n\nExample data:\n statusid       status\n        1     Finished\n        2 Disqualified\n        3     Accident\n==================================================\n\n\nCREATE TABLE \"drivers\" (\ndriverid bigint NOT NULL DEFAULT nextval('drivers_driverid_seq'::regclass),\ndriverref text NULL DEFAULT ''::text,\nnumber bigint NULL,\ncode text NULL,\nforename text NULL DEFAULT ''::text,\nsurname text NULL DEFAULT ''::text,\ndob date NULL,\nnationality text NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (driverid)\n);\n\nExample data:\n driverid driverref  number code forename  surname        dob nationality                                         url\n        1  hamilton    44.0  HAM    Lewis Hamilton 1985-01-07     British http://en.wikipedia.org/wiki/Lewis_Hamilton\n        2  heidfeld     NaN  HEI     Nick Heidfeld 1977-05-10      German  http://en.wikipedia.org/wiki/Nick_Heidfeld\n        3   rosberg     6.0  ROS     Nico  Rosberg 1985-06-27      German   http://en.wikipedia.org/wiki/Nico_Rosberg\n==================================================\n\n\nCREATE TABLE \"driverstandings\" (\ndriverstandingsid bigint NOT NULL DEFAULT nextval('driverstandings_driverstandingsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nposition bigint NULL,\npositiontext text NULL,\nwins bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (driverstandingsid)\n);\n\nExample data:\n driverstandingsid  raceid  driverid  points  position  wins positiontext\n                 1      18         1    10.0         1     1            1\n                 2      18         2     8.0         2     0            2\n                 3      18         3     6.0         3     0            3\n==================================================\n\n\nCREATE TABLE \"races\" (\nraceid bigint NOT NULL DEFAULT nextval('races_raceid_seq'::regclass),\nyear bigint NULL DEFAULT '0'::bigint,\nround bigint NULL DEFAULT '0'::bigint,\ncircuitid bigint NULL DEFAULT '0'::bigint,\nname text NULL DEFAULT ''::text,\ndate date NULL,\ntime text NULL,\nurl text NULL,\n    PRIMARY KEY (raceid),\n    FOREIGN KEY (year) REFERENCES seasons(year)\n);\n\nExample data:\n raceid  year  round  circuitid                 name       date     time                                                    url\n      2  2009      2          2 Malaysian Grand Prix 2009-04-05 09:00:00 http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix\n      3  2009      3         17   Chinese Grand Prix 2009-04-19 07:00:00   http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix\n      4  2009      4          3   Bahrain Grand Prix 2009-04-26 12:00:00   http://en.wikipedia.org/wiki/2009_Bahrain_Grand_Prix\n==================================================\n\n\nCREATE TABLE \"constructors\" (\nconstructorid bigint NOT NULL DEFAULT nextval('constructors_constructorid_seq'::regclass),\nconstructorref text NULL DEFAULT ''::text,\nname text NULL DEFAULT ''::text,\nnationality text NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (constructorid)\n);\n\nExample data:\n constructorid constructorref       name nationality                                                          url\n             1        mclaren    McLaren     British                         http://en.wikipedia.org/wiki/McLaren\n             2     bmw_sauber BMW Sauber      German                      http://en.wikipedia.org/wiki/BMW_Sauber\n             3       williams   Williams     British http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering\n==================================================\n\n\nCREATE TABLE \"constructorresults\" (\nconstructorresultsid bigint NOT NULL DEFAULT nextval('constructorresults_constructorresultsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\npoints real NULL,\nstatus text NULL,\n    PRIMARY KEY (constructorresultsid)\n);\n\nExample data:\n constructorresultsid  raceid  constructorid  points status\n                    1      18              1    14.0   None\n                    2      18              2     8.0   None\n                    3      18              3     9.0   None\n==================================================\n\n\nCREATE TABLE \"laptimes\" (\nraceid bigint NOT NULL,\ndriverid bigint NOT NULL,\nlap bigint NOT NULL,\nposition bigint NULL,\ntime text NULL,\nmilliseconds bigint NULL,\n    PRIMARY KEY (raceid, driverid, lap)\n);\n\nExample data:\n raceid  driverid  lap  position     time  milliseconds\n      2         1    1        10 1:52.965        112965\n      2         1    2        10 1:41.865        101865\n      2         1    3        10 1:40.869        100869\n==================================================\n\n\nCREATE TABLE \"qualifying\" (\nqualifyid bigint NOT NULL DEFAULT nextval('qualifying_qualifyid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\nnumber bigint NULL DEFAULT '0'::bigint,\nposition bigint NULL,\nq1 text NULL,\nq2 text NULL,\nq3 text NULL,\n    PRIMARY KEY (qualifyid)\n);\n\nExample data:\n qualifyid  raceid  driverid  constructorid  number  position       q1       q2       q3\n        23      19        13              6       2         1 1:35.347 1:34.412 1:35.748\n        24      19         8              6       1         2 1:35.645 1:34.188 1:36.230\n        25      19         5              1      23         3 1:35.227 1:34.759 1:36.613\n==================================================\n\n\nCREATE TABLE \"pitstops\" (\nraceid bigint NOT NULL,\ndriverid bigint NOT NULL,\nstop bigint NOT NULL,\nlap bigint NULL,\ntime text NULL,\nduration text NULL,\nmilliseconds bigint NULL,\n    PRIMARY KEY (raceid, driverid, stop)\n);\n\nExample data:\n raceid  driverid  stop  lap     time duration  milliseconds\n    842         1     1   12 16:24:40   22.552         22552\n    842         1     2   24 16:45:48   22.611         22611\n    842         1     3   37 17:08:28   25.382         25382\n==================================================\n\n\nCREATE TABLE \"seasons\" (\nyear bigint NOT NULL DEFAULT '0'::bigint,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (year)\n);\n\nExample data:\n year                                                  url\n 1950 http://en.wikipedia.org/wiki/1950_Formula_One_season\n 1951 http://en.wikipedia.org/wiki/1951_Formula_One_season\n 1952 http://en.wikipedia.org/wiki/1952_Formula_One_season\n==================================================\n\n\nCREATE TABLE \"constructorstandings\" (\nconstructorstandingsid bigint NOT NULL DEFAULT nextval('constructorstandings_constructorstandingsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nposition bigint NULL,\npositiontext text NULL,\nwins bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (constructorstandingsid)\n);\n\nExample data:\n constructorstandingsid  raceid  constructorid  points  position positiontext  wins\n                      1      18              1    14.0         1            1     1\n                      2      18              2     8.0         3            3     0\n                      3      18              3     9.0         2            2     0\n==================================================\n\n\nCREATE TABLE \"results\" (\nresultid bigint NOT NULL DEFAULT nextval('results_resultid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\nnumber bigint NULL,\ngrid bigint NULL DEFAULT '0'::bigint,\nposition bigint NULL,\npositiontext text NULL DEFAULT ''::text,\npositionorder bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nlaps bigint NULL DEFAULT '0'::bigint,\ntime text NULL,\nmilliseconds bigint NULL,\nfastestlap bigint NULL,\nrank bigint NULL DEFAULT '0'::bigint,\nfastestlaptime text NULL,\nfastestlapspeed text NULL,\nstatusid bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (resultid)\n);\n\nExample data:\n resultid  raceid  driverid  constructorid  number  grid  position positiontext  positionorder  points  laps        time  milliseconds  fastestlap  rank fastestlaptime fastestlapspeed  statusid\n       23      19         8              6       1     2         1            1              1    10.0    56 1:31:18.555       5478555          37     2       1:35.405         209.158         1\n       24      19         9              2       4     4         2            2              2     8.0    56     +19.570       5498125          39     6       1:35.921         208.033         1\n       25      19         5              1      23     8         3            3              3     6.0    56     +38.450       5517005          19     7       1:35.922         208.031         1\n==================================================\n\n********************Database: formula_1********************\n\n# User Query:\nIn the context of analyzing Formula 1 race results, I'm trying to understand the behavior of window functions in PostgreSQL. Specifically, I'm looking at the `array_agg` function with and without an `ORDER BY` clause within a window function. I expect both to return the same result since no filtering is applied, but they don't. Here's the scenario: I have a table of race results, and I want to aggregate the driver IDs in two ways: one with an order by the points they scored in the race, and another without any order. The results seem to suggest that ordering the partition affects the aggregation, which is confusing. Here's the SQL I used:\n# Error SQL:\nselect driverId, points, lead(driverId) over (order by points asc) as \"lead(driverId) with order\", array_agg(driverId) over (order by points asc) as \"array_agg(driverId) with order\", lead(driverId) over () as \"lead(driverId) without order\", array_agg(driverId) over () as \"array_agg(driverId) without order\" from results where raceId = 19 order by driverId asc\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/77087931/calculate-time-duration-while-iterating-on-the-same-column", "instance_id": "493_1", "selected_database": "formula_1", "query": "In the context of Formula 1 racing data analysis, a user is attempting to calculate the total duration of pit stops for each race day based on the difference between consecutive pit stop times recorded in the same column. The user has a table that records pit stop details including race ID, driver ID, stop number, lap number, pit stop time, and duration. The user's initial approach was to calculate the maximum and minimum pit stop times for each race day and then find the difference between these times to estimate the total pit stop duration. However, this approach misses the intermediate pit stops, leading to an inaccurate total duration calculation. The user is seeking a method to accurately calculate the total pit stop duration by considering all consecutive pit stop times for each race day.", "error_sql": ["SELECT \n  raceId,\n  MAX(time::time) AS end_time,\n  MIN(time::time) AS start_time,\n  (MAX(time::time) - MIN(time::time)) AS total_duration\nFROM pitStops\nWHERE raceId = 842\nGROUP BY raceId;"], "sol_sql": ["WITH cte AS (\n    SELECT\n        p.*,\n        CEIL( (ROW_NUMBER() OVER (\n                 PARTITION BY raceId \n                 ORDER BY time::time\n               ) + 1 ) / 2.0\n        ) AS rn\n    FROM pitStops p\n    WHERE raceId = 842\n),\ncte2 AS (\n    SELECT\n        rn,\n        MIN(time::time) AS starttime,\n        MAX(time::time) AS endtime,\n        CAST(MAX(time::time) - MIN(time::time) AS time) AS total_pause\n    FROM cte\n    GROUP BY rn\n)\nSELECT\n    MAX(endtime) AS endtime,\n    MIN(starttime) AS starttime,\n    CAST(SUM(total_pause) AS time) AS total_pit_stop_duration\nFROM cte2;"], "preprocess_sql": "", "clean_up_sql": "", "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: formula_1********************\nCREATE TABLE \"circuits\" (\ncircuitid bigint NOT NULL DEFAULT nextval('circuits_circuitid_seq'::regclass),\ncircuitref text NULL DEFAULT ''::text,\nname text NULL DEFAULT ''::text,\nlocation text NULL,\ncountry text NULL,\nlat real NULL,\nlng real NULL,\nalt bigint NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (circuitid)\n);\n\nExample data:\n circuitid circuitref                           name     location  country      lat       lng  alt                                                         url\n         2     sepang   Sepang International Circuit Kuala Lumpur Malaysia  2.76083 101.73800 None   http://en.wikipedia.org/wiki/Sepang_International_Circuit\n         3    bahrain  Bahrain International Circuit       Sakhir  Bahrain 26.03250  50.51060 None  http://en.wikipedia.org/wiki/Bahrain_International_Circuit\n         4  catalunya Circuit de Barcelona-Catalunya     Montmeló    Spain 41.57000   2.26111 None http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya\n==================================================\n\n\nCREATE TABLE \"status\" (\nstatusid bigint NOT NULL DEFAULT nextval('status_statusid_seq'::regclass),\nstatus text NULL DEFAULT ''::text,\n    PRIMARY KEY (statusid)\n);\n\nExample data:\n statusid       status\n        1     Finished\n        2 Disqualified\n        3     Accident\n==================================================\n\n\nCREATE TABLE \"drivers\" (\ndriverid bigint NOT NULL DEFAULT nextval('drivers_driverid_seq'::regclass),\ndriverref text NULL DEFAULT ''::text,\nnumber bigint NULL,\ncode text NULL,\nforename text NULL DEFAULT ''::text,\nsurname text NULL DEFAULT ''::text,\ndob date NULL,\nnationality text NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (driverid)\n);\n\nExample data:\n driverid driverref  number code forename  surname        dob nationality                                         url\n        1  hamilton    44.0  HAM    Lewis Hamilton 1985-01-07     British http://en.wikipedia.org/wiki/Lewis_Hamilton\n        2  heidfeld     NaN  HEI     Nick Heidfeld 1977-05-10      German  http://en.wikipedia.org/wiki/Nick_Heidfeld\n        3   rosberg     6.0  ROS     Nico  Rosberg 1985-06-27      German   http://en.wikipedia.org/wiki/Nico_Rosberg\n==================================================\n\n\nCREATE TABLE \"driverstandings\" (\ndriverstandingsid bigint NOT NULL DEFAULT nextval('driverstandings_driverstandingsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nposition bigint NULL,\npositiontext text NULL,\nwins bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (driverstandingsid)\n);\n\nExample data:\n driverstandingsid  raceid  driverid  points  position  wins positiontext\n                 1      18         1    10.0         1     1            1\n                 2      18         2     8.0         2     0            2\n                 3      18         3     6.0         3     0            3\n==================================================\n\n\nCREATE TABLE \"races\" (\nraceid bigint NOT NULL DEFAULT nextval('races_raceid_seq'::regclass),\nyear bigint NULL DEFAULT '0'::bigint,\nround bigint NULL DEFAULT '0'::bigint,\ncircuitid bigint NULL DEFAULT '0'::bigint,\nname text NULL DEFAULT ''::text,\ndate date NULL,\ntime text NULL,\nurl text NULL,\n    PRIMARY KEY (raceid),\n    FOREIGN KEY (year) REFERENCES seasons(year)\n);\n\nExample data:\n raceid  year  round  circuitid                 name       date     time                                                    url\n      2  2009      2          2 Malaysian Grand Prix 2009-04-05 09:00:00 http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix\n      3  2009      3         17   Chinese Grand Prix 2009-04-19 07:00:00   http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix\n      4  2009      4          3   Bahrain Grand Prix 2009-04-26 12:00:00   http://en.wikipedia.org/wiki/2009_Bahrain_Grand_Prix\n==================================================\n\n\nCREATE TABLE \"constructors\" (\nconstructorid bigint NOT NULL DEFAULT nextval('constructors_constructorid_seq'::regclass),\nconstructorref text NULL DEFAULT ''::text,\nname text NULL DEFAULT ''::text,\nnationality text NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (constructorid)\n);\n\nExample data:\n constructorid constructorref       name nationality                                                          url\n             1        mclaren    McLaren     British                         http://en.wikipedia.org/wiki/McLaren\n             2     bmw_sauber BMW Sauber      German                      http://en.wikipedia.org/wiki/BMW_Sauber\n             3       williams   Williams     British http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering\n==================================================\n\n\nCREATE TABLE \"constructorresults\" (\nconstructorresultsid bigint NOT NULL DEFAULT nextval('constructorresults_constructorresultsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\npoints real NULL,\nstatus text NULL,\n    PRIMARY KEY (constructorresultsid)\n);\n\nExample data:\n constructorresultsid  raceid  constructorid  points status\n                    1      18              1    14.0   None\n                    2      18              2     8.0   None\n                    3      18              3     9.0   None\n==================================================\n\n\nCREATE TABLE \"laptimes\" (\nraceid bigint NOT NULL,\ndriverid bigint NOT NULL,\nlap bigint NOT NULL,\nposition bigint NULL,\ntime text NULL,\nmilliseconds bigint NULL,\n    PRIMARY KEY (raceid, driverid, lap)\n);\n\nExample data:\n raceid  driverid  lap  position     time  milliseconds\n      2         1    1        10 1:52.965        112965\n      2         1    2        10 1:41.865        101865\n      2         1    3        10 1:40.869        100869\n==================================================\n\n\nCREATE TABLE \"qualifying\" (\nqualifyid bigint NOT NULL DEFAULT nextval('qualifying_qualifyid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\nnumber bigint NULL DEFAULT '0'::bigint,\nposition bigint NULL,\nq1 text NULL,\nq2 text NULL,\nq3 text NULL,\n    PRIMARY KEY (qualifyid)\n);\n\nExample data:\n qualifyid  raceid  driverid  constructorid  number  position       q1       q2       q3\n        23      19        13              6       2         1 1:35.347 1:34.412 1:35.748\n        24      19         8              6       1         2 1:35.645 1:34.188 1:36.230\n        25      19         5              1      23         3 1:35.227 1:34.759 1:36.613\n==================================================\n\n\nCREATE TABLE \"pitstops\" (\nraceid bigint NOT NULL,\ndriverid bigint NOT NULL,\nstop bigint NOT NULL,\nlap bigint NULL,\ntime text NULL,\nduration text NULL,\nmilliseconds bigint NULL,\n    PRIMARY KEY (raceid, driverid, stop)\n);\n\nExample data:\n raceid  driverid  stop  lap     time duration  milliseconds\n    842         1     1   12 16:24:40   22.552         22552\n    842         1     2   24 16:45:48   22.611         22611\n    842         1     3   37 17:08:28   25.382         25382\n==================================================\n\n\nCREATE TABLE \"seasons\" (\nyear bigint NOT NULL DEFAULT '0'::bigint,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (year)\n);\n\nExample data:\n year                                                  url\n 1950 http://en.wikipedia.org/wiki/1950_Formula_One_season\n 1951 http://en.wikipedia.org/wiki/1951_Formula_One_season\n 1952 http://en.wikipedia.org/wiki/1952_Formula_One_season\n==================================================\n\n\nCREATE TABLE \"constructorstandings\" (\nconstructorstandingsid bigint NOT NULL DEFAULT nextval('constructorstandings_constructorstandingsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nposition bigint NULL,\npositiontext text NULL,\nwins bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (constructorstandingsid)\n);\n\nExample data:\n constructorstandingsid  raceid  constructorid  points  position positiontext  wins\n                      1      18              1    14.0         1            1     1\n                      2      18              2     8.0         3            3     0\n                      3      18              3     9.0         2            2     0\n==================================================\n\n\nCREATE TABLE \"results\" (\nresultid bigint NOT NULL DEFAULT nextval('results_resultid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\nnumber bigint NULL,\ngrid bigint NULL DEFAULT '0'::bigint,\nposition bigint NULL,\npositiontext text NULL DEFAULT ''::text,\npositionorder bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nlaps bigint NULL DEFAULT '0'::bigint,\ntime text NULL,\nmilliseconds bigint NULL,\nfastestlap bigint NULL,\nrank bigint NULL DEFAULT '0'::bigint,\nfastestlaptime text NULL,\nfastestlapspeed text NULL,\nstatusid bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (resultid)\n);\n\nExample data:\n resultid  raceid  driverid  constructorid  number  grid  position positiontext  positionorder  points  laps        time  milliseconds  fastestlap  rank fastestlaptime fastestlapspeed  statusid\n       23      19         8              6       1     2         1            1              1    10.0    56 1:31:18.555       5478555          37     2       1:35.405         209.158         1\n       24      19         9              2       4     4         2            2              2     8.0    56     +19.570       5498125          39     6       1:35.921         208.033         1\n       25      19         5              1      23     8         3            3              3     6.0    56     +38.450       5517005          19     7       1:35.922         208.031         1\n==================================================\n\n********************Database: formula_1********************\n\n# User Query:\nIn the context of Formula 1 racing data analysis, a user is attempting to calculate the total duration of pit stops for each race day based on the difference between consecutive pit stop times recorded in the same column. The user has a table that records pit stop details including race ID, driver ID, stop number, lap number, pit stop time, and duration. The user's initial approach was to calculate the maximum and minimum pit stop times for each race day and then find the difference between these times to estimate the total pit stop duration. However, this approach misses the intermediate pit stops, leading to an inaccurate total duration calculation. The user is seeking a method to accurately calculate the total pit stop duration by considering all consecutive pit stop times for each race day.\n# Error SQL:\nSELECT \n  raceId,\n  MAX(time::time) AS end_time,\n  MIN(time::time) AS start_time,\n  (MAX(time::time) - MIN(time::time)) AS total_duration\nFROM pitStops\nWHERE raceId = 842\nGROUP BY raceId;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/75814668/return-json-from-postgres-with-json-build-obj", "instance_id": "494_1", "selected_database": "toxicology", "query": "In the toxicology database, I'm attempting to retrieve a specific data structure from a query. My data is structured in a way that each molecule has atoms connected by bonds, and each molecule is labeled as either carcinogenic (+) or not carcinogenic (-). I want to return a  object that groups molecules by their label and lists the atoms and bonds for each molecule. The desired output format is a  object where each key is a label, and the value is an array of objects, each representing a molecule with its atoms and bonds. Here's the SQL query I have so far, but it doesn't produce the desired output structure:", "error_sql": ["select label, JSON_AGG(JSON_BUILD_OBJECT(atom.molecule_id, atom.atom_id)) AS groupedMolecules FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id GROUP BY label"], "sol_sql": ["SELECT json_object_agg(label, groupedMolecules) AS molecules_by_label\nFROM (\n  SELECT label,\n         json_agg(\n           json_build_object(\n             'molecule_id', molecule.molecule_id,\n             'atoms', (\n               SELECT json_agg(\n                 json_build_object(\n                   'atom_id', atom.atom_id,\n                   'element', atom.element\n                 )\n               )\n               FROM atom\n               WHERE atom.molecule_id = molecule.molecule_id\n             ),\n             'bonds', (\n               SELECT json_agg(\n                 json_build_object(\n                   'bond_id', bond.bond_id,\n                   'bond_type', bond.bond_type\n                 )\n               )\n               FROM bond\n               WHERE bond.molecule_id = molecule.molecule_id\n             )\n           )\n         ) AS groupedMolecules\n  FROM molecule\n  GROUP BY label\n) AS sub;"], "preprocess_sql": "", "clean_up_sql": "", "test_cases": ["import json\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    def json_matches_gold(generated_json, gold_json):\n        # If either object is a string, parse it as JSON\n        if isinstance(generated_json, str):\n            generated_json = json.loads(generated_json)\n        if isinstance(gold_json, str):\n            gold_json = json.loads(gold_json)\n\n        # Return whether the Python structures match exactly\n        return generated_json == gold_json\n    \n    sol = execute_queries(sol_sqls,db_name,conn)\n    pred = execute_queries(pred_sqls,db_name,conn)\n    assert json_matches_gold(sol[0], pred[0])\n    return json_matches_gold(sol[0], pred[0])"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: toxicology********************\nCREATE TABLE \"bond\" (\nbond_id text NOT NULL,\nmolecule_id text NULL,\nbond_type text NULL,\n    PRIMARY KEY (bond_id),\n    FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id)\n);\n\nExample data:\n  bond_id molecule_id bond_type\nTR000_1_2       TR000         -\nTR000_2_3       TR000         -\nTR000_2_4       TR000         -\n==================================================\n\n\nCREATE TABLE \"molecule\" (\nmolecule_id text NOT NULL,\nlabel text NULL,\n    PRIMARY KEY (molecule_id)\n);\n\nExample data:\nmolecule_id label\n      TR000     +\n      TR001     +\n      TR002     -\n==================================================\n\n\nCREATE TABLE \"atom\" (\natom_id text NOT NULL,\nmolecule_id text NULL,\nelement text NULL,\n    PRIMARY KEY (atom_id),\n    FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id)\n);\n\nExample data:\natom_id molecule_id element\nTR000_1       TR000      cl\nTR000_2       TR000       c\nTR000_3       TR000      cl\n==================================================\n\n\nCREATE TABLE \"connected\" (\natom_id text NOT NULL,\natom_id2 text NOT NULL,\nbond_id text NULL,\n    PRIMARY KEY (atom_id, atom_id2)\n);\n\nExample data:\natom_id atom_id2   bond_id\nTR000_1  TR000_2 TR000_1_2\nTR000_2  TR000_1 TR000_1_2\nTR000_2  TR000_3 TR000_2_3\n==================================================\n\n********************Database: toxicology********************\n\n# User Query:\nIn the toxicology database, I'm attempting to retrieve a specific data structure from a query. My data is structured in a way that each molecule has atoms connected by bonds, and each molecule is labeled as either carcinogenic (+) or not carcinogenic (-). I want to return a  object that groups molecules by their label and lists the atoms and bonds for each molecule. The desired output format is a  object where each key is a label, and the value is an array of objects, each representing a molecule with its atoms and bonds. Here's the SQL query I have so far, but it doesn't produce the desired output structure:\n# Error SQL:\nselect label, JSON_AGG(JSON_BUILD_OBJECT(atom.molecule_id, atom.atom_id)) AS groupedMolecules FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id GROUP BY label\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/72084749/how-do-i-count-occurrences-with-conditions-in-postgresql", "instance_id": "497_2", "selected_database": "toxicology", "query": "In the context of a toxicology database, I have a `molecule` table that tracks molecules and their carcinogenic status, and an `atom` table that records atoms within these molecules. Each atom is identified by a unique `atom_id` and belongs to a molecule identified by `molecule_id`. The `element` column in the `atom` table specifies the chemical element of the atom. I need to count the number of sodium (`na`) and carbon (`c`) or chlorine (`cl`) atoms for each molecule. However, if both carbon (`c`) and chlorine (`cl`) elements within the same molecule, they should be counted as one. Here's the SQL query I attempted, but it counts each atom individually, even if they are of the same element within the same molecule:", "error_sql": ["SELECT molecule_id, COALESCE(SUM(CASE WHEN element = 'na' THEN 1 ELSE 0 END), 0) na_atoms, COALESCE(SUM(CASE WHEN element = 'c' OR element = 'cl' THEN 1 ELSE 0 END), 0) c_atoms FROM atom GROUP BY molecule_id;"], "sol_sql": ["SELECT\n    molecule_id,\n    COUNT(DISTINCT CASE WHEN element = 'na' THEN 1 END)         AS na_atoms,\n    COUNT(DISTINCT CASE WHEN element IN ('c', 'cl') THEN molecule_id END) AS c_atoms\nFROM atom\nGROUP BY molecule_id;"], "preprocess_sql": "", "clean_up_sql": "", "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: toxicology********************\nCREATE TABLE \"bond\" (\nbond_id text NOT NULL,\nmolecule_id text NULL,\nbond_type text NULL,\n    PRIMARY KEY (bond_id),\n    FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id)\n);\n\nExample data:\n  bond_id molecule_id bond_type\nTR000_1_2       TR000         -\nTR000_2_3       TR000         -\nTR000_2_4       TR000         -\n==================================================\n\n\nCREATE TABLE \"molecule\" (\nmolecule_id text NOT NULL,\nlabel text NULL,\n    PRIMARY KEY (molecule_id)\n);\n\nExample data:\nmolecule_id label\n      TR000     +\n      TR001     +\n      TR002     -\n==================================================\n\n\nCREATE TABLE \"atom\" (\natom_id text NOT NULL,\nmolecule_id text NULL,\nelement text NULL,\n    PRIMARY KEY (atom_id),\n    FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id)\n);\n\nExample data:\natom_id molecule_id element\nTR000_1       TR000      cl\nTR000_2       TR000       c\nTR000_3       TR000      cl\n==================================================\n\n\nCREATE TABLE \"connected\" (\natom_id text NOT NULL,\natom_id2 text NOT NULL,\nbond_id text NULL,\n    PRIMARY KEY (atom_id, atom_id2)\n);\n\nExample data:\natom_id atom_id2   bond_id\nTR000_1  TR000_2 TR000_1_2\nTR000_2  TR000_1 TR000_1_2\nTR000_2  TR000_3 TR000_2_3\n==================================================\n\n********************Database: toxicology********************\n\n# User Query:\nIn the context of a toxicology database, I have a `molecule` table that tracks molecules and their carcinogenic status, and an `atom` table that records atoms within these molecules. Each atom is identified by a unique `atom_id` and belongs to a molecule identified by `molecule_id`. The `element` column in the `atom` table specifies the chemical element of the atom. I need to count the number of sodium (`na`) and carbon (`c`) or chlorine (`cl`) atoms for each molecule. However, if both carbon (`c`) and chlorine (`cl`) elements within the same molecule, they should be counted as one. Here's the SQL query I attempted, but it counts each atom individually, even if they are of the same element within the same molecule:\n# Error SQL:\nSELECT molecule_id, COALESCE(SUM(CASE WHEN element = 'na' THEN 1 ELSE 0 END), 0) na_atoms, COALESCE(SUM(CASE WHEN element = 'c' OR element = 'cl' THEN 1 ELSE 0 END), 0) c_atoms FROM atom GROUP BY molecule_id;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/70667395/how-to-iteratively-select-by-hour-for-averages-by-userid", "instance_id": "499_1", "selected_database": "european_football_2", "query": "In the context of analyzing football match data, I'm attempting to calculate the average number of goals scored by each team, grouped by the hour of the match. The goal is to understand the performance trends of teams at different times of the day without resorting to external scripting. Here's the initial approach I took, which unfortunately resulted in an error due to incorrect handling of the timestamp data.", "error_sql": ["SELECT home_team_api_id, AVG(home_team_goal) as avg_home_goals, AVG(away_team_goal) as avg_away_goals, SUM(home_team_goal) as total_home_goals, SUM(away_team_goal) as total_away_goals, MAX(home_team_goal) as max_home_goals, MIN(home_team_goal) as min_home_goals, COUNT(home_team_api_id) as count FROM Match GROUP BY home_team_api_id, date_part('hour', date);"], "sol_sql": ["SELECT date_trunc('hour', \"date\"::timestamp), home_team_api_id, AVG(home_team_goal) as avg_home_goals, AVG(away_team_goal) as avg_away_goals, SUM(home_team_goal) as total_home_goals, SUM(away_team_goal) as total_away_goals, MAX(home_team_goal) as max_home_goals, MIN(home_team_goal) as min_home_goals, COUNT(home_team_api_id) as count FROM Match GROUP BY date_trunc('hour', \"date\"::timestamp), home_team_api_id;"], "preprocess_sql": "", "clean_up_sql": "", "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: european_football_2********************\nCREATE TABLE \"team_attributes\" (\nid bigint NOT NULL DEFAULT nextval('team_attributes_id_seq'::regclass),\nteam_fifa_api_id bigint NULL,\nteam_api_id bigint NULL,\ndate text NULL,\nbuildupplayspeed bigint NULL,\nbuildupplayspeedclass text NULL,\nbuildupplaydribbling bigint NULL,\nbuildupplaydribblingclass text NULL,\nbuildupplaypassing bigint NULL,\nbuildupplaypassingclass text NULL,\nbuildupplaypositioningclass text NULL,\nchancecreationpassing bigint NULL,\nchancecreationpassingclass text NULL,\nchancecreationcrossing bigint NULL,\nchancecreationcrossingclass text NULL,\nchancecreationshooting bigint NULL,\nchancecreationshootingclass text NULL,\nchancecreationpositioningclass text NULL,\ndefencepressure bigint NULL,\ndefencepressureclass text NULL,\ndefenceaggression bigint NULL,\ndefenceaggressionclass text NULL,\ndefenceteamwidth bigint NULL,\ndefenceteamwidthclass text NULL,\ndefencedefenderlineclass text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_fifa_api_id  team_api_id                date  buildupplayspeed buildupplayspeedclass  buildupplaydribbling buildupplaydribblingclass  buildupplaypassing buildupplaypassingclass buildupplaypositioningclass  chancecreationpassing chancecreationpassingclass  chancecreationcrossing chancecreationcrossingclass  chancecreationshooting chancecreationshootingclass chancecreationpositioningclass  defencepressure defencepressureclass  defenceaggression defenceaggressionclass  defenceteamwidth defenceteamwidthclass defencedefenderlineclass\n  1               434         9930 2010-02-22 00:00:00                60              Balanced                   NaN                    Little                  50                   Mixed                   Organised                     60                     Normal                      65                      Normal                      55                      Normal                      Organised               50               Medium                 55                  Press                45                Normal                    Cover\n  2               434         9930 2014-09-19 00:00:00                52              Balanced                  48.0                    Normal                  56                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n  3               434         9930 2015-09-10 00:00:00                47              Balanced                  41.0                    Normal                  54                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n==================================================\n\n\nCREATE TABLE \"player\" (\nid bigint NOT NULL DEFAULT nextval('player_id_seq'::regclass),\nplayer_api_id bigint NULL,\nplayer_name text NULL,\nplayer_fifa_api_id bigint NULL,\nbirthday text NULL,\nheight bigint NULL,\nweight bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_api_id        player_name  player_fifa_api_id            birthday  height  weight\n  1         505942 Aaron Appindangoye              218353 1992-02-29 00:00:00     182     187\n  2         155782    Aaron Cresswell              189615 1989-12-15 00:00:00     170     146\n  3         162549        Aaron Doran              186170 1991-05-13 00:00:00     170     163\n==================================================\n\n\nCREATE TABLE \"match\" (\nid bigint NOT NULL DEFAULT nextval('match_id_seq'::regclass),\ncountry_id bigint NULL,\nleague_id bigint NULL,\nseason text NULL,\nstage bigint NULL,\ndate text NULL,\nmatch_api_id bigint NULL,\nhome_team_api_id bigint NULL,\naway_team_api_id bigint NULL,\nhome_team_goal bigint NULL,\naway_team_goal bigint NULL,\ngoal text NULL,\nshoton text NULL,\nshotoff text NULL,\nfoulcommit text NULL,\ncard text NULL,\ncross text NULL,\ncorner text NULL,\npossession text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  country_id  league_id    season  stage                date  match_api_id  home_team_api_id  away_team_api_id  home_team_goal  away_team_goal\n  1           1          1 2008/2009      1 2008-08-17 00:00:00        492473              9987              9993               1               1\n  2           1          1 2008/2009      1 2008-08-16 00:00:00        492474             10000              9994               0               0\n  3           1          1 2008/2009      1 2008-08-16 00:00:00        492475              9984              8635               0               3\n==================================================\n\n\nCREATE TABLE \"league\" (\nid bigint NOT NULL DEFAULT nextval('league_id_seq'::regclass),\ncountry_id bigint NULL,\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id  country_id                   name\n   1           1 Belgium Jupiler League\n1729        1729 England Premier League\n4769        4769         France Ligue 1\n==================================================\n\n\nCREATE TABLE \"country\" (\nid bigint NOT NULL DEFAULT nextval('country_id_seq'::regclass),\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id    name\n   1 Belgium\n1729 England\n4769  France\n==================================================\n\n\nCREATE TABLE \"player_attributes\" (\nid bigint NOT NULL DEFAULT nextval('player_attributes_id_seq'::regclass),\nplayer_fifa_api_id bigint NULL,\nplayer_api_id bigint NULL,\ndate text NULL,\noverall_rating bigint NULL,\npotential bigint NULL,\npreferred_foot text NULL,\nattacking_work_rate text NULL,\ndefensive_work_rate text NULL,\ncrossing bigint NULL,\nfinishing bigint NULL,\nheading_accuracy bigint NULL,\nshort_passing bigint NULL,\nvolleys bigint NULL,\ndribbling bigint NULL,\ncurve bigint NULL,\nfree_kick_accuracy bigint NULL,\nlong_passing bigint NULL,\nball_control bigint NULL,\nacceleration bigint NULL,\nsprint_speed bigint NULL,\nagility bigint NULL,\nreactions bigint NULL,\nbalance bigint NULL,\nshot_power bigint NULL,\njumping bigint NULL,\nstamina bigint NULL,\nstrength bigint NULL,\nlong_shots bigint NULL,\naggression bigint NULL,\ninterceptions bigint NULL,\npositioning bigint NULL,\nvision bigint NULL,\npenalties bigint NULL,\nmarking bigint NULL,\nstanding_tackle bigint NULL,\nsliding_tackle bigint NULL,\ngk_diving bigint NULL,\ngk_handling bigint NULL,\ngk_kicking bigint NULL,\ngk_positioning bigint NULL,\ngk_reflexes bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_fifa_api_id  player_api_id                date  overall_rating  potential preferred_foot attacking_work_rate defensive_work_rate  crossing  finishing  heading_accuracy  short_passing  volleys  dribbling  curve  free_kick_accuracy  long_passing  ball_control  acceleration  sprint_speed  agility  reactions  balance  shot_power  jumping  stamina  strength  long_shots  aggression  interceptions  positioning  vision  penalties  marking  standing_tackle  sliding_tackle  gk_diving  gk_handling  gk_kicking  gk_positioning  gk_reflexes\n  1              218353         505942 2016-02-18 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  2              218353         505942 2015-11-19 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  3              218353         505942 2015-09-21 00:00:00              62         66          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          63             41           45      54         48       65               66              69          6           11          10               8            8\n==================================================\n\n\nCREATE TABLE \"team\" (\nid bigint NOT NULL DEFAULT nextval('team_id_seq'::regclass),\nteam_api_id bigint NULL,\nteam_fifa_api_id bigint NULL,\nteam_long_name text NULL,\nteam_short_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_api_id  team_fifa_api_id   team_long_name team_short_name\n  1         9987               673         KRC Genk             GEN\n  2         9993               675     Beerschot AC             BAC\n  3        10000             15005 SV Zulte-Waregem             ZUL\n==================================================\n\n********************Database: european_football_2********************\n\n# User Query:\nIn the context of analyzing football match data, I'm attempting to calculate the average number of goals scored by each team, grouped by the hour of the match. The goal is to understand the performance trends of teams at different times of the day without resorting to external scripting. Here's the initial approach I took, which unfortunately resulted in an error due to incorrect handling of the timestamp data.\n# Error SQL:\nSELECT home_team_api_id, AVG(home_team_goal) as avg_home_goals, AVG(away_team_goal) as avg_away_goals, SUM(home_team_goal) as total_home_goals, SUM(away_team_goal) as total_away_goals, MAX(home_team_goal) as max_home_goals, MIN(home_team_goal) as min_home_goals, COUNT(home_team_api_id) as count FROM Match GROUP BY home_team_api_id, date_part('hour', date);\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/78842924/checking-two-distinct-lists-with-and-operation-on-same-column", "instance_id": "238_1", "selected_database": "debit_card_specializing", "query": "In the table clients_to_groups, we need to identify clients who have made transactions at gas stations that belong to specific groups. Specifically, we want to find clients who have made transactions at gas stations that are either in the group 1 or 3 AND also in group 5 or 6. For example, a client who has made transactions at a gas station in the group 5 and another transaction at a gas station in the group 1 should be included in the results, but a client who has only made transactions at gas stations in the group 5 should not be included.", "error_sql": ["SELECT DISTINCT c.id FROM clients c INNER JOIN clients_to_groups at1 ON c.id = at1.client_id INNER JOIN clients_to_groups at2 ON c.id = at2.client_id WHERE at1.group_id IN (5, 6) AND at2.group_id IN (1, 3);"], "sol_sql": ["SELECT c.id  FROM clients c INNER JOIN clients_to_groups ctg ON c.id = ctg.client_id AND ctg.group_id IN (1,3,5,6) GROUP BY c.id HAVING  COUNT(CASE WHEN ctg.group_id IN (1,3) THEN 1 END) > 0 AND COUNT(CASE WHEN ctg.group_id IN (5,6) THEN 1 END) > 0;"], "preprocess_sql": ["CREATE TABLE clients (id INT NOT NULL);", "CREATE TABLE groups (id INT NOT NULL);", "CREATE TABLE clients_to_groups (id serial, group_id INT, client_id INT);", "INSERT INTO clients(id) VALUES (0), (1), (2), (3);", "INSERT INTO groups(id) VALUES (1), (3), (5), (6);", "INSERT INTO clients_to_groups(client_id, group_id) VALUES (0, 1), (0, 5), (1, 1), (1, 90), (2, 1), (3, 3), (3, 5), (3, 90);", "INSERT INTO clients (id) SELECT random() from generate_series(1,2000);", "INSERT INTO clients_to_groups(client_id, group_id) SELECT random(), random() from generate_series(1,2000);"], "clean_up_sql": ["DROP TABLE clients;", "DROP TABLE groups;", "DROP TABLE clients_to_groups;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    result = performance_compare_by_qep(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"performance_check returned {result} but expected 1.\"\n    return result\n    "], "efficiency": true, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: debit_card_specializing********************\nCREATE TABLE \"customers\" (\ncustomerid bigint NOT NULL,\nsegment text NULL,\ncurrency text NULL,\n    PRIMARY KEY (customerid)\n);\n\nExample data:\n customerid segment currency\n          3     SME      EUR\n          5     LAM      EUR\n          6     SME      EUR\n==================================================\n\n\nCREATE TABLE \"gasstations\" (\ngasstationid bigint NOT NULL,\nchainid bigint NULL,\ncountry text NULL,\nsegment text NULL,\n    PRIMARY KEY (gasstationid)\n);\n\nExample data:\n gasstationid  chainid country         segment\n           44       13     CZE Value for money\n           45        6     CZE         Premium\n           46       23     CZE           Other\n==================================================\n\n\nCREATE TABLE \"products\" (\nproductid bigint NOT NULL,\ndescription text NULL,\n    PRIMARY KEY (productid)\n);\n\nExample data:\n productid  description\n         1 Rucní zadání\n         2        Nafta\n         3      Special\n==================================================\n\n\nCREATE TABLE \"yearmonth\" (\ncustomerid bigint NULL,\ndate text NULL,\nconsumption real NULL\n);\n\nExample data:\n customerid   date  consumption\n          5 201207       528.30\n          5 201302      1598.28\n          5 201303      1931.36\n==================================================\n\n\nCREATE TABLE \"transactions_1k\" (\ntransactionid bigint NOT NULL DEFAULT nextval('transactions_1k_transactionid_seq'::regclass),\ndate date NULL,\ntime text NULL,\ncustomerid bigint NULL,\ncardid bigint NULL,\ngasstationid bigint NULL,\nproductid bigint NULL,\namount bigint NULL,\nprice real NULL,\n    PRIMARY KEY (transactionid)\n);\n\nExample data:\n transactionid       date     time  customerid  cardid  gasstationid  productid  amount  price\n             1 2012-08-24 09:41:00       31543  486621          3704          2      28 672.64\n             2 2012-08-24 10:03:00       46707  550134          3704          2      18 430.72\n             3 2012-08-24 10:03:00       46707  550134          3704         23       1 121.99\n==================================================\n\n********************Database: debit_card_specializing********************\n\n# User Query:\nIn the table clients_to_groups, we need to identify clients who have made transactions at gas stations that belong to specific groups. Specifically, we want to find clients who have made transactions at gas stations that are either in the group 1 or 3 AND also in group 5 or 6. For example, a client who has made transactions at a gas station in the group 5 and another transaction at a gas station in the group 1 should be included in the results, but a client who has only made transactions at gas stations in the group 5 should not be included.\n# Error SQL:\nSELECT DISTINCT c.id FROM clients c INNER JOIN clients_to_groups at1 ON c.id = at1.client_id INNER JOIN clients_to_groups at2 ON c.id = at2.client_id WHERE at1.group_id IN (5, 6) AND at2.group_id IN (1, 3);\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/73474048/sum-of-consecutive-same-sign-rows-in-postgresql", "instance_id": "517_2", "selected_database": "european_football_2", "query": "In the context of the 'european_football_2' database, consider a table that records daily financial transactions for football clubs. Each transaction includes the date, the club name, and the amount of money involved, which can be positive (income) or negative (expense). The goal is to group these transactions by club and sign (positive or negative) and sum the amounts for consecutive transactions of the same sign for each club. For example, if a club has consecutive positive transactions, they should be summed up into a single transaction. The user attempted to use window functions but encountered issues with their query, which did not produce the desired output.", "error_sql": ["SELECT transaction_date AS date, club_name, sum(amount) over (partition by club_name, sign(amount) order by transaction_date) from club_transactions"], "sol_sql": ["SELECT MIN(transaction_date) AS date, club_name, SUM(amount) AS amount FROM (SELECT *, SUM(flag) OVER (PARTITION BY club_name ORDER BY transaction_date) AS grp FROM (SELECT *, COALESCE(SIGN(amount) <> LAG(SIGN(amount)) OVER (PARTITION BY club_name ORDER BY transaction_date), true)::int AS flag FROM club_transactions) t) t GROUP BY club_name, grp ORDER BY club_name, date;"], "preprocess_sql": ["CREATE TABLE club_transactions (transaction_date DATE, club_name VARCHAR(50), amount INTEGER);", "INSERT INTO club_transactions (transaction_date, club_name, amount) VALUES ('2023-01-01', 'Manchester United', 3), ('2023-01-02', 'Manchester United', 2), ('2023-01-03', 'Manchester United', 1), ('2023-01-04', 'Manchester United', -5), ('2023-01-05', 'Manchester United', 1), ('2023-01-01', 'Liverpool', 2), ('2023-01-02', 'Liverpool', -1), ('2023-01-03', 'Liverpool', -6);"], "clean_up_sql": ["DROP TABLE club_transactions;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: european_football_2********************\nCREATE TABLE \"team_attributes\" (\nid bigint NOT NULL DEFAULT nextval('team_attributes_id_seq'::regclass),\nteam_fifa_api_id bigint NULL,\nteam_api_id bigint NULL,\ndate text NULL,\nbuildupplayspeed bigint NULL,\nbuildupplayspeedclass text NULL,\nbuildupplaydribbling bigint NULL,\nbuildupplaydribblingclass text NULL,\nbuildupplaypassing bigint NULL,\nbuildupplaypassingclass text NULL,\nbuildupplaypositioningclass text NULL,\nchancecreationpassing bigint NULL,\nchancecreationpassingclass text NULL,\nchancecreationcrossing bigint NULL,\nchancecreationcrossingclass text NULL,\nchancecreationshooting bigint NULL,\nchancecreationshootingclass text NULL,\nchancecreationpositioningclass text NULL,\ndefencepressure bigint NULL,\ndefencepressureclass text NULL,\ndefenceaggression bigint NULL,\ndefenceaggressionclass text NULL,\ndefenceteamwidth bigint NULL,\ndefenceteamwidthclass text NULL,\ndefencedefenderlineclass text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_fifa_api_id  team_api_id                date  buildupplayspeed buildupplayspeedclass  buildupplaydribbling buildupplaydribblingclass  buildupplaypassing buildupplaypassingclass buildupplaypositioningclass  chancecreationpassing chancecreationpassingclass  chancecreationcrossing chancecreationcrossingclass  chancecreationshooting chancecreationshootingclass chancecreationpositioningclass  defencepressure defencepressureclass  defenceaggression defenceaggressionclass  defenceteamwidth defenceteamwidthclass defencedefenderlineclass\n  1               434         9930 2010-02-22 00:00:00                60              Balanced                   NaN                    Little                  50                   Mixed                   Organised                     60                     Normal                      65                      Normal                      55                      Normal                      Organised               50               Medium                 55                  Press                45                Normal                    Cover\n  2               434         9930 2014-09-19 00:00:00                52              Balanced                  48.0                    Normal                  56                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n  3               434         9930 2015-09-10 00:00:00                47              Balanced                  41.0                    Normal                  54                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n==================================================\n\n\nCREATE TABLE \"player\" (\nid bigint NOT NULL DEFAULT nextval('player_id_seq'::regclass),\nplayer_api_id bigint NULL,\nplayer_name text NULL,\nplayer_fifa_api_id bigint NULL,\nbirthday text NULL,\nheight bigint NULL,\nweight bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_api_id        player_name  player_fifa_api_id            birthday  height  weight\n  1         505942 Aaron Appindangoye              218353 1992-02-29 00:00:00     182     187\n  2         155782    Aaron Cresswell              189615 1989-12-15 00:00:00     170     146\n  3         162549        Aaron Doran              186170 1991-05-13 00:00:00     170     163\n==================================================\n\n\nCREATE TABLE \"match\" (\nid bigint NOT NULL DEFAULT nextval('match_id_seq'::regclass),\ncountry_id bigint NULL,\nleague_id bigint NULL,\nseason text NULL,\nstage bigint NULL,\ndate text NULL,\nmatch_api_id bigint NULL,\nhome_team_api_id bigint NULL,\naway_team_api_id bigint NULL,\nhome_team_goal bigint NULL,\naway_team_goal bigint NULL,\ngoal text NULL,\nshoton text NULL,\nshotoff text NULL,\nfoulcommit text NULL,\ncard text NULL,\ncross text NULL,\ncorner text NULL,\npossession text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  country_id  league_id    season  stage                date  match_api_id  home_team_api_id  away_team_api_id  home_team_goal  away_team_goal\n  1           1          1 2008/2009      1 2008-08-17 00:00:00        492473              9987              9993               1               1\n  2           1          1 2008/2009      1 2008-08-16 00:00:00        492474             10000              9994               0               0\n  3           1          1 2008/2009      1 2008-08-16 00:00:00        492475              9984              8635               0               3\n==================================================\n\n\nCREATE TABLE \"league\" (\nid bigint NOT NULL DEFAULT nextval('league_id_seq'::regclass),\ncountry_id bigint NULL,\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id  country_id                   name\n   1           1 Belgium Jupiler League\n1729        1729 England Premier League\n4769        4769         France Ligue 1\n==================================================\n\n\nCREATE TABLE \"country\" (\nid bigint NOT NULL DEFAULT nextval('country_id_seq'::regclass),\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id    name\n   1 Belgium\n1729 England\n4769  France\n==================================================\n\n\nCREATE TABLE \"player_attributes\" (\nid bigint NOT NULL DEFAULT nextval('player_attributes_id_seq'::regclass),\nplayer_fifa_api_id bigint NULL,\nplayer_api_id bigint NULL,\ndate text NULL,\noverall_rating bigint NULL,\npotential bigint NULL,\npreferred_foot text NULL,\nattacking_work_rate text NULL,\ndefensive_work_rate text NULL,\ncrossing bigint NULL,\nfinishing bigint NULL,\nheading_accuracy bigint NULL,\nshort_passing bigint NULL,\nvolleys bigint NULL,\ndribbling bigint NULL,\ncurve bigint NULL,\nfree_kick_accuracy bigint NULL,\nlong_passing bigint NULL,\nball_control bigint NULL,\nacceleration bigint NULL,\nsprint_speed bigint NULL,\nagility bigint NULL,\nreactions bigint NULL,\nbalance bigint NULL,\nshot_power bigint NULL,\njumping bigint NULL,\nstamina bigint NULL,\nstrength bigint NULL,\nlong_shots bigint NULL,\naggression bigint NULL,\ninterceptions bigint NULL,\npositioning bigint NULL,\nvision bigint NULL,\npenalties bigint NULL,\nmarking bigint NULL,\nstanding_tackle bigint NULL,\nsliding_tackle bigint NULL,\ngk_diving bigint NULL,\ngk_handling bigint NULL,\ngk_kicking bigint NULL,\ngk_positioning bigint NULL,\ngk_reflexes bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_fifa_api_id  player_api_id                date  overall_rating  potential preferred_foot attacking_work_rate defensive_work_rate  crossing  finishing  heading_accuracy  short_passing  volleys  dribbling  curve  free_kick_accuracy  long_passing  ball_control  acceleration  sprint_speed  agility  reactions  balance  shot_power  jumping  stamina  strength  long_shots  aggression  interceptions  positioning  vision  penalties  marking  standing_tackle  sliding_tackle  gk_diving  gk_handling  gk_kicking  gk_positioning  gk_reflexes\n  1              218353         505942 2016-02-18 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  2              218353         505942 2015-11-19 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  3              218353         505942 2015-09-21 00:00:00              62         66          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          63             41           45      54         48       65               66              69          6           11          10               8            8\n==================================================\n\n\nCREATE TABLE \"team\" (\nid bigint NOT NULL DEFAULT nextval('team_id_seq'::regclass),\nteam_api_id bigint NULL,\nteam_fifa_api_id bigint NULL,\nteam_long_name text NULL,\nteam_short_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_api_id  team_fifa_api_id   team_long_name team_short_name\n  1         9987               673         KRC Genk             GEN\n  2         9993               675     Beerschot AC             BAC\n  3        10000             15005 SV Zulte-Waregem             ZUL\n==================================================\n\n********************Database: european_football_2********************\n\n# User Query:\nIn the context of the 'european_football_2' database, consider a table that records daily financial transactions for football clubs. Each transaction includes the date, the club name, and the amount of money involved, which can be positive (income) or negative (expense). The goal is to group these transactions by club and sign (positive or negative) and sum the amounts for consecutive transactions of the same sign for each club. For example, if a club has consecutive positive transactions, they should be summed up into a single transaction. The user attempted to use window functions but encountered issues with their query, which did not produce the desired output.\n# Error SQL:\nSELECT transaction_date AS date, club_name, sum(amount) over (partition by club_name, sign(amount) order by transaction_date) from club_transactions\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/72943039/return-json-with-children-postgresql", "instance_id": "519_1", "selected_database": "california_schools", "query": "I have a table in Postgres that returns flat data. But I would like it to be returned to me in a Json ordered with its children as follows, and I have not been able to solve it.Is there a way in postgresql to order the parent modules with their child modules, I attach an example \"[{\"children\":[{\"id_module\":4,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":1},{\"id_module\":3,\"desc_module\":\"C\",\"module_code\":\"232\",\"name_module\":\"C\",\"id_parent_module\":1},{\"id_module\":2,\"desc_module\":\"B\",\"module_code\":\"011.002\",\"name_module\":\"B\",\"id_parent_module\":1}],\"id_module\":1,\"desc_module\":\"A\",\"module_code\":\"001\",\"name_module\":\"A\",\"id_parent_module\":null},{\"children\":[{\"id_module\":14,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":5}],\"id_module\":5,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":null},{\"children\":[{\"id_module\":22,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":6},{\"id_module\":8,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":6},{\"id_module\":7,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":6}],\"id_module\":6,\"desc_module\":\"qw\",\"module_code\":\"23\",\"name_module\":\"asdf\",\"id_parent_module\":null},{\"children\":[{\"id_module\":21,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":9},{\"id_module\":20,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":9}],\"id_module\":9,\"desc_module\":\"asdfsad\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":null},{\"children\":[{\"id_module\":13,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":10},{\"id_module\":12,\"desc_module\":\"asdfsf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":10},{\"id_module\":11,\"desc_module\":\"asdf\",\"module_code\":\"sadf\",\"name_module\":\"asdf\",\"id_parent_module\":10}],\"id_module\":10,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":null}]\"", "error_sql": "SELECT array_to_json(array_agg(row_to_json(alias))) FROM (select * from modules ) alias", "sol_sql": ["WITH RECURSIVE cte(id, p, js) AS (SELECT t.id_module, t.id_parent_module, json_agg(t.jsn) FROM (SELECT m.id_module, m.id_parent_module, json_build_object('id_module', m1.id_module, 'id_parent_module', m1.id_parent_module, 'module_code', m1.module_code, 'name_module', m1.name_module, 'desc_module', m1.desc_module) jsn FROM modules m JOIN modules m1 ON m1.id_parent_module = m.id_module WHERE NOT EXISTS (SELECT 1 FROM modules m2 WHERE m2.id_parent_module = m1.id_module)) t GROUP BY t.id_module, t.id_parent_module UNION ALL SELECT t.id_module, t.id_parent_module, json_agg(t.jsn) FROM (SELECT m.id_module, m.id_parent_module, json_build_object('id_module', m2.id_module, 'id_parent_module', m2.id_parent_module, 'module_code', m2.module_code, 'name_module', m2.name_module, 'desc_module', m2.desc_module, 'children', c.js) jsn FROM modules m JOIN cte c ON m.id_module = c.p JOIN modules m2 ON m2.id_module = c.id) t GROUP BY t.id_module, t.id_parent_module) SELECT jsonb_pretty(t.result::jsonb) FROM (SELECT json_agg(json_build_object('id_module', m2.id_module, 'id_parent_module', m2.id_parent_module, 'module_code', m2.module_code, 'name_module', m2.name_module, 'desc_module', m2.desc_module, 'children', c.js)) result FROM cte c JOIN modules m2 ON c.id = m2.id_module WHERE c.p IS NULL) t"], "preprocess_sql": ["create table modules (id_module int, id_parent_module int, module_code text, name_module text, desc_module text);", "insert into modules values (1, null, '001', 'A', 'A'), (2, 1, '011.002', 'B', 'B'), (3, 1, '232', 'C', 'C'), (4, 1, 'asdf', 'asdf', 'asdf'), (5, null, 'asdf', 'asdf', 'asdf'), (14, 5, 'asdf', 'asdf', 'asdf'), (6, null, '23', 'asdf', 'qw'), (7, 6, 'asdf', 'asdf', 'asdf'), (8, 6, 'asdf', 'asdf', 'asdf'), (22, 6, 'asdf', 'asdf', 'asdf'), (9, null, 'asdf', 'asdf', 'asdfsad'), (20, 9, 'asdf', 'asdf', 'asdf'), (21, 9, 'asdf', 'asdf', 'asdf'), (10, null, 'asdf', 'asdf', 'asdf'), (11, 10, 'sadf', 'asdf', 'asdf'), (12, 10, 'asdf', 'asdf', 'asdfsf'), (13, 10, 'asdf', 'asdf', 'asdf');"], "clean_up_sql": ["DROP TABLE modules;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls_result = execute_queries(pred_sqls, 'student_club', conn)\n    sol_sqls_result = execute_queries(sol_sqls, 'student_club', conn)\n    assert pred_sqls_result == sol_sqls_result, f\"Expected pred_result and sol_result are the same but pred_result is {pred_sqls_result} and sol_result is {sol_sqls_result}.\"\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: california_schools********************\nCREATE TABLE \"schools\" (\ncdscode text NULL,\nncesdist text NULL,\nncesschool text NULL,\nstatustype text NULL,\ncounty text NULL,\ndistrict text NULL,\nschool text NULL,\nstreet text NULL,\nstreetabr text NULL,\ncity text NULL,\nzip text NULL,\nstate text NULL,\nmailstreet text NULL,\nmailstrabr text NULL,\nmailcity text NULL,\nmailzip text NULL,\nmailstate text NULL,\nphone text NULL,\next text NULL,\nwebsite text NULL,\nopendate date NULL,\ncloseddate date NULL,\ncharter bigint NULL,\ncharternum text NULL,\nfundingtype text NULL,\ndoc text NULL,\ndoctype text NULL,\nsoc text NULL,\nsoctype text NULL,\nedopscode text NULL,\nedopsname text NULL,\neilcode text NULL,\neilname text NULL,\ngsoffered text NULL,\ngsserved text NULL,\nvirtual text NULL,\nmagnet bigint NULL,\nlatitude real NULL,\nlongitude real NULL,\nadmfname1 text NULL,\nadmlname1 text NULL,\nadmemail1 text NULL,\nadmfname2 text NULL,\nadmlname2 text NULL,\nadmemail2 text NULL,\nadmfname3 text NULL,\nadmlname3 text NULL,\nadmemail3 text NULL,\nlastupdate date NULL\n);\n\nExample data:\n       cdscode ncesdist ncesschool statustype  county                           district                                 school                           street                     streetabr    city        zip state                       mailstreet                    mailstrabr mailcity    mailzip mailstate          phone  ext                  website   opendate closeddate  charter charternum     fundingtype doc                          doctype  soc               soctype edopscode   edopsname  eilcode                     eilname gsoffered gsserved virtual  magnet  latitude  longitude admfname1 admlname1                 admemail1 admfname2 admlname2 admemail2 admfname3 admlname3 admemail3 lastupdate\n01100170000000  0691051       None     Active Alameda Alameda County Office of Education                                   None           313 West Winton Avenue          313 West Winton Ave. Hayward 94544-1136    CA           313 West Winton Avenue          313 West Winton Ave.  Hayward 94544-1136        CA (510) 887-0152 None             www.acoe.org       None       None      NaN       None            None  00 County Office of Education (COE) None                  None      None        None     None                        None      None     None    None     NaN 37.658210 -122.09713   L Karen    Monroe         lkmonroe@acoe.org      None      None      None      None      None      None 2015-06-23\n01100170109835  0691051      10546     Closed Alameda Alameda County Office of Education                    FAME Public Charter 39899 Balentine Drive, Suite 335 39899 Balentine Dr., Ste. 335  Newark 94560-5359    CA 39899 Balentine Drive, Suite 335 39899 Balentine Dr., Ste. 335   Newark 94560-5359        CA           None None                     None 2005-08-29 2015-07-31      1.0       0728 Directly funded  00 County Office of Education (COE)   65 K-12 Schools (Public)      TRAD Traditional ELEMHIGH Elementary-High Combination      K-12     K-12       P     0.0 37.521435 -121.99391      None      None                      None      None      None      None      None      None      None 2015-09-01\n01100170112607  0691051      10947     Active Alameda Alameda County Office of Education Envision Academy for Arts & Technology              1515 Webster Street              1515 Webster St. Oakland 94612-3355    CA              1515 Webster Street              1515 Webster St.  Oakland      94612        CA (510) 596-8901 None www.envisionacademy.org/ 2006-08-28       None      1.0       0811 Directly funded  00 County Office of Education (COE)   66 High Schools (Public)      TRAD Traditional       HS                 High School      9-12     9-12       N     0.0 37.804520 -122.26815     Laura    Robell laura@envisionacademy.org      None      None      None      None      None      None 2015-06-18\n==================================================\n\n\nCREATE TABLE \"satscores\" (\ncds text NOT NULL,\nrtype text NULL,\nsname text NULL,\ndname text NULL,\ncname text NULL,\nenroll12 bigint NULL,\nnumtsttakr bigint NULL,\navgscrread bigint NULL,\navgscrmath bigint NULL,\navgscrwrite bigint NULL,\nnumge1500 bigint NULL,\n    PRIMARY KEY (cds),\n    FOREIGN KEY (cds) REFERENCES schools(cdscode)\n);\n\nExample data:\n           cds rtype                        sname                             dname  cname  enroll12  numtsttakr  avgscrread  avgscrmath  avgscrwrite  numge1500\n03100330000000     D                         None Amador County Office of Education Amador        16           0         NaN         NaN          NaN        NaN\n03739810000000     D                         None             Amador County Unified Amador       317          97       525.0       514.0        503.0       60.0\n03739810330050     S North Star Independent Study             Amador County Unified Amador        17           0         NaN         NaN          NaN        NaN\n==================================================\n\n\nCREATE TABLE \"frpm\" (\ncdscode text NULL,\nAcademic Year text NULL,\nCounty Code text NULL,\nDistrict Code bigint NULL,\nSchool Code text NULL,\nCounty Name text NULL,\nDistrict Name text NULL,\nSchool Name text NULL,\nDistrict Type text NULL,\nSchool Type text NULL,\nEducational Option Type text NULL,\nNSLP Provision Status text NULL,\nCharter School (Y/N) bigint NULL,\nCharter School Number text NULL,\nCharter Funding Type text NULL,\nirc bigint NULL,\nLow Grade text NULL,\nHigh Grade text NULL,\nEnrollment (K-12) real NULL,\nFree Meal Count (K-12) real NULL,\nPercent (%) Eligible Free (K-12) real NULL,\nFRPM Count (K-12) real NULL,\nPercent (%) Eligible FRPM (K-12) real NULL,\nEnrollment (Ages 5-17) real NULL,\nFree Meal Count (Ages 5-17) real NULL,\nPercent (%) Eligible Free (Ages 5-17) real NULL,\nFRPM Count (Ages 5-17) real NULL,\nPercent (%) Eligible FRPM (Ages 5-17) real NULL,\n2013-14 CALPADS Fall 1 Certification Status bigint NULL,\n    FOREIGN KEY (cdscode) REFERENCES schools(cdscode)\n);\n\nExample data:\n       cdscode  irc\n01100170109835    1\n01100170112607    1\n01100170118489    1\n==================================================\n\n********************Database: california_schools********************\n\n# User Query:\nI have a table in Postgres that returns flat data. But I would like it to be returned to me in a Json ordered with its children as follows, and I have not been able to solve it.Is there a way in postgresql to order the parent modules with their child modules, I attach an example \"[{\"children\":[{\"id_module\":4,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":1},{\"id_module\":3,\"desc_module\":\"C\",\"module_code\":\"232\",\"name_module\":\"C\",\"id_parent_module\":1},{\"id_module\":2,\"desc_module\":\"B\",\"module_code\":\"011.002\",\"name_module\":\"B\",\"id_parent_module\":1}],\"id_module\":1,\"desc_module\":\"A\",\"module_code\":\"001\",\"name_module\":\"A\",\"id_parent_module\":null},{\"children\":[{\"id_module\":14,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":5}],\"id_module\":5,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":null},{\"children\":[{\"id_module\":22,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":6},{\"id_module\":8,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":6},{\"id_module\":7,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":6}],\"id_module\":6,\"desc_module\":\"qw\",\"module_code\":\"23\",\"name_module\":\"asdf\",\"id_parent_module\":null},{\"children\":[{\"id_module\":21,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":9},{\"id_module\":20,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":9}],\"id_module\":9,\"desc_module\":\"asdfsad\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":null},{\"children\":[{\"id_module\":13,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":10},{\"id_module\":12,\"desc_module\":\"asdfsf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":10},{\"id_module\":11,\"desc_module\":\"asdf\",\"module_code\":\"sadf\",\"name_module\":\"asdf\",\"id_parent_module\":10}],\"id_module\":10,\"desc_module\":\"asdf\",\"module_code\":\"asdf\",\"name_module\":\"asdf\",\"id_parent_module\":null}]\"\n# Error SQL:\nS\nE\nL\nE\nC\nT\n \na\nr\nr\na\ny\n_\nt\no\n_\nj\ns\no\nn\n(\na\nr\nr\na\ny\n_\na\ng\ng\n(\nr\no\nw\n_\nt\no\n_\nj\ns\no\nn\n(\na\nl\ni\na\ns\n)\n)\n)\n \nF\nR\nO\nM\n \n(\ns\ne\nl\ne\nc\nt\n \n*\n \nf\nr\no\nm\n \nm\no\nd\nu\nl\ne\ns\n \n)\n \na\nl\ni\na\ns\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74047973/how-to-make-query-faster", "instance_id": "495_1", "selected_database": "toxicology", "query": "In the context of a toxicology database, a user is trying to query molecules based on specific criteria related to their atoms and bonds. The user's query aims to find molecules that contain certain elements and bond types, with additional constraints on the molecule's label indicating carcinogenicity. The query is complex, involving multiple conditions across different tables, and the user is experiencing slow query performance, seeking to optimize it for faster execution.", "error_sql": ["SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE (a.element LIKE '%cl%' OR a.element LIKE '%c%') AND (b.bond_type = '-' OR b.bond_type = '=') AND m.label = '+' ORDER BY m.molecule_id DESC LIMIT 5 OFFSET 0;"], "sol_sql": ["SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE (a.element = 'cl' OR a.element = 'c') AND (b.bond_type = '-' OR b.bond_type = '=') AND m.label = '+' ORDER BY m.molecule_id DESC LIMIT 5 OFFSET 0;"], "preprocess_sql": ["CREATE EXTENSION IF NOT EXISTS pg_trgm;"], "clean_up_sql": ["DROP INDEX IF EXISTS idx_cards_search;"], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    result = performance_compare_by_qep(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"performance_check returned {result} but expected 1.\"\n    return result"], "efficiency": true, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: toxicology********************\nCREATE TABLE \"bond\" (\nbond_id text NOT NULL,\nmolecule_id text NULL,\nbond_type text NULL,\n    PRIMARY KEY (bond_id),\n    FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id)\n);\n\nExample data:\n  bond_id molecule_id bond_type\nTR000_1_2       TR000         -\nTR000_2_3       TR000         -\nTR000_2_4       TR000         -\n==================================================\n\n\nCREATE TABLE \"molecule\" (\nmolecule_id text NOT NULL,\nlabel text NULL,\n    PRIMARY KEY (molecule_id)\n);\n\nExample data:\nmolecule_id label\n      TR000     +\n      TR001     +\n      TR002     -\n==================================================\n\n\nCREATE TABLE \"atom\" (\natom_id text NOT NULL,\nmolecule_id text NULL,\nelement text NULL,\n    PRIMARY KEY (atom_id),\n    FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id)\n);\n\nExample data:\natom_id molecule_id element\nTR000_1       TR000      cl\nTR000_2       TR000       c\nTR000_3       TR000      cl\n==================================================\n\n\nCREATE TABLE \"connected\" (\natom_id text NOT NULL,\natom_id2 text NOT NULL,\nbond_id text NULL,\n    PRIMARY KEY (atom_id, atom_id2)\n);\n\nExample data:\natom_id atom_id2   bond_id\nTR000_1  TR000_2 TR000_1_2\nTR000_2  TR000_1 TR000_1_2\nTR000_2  TR000_3 TR000_2_3\n==================================================\n\n********************Database: toxicology********************\n\n# User Query:\nIn the context of a toxicology database, a user is trying to query molecules based on specific criteria related to their atoms and bonds. The user's query aims to find molecules that contain certain elements and bond types, with additional constraints on the molecule's label indicating carcinogenicity. The query is complex, involving multiple conditions across different tables, and the user is experiencing slow query performance, seeking to optimize it for faster execution.\n# Error SQL:\nSELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE (a.element LIKE '%cl%' OR a.element LIKE '%c%') AND (b.bond_type = '-' OR b.bond_type = '=') AND m.label = '+' ORDER BY m.molecule_id DESC LIMIT 5 OFFSET 0;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/73755206/is-it-wasteful-to-use-array-agg-to-get-the-first-non-null-value-in-a-column", "instance_id": "496_3", "selected_database": "toxicology", "query": "In the toxicology database, we have a table named 'atom_edits' that records updates to the 'atom' table. Users can update the 'element' or 'molecule_id' of an atom. If a field is not updated, it retains a NULL value. Here's an example of four edits touching two separate atoms. Atom with ID 'TR000_1' received two updates: the first one is updating the 'element' field, the second one touches the 'molecule_id'. Atom with ID 'TR000_2' received one update that changes the 'element'. We need to merge this table such that in the resulting table there's one row per atom, giving the cumulative edits.", "error_sql": ["SELECT atom_id, (ARRAY_REMOVE(ARRAY_AGG(element ORDER BY edit_id DESC), NULL))[1] AS element, (ARRAY_REMOVE(ARRAY_AGG(molecule_id ORDER BY edit_id DESC), NULL))[1] AS molecule_id FROM atom_edits GROUP BY atom_id;"], "sol_sql": ["SELECT atom_id,(ARRAY_AGG(element ORDER BY edit_id DESC) FILTER (WHERE element IS NOT NULL))[1] AS element,(ARRAY_AGG(molecule_id ORDER BY edit_id DESC)FILTER (WHERE molecule_id IS NOT NULL))[1] AS molecule_id FROM atom_edits GROUP BY atom_id"], "preprocess_sql": ["CREATE TABLE atom_edits (edit_id SERIAL PRIMARY KEY, atom_id TEXT, element TEXT, molecule_id TEXT); INSERT INTO atom_edits (atom_id, element, molecule_id) VALUES ('TR000_1', 'cl', NULL), ('TR000_1', NULL, 'TR001'), ('TR000_2', 'c', NULL);"], "clean_up_sql": ["DROP TABLE atom_edits;"], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    result = performance_compare_by_qep(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"performance_check returned {result} but expected 1.\"\n    return result"], "efficiency": true, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: toxicology********************\nCREATE TABLE \"bond\" (\nbond_id text NOT NULL,\nmolecule_id text NULL,\nbond_type text NULL,\n    PRIMARY KEY (bond_id),\n    FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id)\n);\n\nExample data:\n  bond_id molecule_id bond_type\nTR000_1_2       TR000         -\nTR000_2_3       TR000         -\nTR000_2_4       TR000         -\n==================================================\n\n\nCREATE TABLE \"molecule\" (\nmolecule_id text NOT NULL,\nlabel text NULL,\n    PRIMARY KEY (molecule_id)\n);\n\nExample data:\nmolecule_id label\n      TR000     +\n      TR001     +\n      TR002     -\n==================================================\n\n\nCREATE TABLE \"atom\" (\natom_id text NOT NULL,\nmolecule_id text NULL,\nelement text NULL,\n    PRIMARY KEY (atom_id),\n    FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id)\n);\n\nExample data:\natom_id molecule_id element\nTR000_1       TR000      cl\nTR000_2       TR000       c\nTR000_3       TR000      cl\n==================================================\n\n\nCREATE TABLE \"connected\" (\natom_id text NOT NULL,\natom_id2 text NOT NULL,\nbond_id text NULL,\n    PRIMARY KEY (atom_id, atom_id2)\n);\n\nExample data:\natom_id atom_id2   bond_id\nTR000_1  TR000_2 TR000_1_2\nTR000_2  TR000_1 TR000_1_2\nTR000_2  TR000_3 TR000_2_3\n==================================================\n\n********************Database: toxicology********************\n\n# User Query:\nIn the toxicology database, we have a table named 'atom_edits' that records updates to the 'atom' table. Users can update the 'element' or 'molecule_id' of an atom. If a field is not updated, it retains a NULL value. Here's an example of four edits touching two separate atoms. Atom with ID 'TR000_1' received two updates: the first one is updating the 'element' field, the second one touches the 'molecule_id'. Atom with ID 'TR000_2' received one update that changes the 'element'. We need to merge this table such that in the resulting table there's one row per atom, giving the cumulative edits.\n# Error SQL:\nSELECT atom_id, (ARRAY_REMOVE(ARRAY_AGG(element ORDER BY edit_id DESC), NULL))[1] AS element, (ARRAY_REMOVE(ARRAY_AGG(molecule_id ORDER BY edit_id DESC), NULL))[1] AS molecule_id FROM atom_edits GROUP BY atom_id;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/35949877/how-to-include-excluded-rows-in-returning-from-insert-on-conflict", "instance_id": "354_1", "selected_database": "debit_card_specializing", "query": "We are trying to bulk insert a large number of customer records into the `customers` table using an `INSERT` statement with an `ON CONFLICT` clause. The goal is to get the `CustomerID` back for all rows, whether they are already existing or not. The `customers` table has a composite unique constraint on `Segment` and `Currency`. We are encountering an error when trying to run the SQL through Django's cursor. The error message indicates that the `ON CONFLICT DO UPDATE` command cannot affect a row a second time due to duplicate constrained values in the `VALUES` list. We need to handle this situation to ensure that we can insert new records and retrieve the IDs of both new and existing records.", "error_sql": ["INSERT INTO customers (customerid, segment, currency) VALUES (3, 'SME', 'EUR'), (1, 'KAM', 'CZK'), (3, 'SME', 'EUR') ON CONFLICT (customerid, segment, currency) DO UPDATE SET Currency = customers.Currency RETURNING CustomerID;"], "sol_sql": ["INSERT INTO customers (customerid, segment, currency)\nSELECT DISTINCT ON (customerid, segment, currency) \n       customerid, \n       segment, \n       currency\nFROM (\n    VALUES\n       (3, 'SME', 'EUR'),\n       (1, 'KAM', 'CZK'),\n       (3, 'SME', 'EUR')\n) AS v(customerid, segment, currency)\nON CONFLICT (customerid, segment, currency)\nDO UPDATE \n   SET currency = customers.currency\nRETURNING CustomerID"], "preprocess_sql": ["ALTER TABLE customers\nADD CONSTRAINT customers_customerid_segment_currency_uk\nUNIQUE (customerid, segment, currency);"], "clean_up_sql": ["DROP TABLE customers;"], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_pred_query_result_1 = execute_queries(pred_sqls, db_name,conn)[0] \n    assert test_pred_query_result_1 == [(1,), (3,)]"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: debit_card_specializing********************\nCREATE TABLE \"customers\" (\ncustomerid bigint NOT NULL,\nsegment text NULL,\ncurrency text NULL,\n    PRIMARY KEY (customerid)\n);\n\nExample data:\n customerid segment currency\n          3     SME      EUR\n          5     LAM      EUR\n          6     SME      EUR\n==================================================\n\n\nCREATE TABLE \"gasstations\" (\ngasstationid bigint NOT NULL,\nchainid bigint NULL,\ncountry text NULL,\nsegment text NULL,\n    PRIMARY KEY (gasstationid)\n);\n\nExample data:\n gasstationid  chainid country         segment\n           44       13     CZE Value for money\n           45        6     CZE         Premium\n           46       23     CZE           Other\n==================================================\n\n\nCREATE TABLE \"products\" (\nproductid bigint NOT NULL,\ndescription text NULL,\n    PRIMARY KEY (productid)\n);\n\nExample data:\n productid  description\n         1 Rucní zadání\n         2        Nafta\n         3      Special\n==================================================\n\n\nCREATE TABLE \"yearmonth\" (\ncustomerid bigint NULL,\ndate text NULL,\nconsumption real NULL\n);\n\nExample data:\n customerid   date  consumption\n          5 201207       528.30\n          5 201302      1598.28\n          5 201303      1931.36\n==================================================\n\n\nCREATE TABLE \"transactions_1k\" (\ntransactionid bigint NOT NULL DEFAULT nextval('transactions_1k_transactionid_seq'::regclass),\ndate date NULL,\ntime text NULL,\ncustomerid bigint NULL,\ncardid bigint NULL,\ngasstationid bigint NULL,\nproductid bigint NULL,\namount bigint NULL,\nprice real NULL,\n    PRIMARY KEY (transactionid)\n);\n\nExample data:\n transactionid       date     time  customerid  cardid  gasstationid  productid  amount  price\n             1 2012-08-24 09:41:00       31543  486621          3704          2      28 672.64\n             2 2012-08-24 10:03:00       46707  550134          3704          2      18 430.72\n             3 2012-08-24 10:03:00       46707  550134          3704         23       1 121.99\n==================================================\n\n********************Database: debit_card_specializing********************\n\n# User Query:\nWe are trying to bulk insert a large number of customer records into the `customers` table using an `INSERT` statement with an `ON CONFLICT` clause. The goal is to get the `CustomerID` back for all rows, whether they are already existing or not. The `customers` table has a composite unique constraint on `Segment` and `Currency`. We are encountering an error when trying to run the SQL through Django's cursor. The error message indicates that the `ON CONFLICT DO UPDATE` command cannot affect a row a second time due to duplicate constrained values in the `VALUES` list. We need to handle this situation to ensure that we can insert new records and retrieve the IDs of both new and existing records.\n# Error SQL:\nINSERT INTO customers (customerid, segment, currency) VALUES (3, 'SME', 'EUR'), (1, 'KAM', 'CZK'), (3, 'SME', 'EUR') ON CONFLICT (customerid, segment, currency) DO UPDATE SET Currency = customers.Currency RETURNING CustomerID;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/50296102/cannot-extract-elements-from-a-scalar", "instance_id": "355_1", "selected_database": "financial", "query": "In the financial database, there are two tables: 'client' and 'disp'. The 'disp' table contains a B column named 'addresses' which stores address information for each client. I attempted to join the 'client' and 'disp' tables on the 'client_id' field and then use b_array_elements to extract address details. However, I encountered an error 'cannot extract elements from a scalar' because some entries in the 'addresses' column are not arrays. I need to handle these cases properly to extract the 'PostCode' from the addresses B column for a specific client with client_id = 12345.", "error_sql": ["SELECT \n    client.client_id, \n    client.gender, \n    disp.disp_id, \n    address ->> 'PostCode' AS PostCode\nFROM client\nFULL JOIN disp ON (client.client_id = disp.client_id),\njsonb_array_elements(disp.addresses) AS address\nWHERE disp.client_id = 12345;"], "sol_sql": ["\nUPDATE disp\nSET addresses = '[{\"PostCode\": null}]'\nWHERE jsonb_typeof(addresses) <> 'array'\n   OR addresses = '[]';\n\nSELECT \n    c.client_id, \n    c.gender, \n    d.disp_id, \n    addr ->> 'PostCode' AS PostCode\nFROM client c\nFULL JOIN disp d ON c.client_id = d.client_id,\njsonb_array_elements(d.addresses) AS addr\nWHERE c.client_id = 12345;"], "preprocess_sql": ["ALTER TABLE disp \nADD COLUMN addresses jsonb;", "INSERT INTO disp (disp_id, client_id, account_id, addresses) VALUES\n    (324124, 32323432, 4342443141, '[{\"PostCode\":\"12345\"}]'),\n    (43244241, 3455566, 645634, '[null]'),\n    (42342436, 12345, 5346574, 'null');"], "clean_up_sql": ["\n    DELETE FROM disp \n    WHERE disp_id IN (324124, 43244241, 42342436);\n    ", "\n    ALTER TABLE disp \n    DROP COLUMN addresses;\n    "], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_pred_query_result_1 = execute_queries(pred_sqls, db_name,conn)[0] \n    assert test_pred_query_result_1 == []"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, there are two tables: 'client' and 'disp'. The 'disp' table contains a B column named 'addresses' which stores address information for each client. I attempted to join the 'client' and 'disp' tables on the 'client_id' field and then use b_array_elements to extract address details. However, I encountered an error 'cannot extract elements from a scalar' because some entries in the 'addresses' column are not arrays. I need to handle these cases properly to extract the 'PostCode' from the addresses B column for a specific client with client_id = 12345.\n# Error SQL:\nSELECT \n    client.client_id, \n    client.gender, \n    disp.disp_id, \n    address ->> 'PostCode' AS PostCode\nFROM client\nFULL JOIN disp ON (client.client_id = disp.client_id),\njsonb_array_elements(disp.addresses) AS address\nWHERE disp.client_id = 12345;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/63969970/how-to-update-or-insert-in-postgresql", "instance_id": "357_1", "selected_database": "financial", "query": "In the financial database, I want to update the 'amount' in the 'loan' table for a specific 'account_id' and 'date' if it exists, or insert a new record if it does not. However, I do not want the 'loan_id' to increment if an update occurs because it is an auto-incrementing SERIAL column. The 'loan_id' should only increment when a new record is inserted to maintain a sequential order without gaps.", "error_sql": ["\nINSERT INTO loan (\n    loan_id, \n    account_id, \n    date, \n    amount, \n    duration, \n    payments, \n    status\n)\nVALUES (\n    DEFAULT, \n    2, \n    '1996-04-29', \n    30276, \n    12, \n    2523.0, \n    'B'\n)\nON CONFLICT (loan_id, account_id, date)\nDO UPDATE\n    SET amount = loan.amount + 1000;"], "sol_sql": ["-- Correct / Solution SQL\nINSERT INTO loan (\n  account_id,\n  date,\n  amount,\n  duration,\n  payments,\n  status\n)\nVALUES (\n  2,\n  '1996-04-29',\n  30276,\n  12,\n  2523.0,\n  'B'\n)\nON CONFLICT (account_id, date)\nDO UPDATE\n   SET amount = EXCLUDED.amount + 1000;"], "preprocess_sql": ["CREATE TABLE IF NOT EXISTS loan (loan_id SERIAL PRIMARY KEY, account_id int NOT NULL, date date NOT NULL, amount int NOT NULL, duration int NOT NULL, payments double NOT NULL, status text NOT NULL, UNIQUE(account_id, date)); INSERT INTO loan (loan_id, account_id, date, amount, duration, payments, status) VALUES (134411, 2, '1994-01-05', 80952, 24, 3373.0, 'A');", "\n    DELETE FROM loan t1\n    USING loan t2\n    WHERE t1.account_id = t2.account_id\n      AND t1.date = t2.date\n      AND t1.loan_id > t2.loan_id;\n    ", "ALTER TABLE loan\n    ADD CONSTRAINT loan_accountid_date_uk\n    UNIQUE (account_id, date);"], "clean_up_sql": ["DROP TABLE IF EXISTS loan;"], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    \"\"\"\n    This function tests whether the given pred_sqls can fulfill the requirement:\n      \"The 'loan_id' should only increment when a new record is inserted.\"\n    Specifically, if (account_id, date) already exists, we expect to UPDATE instead\n    of inserting a new row or incrementing the loan_id.\n    \n    - We create a fresh 'loan' table with a unique constraint on (account_id, date).\n    - Insert one baseline record that matches the sol_sqls initial amount (30276).\n    - Run the pred_sqls (which presumably does an UPSERT on the same (account_id, date)).\n    - Check if we still have exactly one row with the updated amount (30276 + 1000 = 31276).\n    - If there's more than one row or the amount is not updated to 31276, we fail.\n    \"\"\"\n\n    # 1) Drop the table if it exists, to start fresh\n    drop_sql = [\"DROP TABLE IF EXISTS loan CASCADE;\"]\n    execute_queries(drop_sql, db_name, conn)\n\n    # 2) Create a fresh 'loan' table with a unique constraint on (account_id, date)\n    create_sql = [\"\"\"\n        CREATE TABLE loan (\n            loan_id   SERIAL PRIMARY KEY,\n            account_id INT NOT NULL,\n            date       DATE NOT NULL,\n            amount     INT NOT NULL,\n            duration   INT NOT NULL,\n            payments   DOUBLE PRECISION NOT NULL,\n            status     TEXT NOT NULL,\n            UNIQUE(account_id, date)\n        );\n    \"\"\"]\n    execute_queries(create_sql, db_name, conn)\n\n    # 3) Insert an initial record that we expect to update later\n    #    We use the same baseline amount as sol_sqls (30276) so the final will be 31276.\n    init_insert_sql = [\"\"\"\n        INSERT INTO loan (account_id, date, amount, duration, payments, status)\n        VALUES (2, '1996-04-29', 30276, 12, 2500.0, 'X');\n    \"\"\"]\n    execute_queries(init_insert_sql, db_name, conn)\n\n    # 4) Execute the pred_sqls (the user's upsert logic)\n    execute_queries(pred_sqls, db_name, conn)\n\n    # 5) Check how many rows we have for (account_id=2, date='1996-04-29') \n    check_sql = [\"SELECT loan_id, account_id, date, amount FROM loan WHERE account_id=2 AND date='1996-04-29';\"]\n    rows = execute_queries(check_sql, db_name, conn)[0]\n\n    # 6) Evaluate the result\n    assert len(rows) == 1, (\n        f\"Expected only 1 row for (account_id=2, date='1996-04-29'), but found {len(rows)}. \"\n        \"This likely means the upsert inserted a new row instead of updating.\"\n    )\n\n    loan_id_val, acct_val, date_val, amount_val = rows[0]\n\n    # Amount should be updated from 30276 to 31276 (30276 + 1000).\n    expected_amount = 30276 + 1000\n    assert amount_val == expected_amount, (\n        f\"Expected amount={expected_amount} after update, but got {amount_val}. \"\n        \"This likely means the existing row was not updated correctly (or the conflict logic is wrong).\"\n    )"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, I want to update the 'amount' in the 'loan' table for a specific 'account_id' and 'date' if it exists, or insert a new record if it does not. However, I do not want the 'loan_id' to increment if an update occurs because it is an auto-incrementing SERIAL column. The 'loan_id' should only increment when a new record is inserted to maintain a sequential order without gaps.\n# Error SQL:\n\nINSERT INTO loan (\n    loan_id, \n    account_id, \n    date, \n    amount, \n    duration, \n    payments, \n    status\n)\nVALUES (\n    DEFAULT, \n    2, \n    '1996-04-29', \n    30276, \n    12, \n    2523.0, \n    'B'\n)\nON CONFLICT (loan_id, account_id, date)\nDO UPDATE\n    SET amount = loan.amount + 1000;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74500008/simplifying-where-not-in-and-where-not-in", "instance_id": "397_2", "selected_database": "card_games", "query": "In our card_games database, we have a large table named cards which contains detailed information about each card. We also have two smaller tables, sel1 and sel2, which contain a subset of the cards based on certain criteria. The goal is to delete rows from the cards table where the combination of (uuid, setCode, rarity, manaCost) does not exist in either sel1 or sel2. The current query uses two separate NOT IN clauses, which is both verbose and potentially inefficient. We need to rewrite this query to make it more concise and performant.", "error_sql": ["DELETE FROM cards WHERE (uuid, setCode, rarity, manaCost) NOT IN (SELECT uuid, setCode, rarity, manaCost FROM sel1 WHERE uuid IS NOT NULL AND setCode IS NOT NULL AND rarity IS NOT NULL AND manaCost IS NOT NULL) AND (uuid, setCode, rarity, manaCost) NOT IN (SELECT uuid, setCode, rarity, manaCost FROM sel2 WHERE uuid IS NOT NULL AND setCode IS NOT NULL AND rarity IS NOT NULL AND manaCost IS NOT NULL);"], "sol_sql": ["DELETE FROM cards WHERE (uuid, setCode, rarity, manaCost) NOT IN (SELECT uuid, setCode, rarity, manaCost FROM sel1 WHERE uuid IS NOT NULL AND setCode IS NOT NULL AND rarity IS NOT NULL AND manaCost IS NOT NULL UNION ALL SELECT uuid, setCode, rarity, manaCost FROM sel2 WHERE uuid IS NOT NULL AND setCode IS NOT NULL AND rarity IS NOT NULL AND manaCost IS NOT NULL);"], "preprocess_sql": ["\nCREATE TABLE sel1 AS SELECT uuid, setCode, rarity, manaCost FROM cards WHERE id % 2 = 0; CREATE TABLE sel2 AS SELECT uuid, setCode, rarity, manaCost FROM cards WHERE id % 3 = 0;\n"], "clean_up_sql": ["\nDROP TABLE sel1; DROP TABLE sel2;\n"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_pred_query_result_2 = perform_query_on_postgresql_databases('SELECT COUNT(*) FROM cards WHERE (uuid, setCode, rarity, manaCost) NOT IN (SELECT uuid, setCode, rarity, manaCost FROM sel1 UNION SELECT uuid, setCode, rarity, manaCost FROM sel2);', db_name)[0]\n    assert test_pred_query_result_2[0][0] == 0, f'Expected count to match, but found {pred_query_result[0][0]} and {test_pred_query_result_2[0][0]}'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_pred_query_result_5 = perform_query_on_postgresql_databases('SELECT uuid, setCode, rarity, manaCost FROM cards WHERE id % 2 != 0 AND id % 3 != 0;', db_name)[0]\n    assert len(test_pred_query_result_5) == 0, f'Expected 0 rows, but found {len(test_pred_query_result_5)} rows'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_pred_query_result_6 = perform_query_on_postgresql_databases('SELECT COUNT(*) FROM cards;', db_name[0]\n    assert test_pred_query_result_6[0][0] == 32993, f'Expected to find 32993 rows, but found  {test_pred_query_result_6[0][0]} rows'\n    ", "\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    #result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    #assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    result = performance_compare_by_qep(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"performance_check returned {result} but expected 1.\"\n    return result\n    "], "efficiency": true, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nIn our card_games database, we have a large table named cards which contains detailed information about each card. We also have two smaller tables, sel1 and sel2, which contain a subset of the cards based on certain criteria. The goal is to delete rows from the cards table where the combination of (uuid, setCode, rarity, manaCost) does not exist in either sel1 or sel2. The current query uses two separate NOT IN clauses, which is both verbose and potentially inefficient. We need to rewrite this query to make it more concise and performant.\n# Error SQL:\nDELETE FROM cards WHERE (uuid, setCode, rarity, manaCost) NOT IN (SELECT uuid, setCode, rarity, manaCost FROM sel1 WHERE uuid IS NOT NULL AND setCode IS NOT NULL AND rarity IS NOT NULL AND manaCost IS NOT NULL) AND (uuid, setCode, rarity, manaCost) NOT IN (SELECT uuid, setCode, rarity, manaCost FROM sel2 WHERE uuid IS NOT NULL AND setCode IS NOT NULL AND rarity IS NOT NULL AND manaCost IS NOT NULL);\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/71056951/apply-function-to-all-columns-in-a-postgres-table-dynamically", "instance_id": "359_1", "selected_database": "financial", "query": "In the financial database, I want to apply a forward fill function to all nullable columns of a table. The forward fill function should be applied to each column dynamically, given the table name, an ID column, and a row number column. For example, using the 'trans' table, I want to apply the forward fill to all nullable columns, partitioned by 'account_id' and ordered by 'date'. The function should handle any table with nullable columns and apply the forward fill accordingly. However, my initial attempt at writing the function resulted in a syntax error. I need a corrected version of the function that works for any table with nullable columns.", "error_sql": ["CREATE OR REPLACE FUNCTION f_gap_fill_update(tbl text, id text, row_num text) RETURNS void LANGUAGE plpgsql AS $func$ DECLARE tmp text[]; col text; BEGIN select array ( select column_name from information_schema.columns c where table_name = tbl ) into tmp; foreach col in array tmp loop execute 'update '||tbl||' set '||col||' = gapfill('||col||') OVER w AS '||col||' where '||tbl||'.row_num = '||col||'.row_num window w as (PARTITION BY '||id||' ORDER BY '||row_num||') returning *;'; end loop; end $func$;"], "sol_sql": ["CREATE OR REPLACE FUNCTION f_gap_fill_update(\n    _tbl regclass, \n    _id text, \n    _row_num text, \n    OUT nullable_columns int, \n    OUT updated_rows int\n) LANGUAGE plpgsql AS $func$\nDECLARE \n    _pk text := quote_ident(_row_num); \n    _sql text;\nBEGIN\n    SELECT INTO _sql, nullable_columns concat_ws(E'\n',\n        'UPDATE ' || _tbl || ' t',\n        'SET (' || string_agg(quote_ident(a.attname), ', ') || ') = ',\n        '    (' || string_agg('u.' || quote_ident(a.attname), ', ') || ')',\n        'FROM (',\n        '   SELECT ' || _pk,\n        '        , ' || string_agg(\n                     format(\n                         'COALESCE(%1$I, MAX(%1$I) OVER (PARTITION BY %2$s ORDER BY %3$s ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)) AS %1$I',\n                         a.attname, _id, _pk\n                     ), \n                     ', '\n                 ),\n        '   FROM ' || _tbl,\n        '   ) u',\n        format('WHERE t.%1$s = u.%1$s', _pk),\n        'AND (' || string_agg('t.' || quote_ident(a.attname), ', ') || ') IS DISTINCT FROM',\n        '    (' || string_agg('u.' || quote_ident(a.attname), ', ') || ')'\n    ), \n    count(*)\n    FROM (\n        SELECT a.attname \n        FROM pg_attribute a \n        WHERE a.attrelid = _tbl \n          AND a.attnum > 0 \n          AND NOT a.attisdropped \n          AND NOT a.attnotnull \n        ORDER BY a.attnum\n    ) a;\n\n    RAISE NOTICE 'Generated SQL: %', _sql;\n\n    IF nullable_columns = 0 THEN \n        RAISE EXCEPTION 'No nullable columns found in table >>%<<', _tbl; \n    ELSIF _sql IS NULL THEN \n        RAISE EXCEPTION 'Generated SQL is NULL. Check table or column logic!';\n    END IF;\n\n    EXECUTE _sql;\n\n    GET DIAGNOSTICS updated_rows = ROW_COUNT; \nEND $func$;"], "preprocess_sql": ["CREATE OR REPLACE FUNCTION gap_fill_internal(s anyelement, v anyelement) RETURNS anyelement LANGUAGE plpgsql AS $func$ BEGIN RETURN COALESCE(v, s); END $func$; CREATE AGGREGATE gap_fill(anyelement) ( SFUNC = gap_fill_internal, STYPE = anyelement );"], "clean_up_sql": [""], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    def execute_sqls(sql_list):\n        with conn.cursor() as cur:\n            for sql in sql_list:\n                try:\n                    cur.execute(sql)\n                    conn.commit()\n                except Exception as e:\n                    conn.rollback()\n                    return str(e)\n        return \"success\"\n\n    def validate_forward_fill(limit=10):\n        with conn.cursor() as cur:\n            cur.execute(\"\"\"\n                SELECT t1.trans_id, t1.account_id, t1.amount AS current_amount, t2.amount AS previous_amount\n                FROM trans t1\n                LEFT JOIN trans t2\n                  ON t1.account_id = t2.account_id\n                 AND t1.date > t2.date\n                WHERE t1.amount IS NULL AND t2.amount IS NOT NULL\n                ORDER BY t1.date\n                LIMIT %s;\n            \"\"\", (limit,))\n            rows = cur.fetchall()\n            if rows:\n                return False\n            return True\n\n    def debug_generated_sql():\n        with conn.cursor() as cur:\n            cur.execute(\"\"\"\n                SET client_min_messages TO NOTICE;\n                DO $$\n                BEGIN\n                    PERFORM f_gap_fill_update('trans', 'account_id', 'trans_id');\n                END $$;\n            \"\"\")\n            cur.execute(\"RESET client_min_messages;\") \n\n    def reset_trans_table():\n        with conn.cursor() as cur:\n            cur.execute(\"\"\"\n                UPDATE trans\n                SET amount = CASE\n                    WHEN trans_id = 1 THEN 1000\n                    WHEN trans_id IN (5, 6, 7, 8, 9, 10, 11, 12) THEN NULL\n                    ELSE amount\n                END;\n            \"\"\")\n            conn.commit()\n\n    reset_trans_table()\n    pred_result = execute_sqls(pred_sqls)\n    assert pred_result == \"success\"\n\n    debug_generated_sql()\n    assert validate_forward_fill(), \"Validate forward fill function logic.\"\n\n    return 1"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, I want to apply a forward fill function to all nullable columns of a table. The forward fill function should be applied to each column dynamically, given the table name, an ID column, and a row number column. For example, using the 'trans' table, I want to apply the forward fill to all nullable columns, partitioned by 'account_id' and ordered by 'date'. The function should handle any table with nullable columns and apply the forward fill accordingly. However, my initial attempt at writing the function resulted in a syntax error. I need a corrected version of the function that works for any table with nullable columns.\n# Error SQL:\nCREATE OR REPLACE FUNCTION f_gap_fill_update(tbl text, id text, row_num text) RETURNS void LANGUAGE plpgsql AS $func$ DECLARE tmp text[]; col text; BEGIN select array ( select column_name from information_schema.columns c where table_name = tbl ) into tmp; foreach col in array tmp loop execute 'update '||tbl||' set '||col||' = gapfill('||col||') OVER w AS '||col||' where '||tbl||'.row_num = '||col||'.row_num window w as (PARTITION BY '||id||' ORDER BY '||row_num||') returning *;'; end loop; end $func$;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/70632674/update-order-of-all-affected-rows-on-postgresql", "instance_id": "360_1", "selected_database": "financial", "query": "In the financial database, there is a table named 'card' that records details of issued cards. Each card is identified by a 'card_id' and is associated with a 'disp_id', along with other details like 'type' and 'issued'. Let's say we want to change the order of a specific 'disp_id' within the same 'type'. For instance, we want to set the 'disp_id' of a card with 'disp_id' = 41 to 1. This change should reorder the 'disp_id' values of all affected cards within the same 'type'. The expected result is that the card with 'disp_id' = 41 should now have 'disp_id' = 1, and the other cards' 'disp_id' values should be incremented accordingly.", "error_sql": ["UPDATE card SET disp_id = 1 WHERE disp_id = 41;"], "sol_sql": ["UPDATE card c\nSET disp_id =\n    CASE \n        WHEN c.disp_id = sub.disp_id THEN 1\n        WHEN c.disp_id < sub.disp_id THEN c.disp_id + 1\n        ELSE c.disp_id\n    END\nFROM (\n    SELECT disp_id, type\n    FROM card\n    WHERE disp_id = 41\n) sub\nWHERE c.type = sub.type\n  AND c.disp_id <= sub.disp_id;"], "preprocess_sql": [""], "clean_up_sql": [""], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    # Execute the predicted SQLs\n    _, pred_exec_err, _ = execute_queries(pred_sqls, db_name, conn)\n    assert pred_exec_err == False, \"Error in executing predicted SQLs\"\n\n    # Validate the change\n    query = \"SELECT disp_id FROM card WHERE card_id = 1 AND type = 'gold';\"\n    res, _, _ = execute_queries([query], db_name, conn)\n    assert len(res) == 1, \"No matching record found for card_id = 1 and type = 'gold'\"\n    assert res[0][0] == 10, f\"Expected disp_id to be 10, but got {res[0][0]}\"\n\n    return 1"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nIn the financial database, there is a table named 'card' that records details of issued cards. Each card is identified by a 'card_id' and is associated with a 'disp_id', along with other details like 'type' and 'issued'. Let's say we want to change the order of a specific 'disp_id' within the same 'type'. For instance, we want to set the 'disp_id' of a card with 'disp_id' = 41 to 1. This change should reorder the 'disp_id' values of all affected cards within the same 'type'. The expected result is that the card with 'disp_id' = 41 should now have 'disp_id' = 1, and the other cards' 'disp_id' values should be incremented accordingly.\n# Error SQL:\nUPDATE card SET disp_id = 1 WHERE disp_id = 41;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/78968087/what-causes-a-row-estimate-declared-on-a-custom-function-to-sometimes-be-ignored", "instance_id": "361_1", "selected_database": "financial", "query": "I have created the following custom SQL function on a PostgreSQL 16.1 server to generate a series of monthly dates between two given dates for analyzing transaction trends over time:\\nCREATE OR REPLACE FUNCTION public.generate_series_monthly(a date, b date)\\nRETURNS SETOF date LANGUAGE SQL IMMUTABLE PARALLEL SAFE ROWS 12 AS $function$\\nselect generate_series(date_trunc('month', a), date_trunc('month', b), '1 month')\\n$function$;\\nSpecifically, I have added the row estimate parameter, and as expected, I am seeing this estimate in some simple queries:\\nexplain select generate_series_monthly('2023-01-01', '2023-12-01');\\nHowever, in some uses in queries, I see it falling back to the default of 1000:\\nexplain select * from generate_series_monthly('2023-01-01', '2023-12-01');\\nI would expect this second query to also use the 12 row estimate. Why is it resorting to 1000?", "error_sql": ["CREATE OR REPLACE FUNCTION public.generate_series_monthly(a date, b date) RETURNS SETOF date LANGUAGE SQL IMMUTABLE PARALLEL SAFE ROWS 10 AS $function$ select generate_series(date_trunc('month', a), date_trunc('month', b), '1 month') $function$; EXPLAIN SELECT generate_series_monthly('2024-01-01', '2024-05-01'); EXPLAIN SELECT * FROM generate_series_monthly('2024-01-01', '2024-05-01');"], "sol_sql": ["\n  CREATE OR REPLACE FUNCTION public.generate_series_monthly(a date, b date)\n    RETURNS SETOF date\n    LANGUAGE SQL\n    IMMUTABLE\n    PARALLEL SAFE\n    ROWS 10\n  AS\n  $function$\n    SELECT generate_series(\n      date_trunc('month', a),\n      date_trunc('month', b),\n      '1 month'\n    );\n  $function$;\n  ", "\n  EXPLAIN VERBOSE\n  SELECT generate_series_monthly('2024-01-01', '2024-05-01');\n  "], "preprocess_sql": [""], "clean_up_sql": [""], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    \"\"\"\n    Checks if pred_sqls (the tested scenario) produces the same \"rows=10\" estimate\n    as sol_sqls (the correct solution), using assert statements.\n\n    :param pred_sqls: list[str] - SQL statements to be tested\n    :param sol_sqls: list[str] - SQL statements that represent the known correct solution\n    :param db_name: str - name of the database to connect to (if needed)\n    :param conn: psycopg2.extensions.connection - an established DB connection\n    :return: None - the function will raise AssertionError if the conditions are not met\n    \"\"\"\n    def run_sql_and_get_explain_rows(sql_list):\n        \"\"\"\n        Executes a list of SQL statements and returns the output rows of the last\n        EXPLAIN statement (if any).\n        \"\"\"\n        rows_output = []\n        with conn.cursor() as cur:\n            for sql in sql_list:\n                cur.execute(sql)\n                # If it is an EXPLAIN statement, fetch and store its result\n                if sql.strip().upper().startswith(\"EXPLAIN\"):\n                    rows_output = cur.fetchall()\n        return rows_output\n\n    # Run the tested SQL and check for \"rows=10\"\n    pred_explain_rows = run_sql_and_get_explain_rows(pred_sqls)\n    pred_has_rows10 = any(\"rows=10\" in str(row) for row in pred_explain_rows)\n\n    assert pred_has_rows10, (\n        \"Expected to find 'rows=10' in the tested scenario's EXPLAIN output, but it was not found.\"\n    )\n\n    return 1"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: financial********************\nCREATE TABLE \"loan\" (\nloan_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\ndate date NULL,\namount bigint NULL,\nduration bigint NULL,\npayments real NULL,\nstatus text NULL,\n    PRIMARY KEY (loan_id)\n);\n\nExample data:\n loan_id  account_id       date  amount  duration  payments status\n    4959           2 1994-01-05   80952        24    3373.0      A\n    4961          19 1996-04-29   30276        12    2523.0      B\n    4962          25 1997-12-08   30276        12    2523.0      A\n==================================================\n\n\nCREATE TABLE \"client\" (\nclient_id bigint NOT NULL,\ngender text NULL,\nbirth_date date NULL,\ndistrict_id bigint NULL,\n    PRIMARY KEY (client_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n client_id gender birth_date  district_id\n         1      F 1970-12-13           18\n         2      M 1945-02-04            1\n         3      F 1940-10-09            1\n==================================================\n\n\nCREATE TABLE \"district\" (\ndistrict_id bigint NOT NULL DEFAULT '0'::bigint,\na2 text NULL,\na3 text NULL,\na4 text NULL,\na5 text NULL,\na6 text NULL,\na7 text NULL,\na8 bigint NULL,\na9 bigint NULL,\na10 real NULL,\na11 bigint NULL,\na12 real NULL,\na13 real NULL,\na14 bigint NULL,\na15 bigint NULL,\na16 bigint NULL,\n    PRIMARY KEY (district_id)\n);\n\nExample data:\n district_id          a2              a3      a4 a5 a6 a7  a8  a9   a10   a11  a12  a13  a14   a15   a16\n           1 Hl.m. Praha          Prague 1204953  0  0  0   1   1 100.0 12541  0.2 0.43  167 85677 99107\n           2     Benesov central Bohemia   88884 80 26  6   2   5  46.7  8507  1.6 1.85  132  2159  2674\n           3      Beroun central Bohemia   75232 55 26  4   1   5  41.7  8980  1.9 2.21  111  2824  2813\n==================================================\n\n\nCREATE TABLE \"trans\" (\ntrans_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL DEFAULT '0'::bigint,\ndate date NULL,\ntype text NULL,\noperation text NULL,\namount bigint NULL,\nbalance bigint NULL,\nk_symbol text NULL,\nbank text NULL,\naccount bigint NULL,\n    PRIMARY KEY (trans_id)\n);\n\nExample data:\n trans_id  account_id       date   type     operation  amount  balance k_symbol bank    account\n        1           1 1995-03-24 PRIJEM         VKLAD    1000     1000     None None        NaN\n        5           1 1995-04-13 PRIJEM PREVOD Z UCTU    3679     4679     None   AB 41403269.0\n        6           1 1995-05-13 PRIJEM PREVOD Z UCTU    3679    20977     None   AB 41403269.0\n==================================================\n\n\nCREATE TABLE \"account\" (\naccount_id bigint NOT NULL DEFAULT '0'::bigint,\ndistrict_id bigint NULL DEFAULT '0'::bigint,\nfrequency text NULL,\ndate date NULL,\n    PRIMARY KEY (account_id),\n    FOREIGN KEY (district_id) REFERENCES district(district_id)\n);\n\nExample data:\n account_id  district_id        frequency       date\n          1           18 POPLATEK MESICNE 1995-03-24\n          2            1 POPLATEK MESICNE 1993-02-26\n          3            5 POPLATEK MESICNE 1997-07-07\n==================================================\n\n\nCREATE TABLE \"card\" (\ncard_id bigint NOT NULL DEFAULT '0'::bigint,\ndisp_id bigint NULL,\ntype text NULL,\nissued date NULL,\n    PRIMARY KEY (card_id),\n    FOREIGN KEY (disp_id) REFERENCES disp(disp_id)\n);\n\nExample data:\n card_id  disp_id    type     issued\n       1        9    gold 1998-10-16\n       2       19 classic 1998-03-13\n       3       41    gold 1995-09-03\n==================================================\n\n\nCREATE TABLE \"order\" (\norder_id bigint NOT NULL DEFAULT '0'::bigint,\naccount_id bigint NULL,\nbank_to text NULL,\naccount_to bigint NULL,\namount real NULL,\nk_symbol text NULL,\n    PRIMARY KEY (order_id)\n);\n\nExample data:\n order_id  account_id bank_to  account_to  amount k_symbol\n    29401           1      YZ    87144583  2452.0     SIPO\n    29402           2      ST    89597016  3372.7     UVER\n    29403           2      QR    13943797  7266.0     SIPO\n==================================================\n\n\nCREATE TABLE \"disp\" (\ndisp_id bigint NOT NULL,\nclient_id bigint NULL,\naccount_id bigint NULL,\ntype text NULL,\n    PRIMARY KEY (disp_id)\n);\n\nExample data:\n disp_id  client_id  account_id      type\n       1          1           1     OWNER\n       2          2           2     OWNER\n       3          3           2 DISPONENT\n==================================================\n\n********************Database: financial********************\n\n# User Query:\nI have created the following custom SQL function on a PostgreSQL 16.1 server to generate a series of monthly dates between two given dates for analyzing transaction trends over time:\\nCREATE OR REPLACE FUNCTION public.generate_series_monthly(a date, b date)\\nRETURNS SETOF date LANGUAGE SQL IMMUTABLE PARALLEL SAFE ROWS 12 AS $function$\\nselect generate_series(date_trunc('month', a), date_trunc('month', b), '1 month')\\n$function$;\\nSpecifically, I have added the row estimate parameter, and as expected, I am seeing this estimate in some simple queries:\\nexplain select generate_series_monthly('2023-01-01', '2023-12-01');\\nHowever, in some uses in queries, I see it falling back to the default of 1000:\\nexplain select * from generate_series_monthly('2023-01-01', '2023-12-01');\\nI would expect this second query to also use the 12 row estimate. Why is it resorting to 1000?\n# Error SQL:\nCREATE OR REPLACE FUNCTION public.generate_series_monthly(a date, b date) RETURNS SETOF date LANGUAGE SQL IMMUTABLE PARALLEL SAFE ROWS 10 AS $function$ select generate_series(date_trunc('month', a), date_trunc('month', b), '1 month') $function$; EXPLAIN SELECT generate_series_monthly('2024-01-01', '2024-05-01'); EXPLAIN SELECT * FROM generate_series_monthly('2024-01-01', '2024-05-01');\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/78224394/query-to-sum-over-multiple-rows-based-on-column", "instance_id": "363_1", "selected_database": "european_football_2", "query": "In the context of european_football_2 database whose match table contains columns such as season, date, home_team_goal, away_team_goal, etc. Now, suppose you want to treat any match ending in a draw (home_team_goal = away_team_goal) as if an invoice were being issued (similar to setting Invoiced = 1). Between two such draws, you might have several other matches that do not end in a draw (equivalent to Invoiced = 0), and for each of those matches, you want to treat the total goals scored (i.e., home_team_goal + away_team_goal) like a running amount you accumulate. Finally, you only want to keep the draw rows, and each of those rows should carry the sum of total goals scored since the last draw.", "error_sql": ["SELECT \n    m.id,\n    m.date,\n    CASE WHEN m.home_team_goal = m.away_team_goal THEN 1 ELSE 0 END AS invoiced,\n    SUM(m.home_team_goal + m.away_team_goal)\n        OVER (PARTITION BY (CASE WHEN m.home_team_goal = m.away_team_goal THEN 1 ELSE 0 END)\n              ORDER BY m.id, m.date) AS amount\nFROM match AS m\nORDER BY m.id, m.date;"], "sol_sql": ["WITH cte AS (\n    SELECT\n        m.*,\n        SUM(\n          CASE WHEN m.home_team_goal = m.away_team_goal THEN 1 ELSE 0 END\n        ) OVER (ORDER BY m.date) AS grp\n    FROM match AS m\n),\naggregates AS (\n    SELECT\n        grp,\n        MAX(date) FILTER (WHERE home_team_goal = away_team_goal) AS draw_date,\n        1 AS invoiced,\n        SUM(home_team_goal + away_team_goal) AS total_goals\n    FROM cte\n    GROUP BY grp\n)\nSELECT \n    grp,\n    draw_date AS date,\n    invoiced,\n    total_goals AS amount\nFROM aggregates\nWHERE draw_date IS NOT NULL\nORDER BY grp;"], "preprocess_sql": [""], "clean_up_sql": [""], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: european_football_2********************\nCREATE TABLE \"team_attributes\" (\nid bigint NOT NULL DEFAULT nextval('team_attributes_id_seq'::regclass),\nteam_fifa_api_id bigint NULL,\nteam_api_id bigint NULL,\ndate text NULL,\nbuildupplayspeed bigint NULL,\nbuildupplayspeedclass text NULL,\nbuildupplaydribbling bigint NULL,\nbuildupplaydribblingclass text NULL,\nbuildupplaypassing bigint NULL,\nbuildupplaypassingclass text NULL,\nbuildupplaypositioningclass text NULL,\nchancecreationpassing bigint NULL,\nchancecreationpassingclass text NULL,\nchancecreationcrossing bigint NULL,\nchancecreationcrossingclass text NULL,\nchancecreationshooting bigint NULL,\nchancecreationshootingclass text NULL,\nchancecreationpositioningclass text NULL,\ndefencepressure bigint NULL,\ndefencepressureclass text NULL,\ndefenceaggression bigint NULL,\ndefenceaggressionclass text NULL,\ndefenceteamwidth bigint NULL,\ndefenceteamwidthclass text NULL,\ndefencedefenderlineclass text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_fifa_api_id  team_api_id                date  buildupplayspeed buildupplayspeedclass  buildupplaydribbling buildupplaydribblingclass  buildupplaypassing buildupplaypassingclass buildupplaypositioningclass  chancecreationpassing chancecreationpassingclass  chancecreationcrossing chancecreationcrossingclass  chancecreationshooting chancecreationshootingclass chancecreationpositioningclass  defencepressure defencepressureclass  defenceaggression defenceaggressionclass  defenceteamwidth defenceteamwidthclass defencedefenderlineclass\n  1               434         9930 2010-02-22 00:00:00                60              Balanced                   NaN                    Little                  50                   Mixed                   Organised                     60                     Normal                      65                      Normal                      55                      Normal                      Organised               50               Medium                 55                  Press                45                Normal                    Cover\n  2               434         9930 2014-09-19 00:00:00                52              Balanced                  48.0                    Normal                  56                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n  3               434         9930 2015-09-10 00:00:00                47              Balanced                  41.0                    Normal                  54                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n==================================================\n\n\nCREATE TABLE \"player\" (\nid bigint NOT NULL DEFAULT nextval('player_id_seq'::regclass),\nplayer_api_id bigint NULL,\nplayer_name text NULL,\nplayer_fifa_api_id bigint NULL,\nbirthday text NULL,\nheight bigint NULL,\nweight bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_api_id        player_name  player_fifa_api_id            birthday  height  weight\n  1         505942 Aaron Appindangoye              218353 1992-02-29 00:00:00     182     187\n  2         155782    Aaron Cresswell              189615 1989-12-15 00:00:00     170     146\n  3         162549        Aaron Doran              186170 1991-05-13 00:00:00     170     163\n==================================================\n\n\nCREATE TABLE \"match\" (\nid bigint NOT NULL DEFAULT nextval('match_id_seq'::regclass),\ncountry_id bigint NULL,\nleague_id bigint NULL,\nseason text NULL,\nstage bigint NULL,\ndate text NULL,\nmatch_api_id bigint NULL,\nhome_team_api_id bigint NULL,\naway_team_api_id bigint NULL,\nhome_team_goal bigint NULL,\naway_team_goal bigint NULL,\ngoal text NULL,\nshoton text NULL,\nshotoff text NULL,\nfoulcommit text NULL,\ncard text NULL,\ncross text NULL,\ncorner text NULL,\npossession text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  country_id  league_id    season  stage                date  match_api_id  home_team_api_id  away_team_api_id  home_team_goal  away_team_goal\n  1           1          1 2008/2009      1 2008-08-17 00:00:00        492473              9987              9993               1               1\n  2           1          1 2008/2009      1 2008-08-16 00:00:00        492474             10000              9994               0               0\n  3           1          1 2008/2009      1 2008-08-16 00:00:00        492475              9984              8635               0               3\n==================================================\n\n\nCREATE TABLE \"league\" (\nid bigint NOT NULL DEFAULT nextval('league_id_seq'::regclass),\ncountry_id bigint NULL,\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id  country_id                   name\n   1           1 Belgium Jupiler League\n1729        1729 England Premier League\n4769        4769         France Ligue 1\n==================================================\n\n\nCREATE TABLE \"country\" (\nid bigint NOT NULL DEFAULT nextval('country_id_seq'::regclass),\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id    name\n   1 Belgium\n1729 England\n4769  France\n==================================================\n\n\nCREATE TABLE \"player_attributes\" (\nid bigint NOT NULL DEFAULT nextval('player_attributes_id_seq'::regclass),\nplayer_fifa_api_id bigint NULL,\nplayer_api_id bigint NULL,\ndate text NULL,\noverall_rating bigint NULL,\npotential bigint NULL,\npreferred_foot text NULL,\nattacking_work_rate text NULL,\ndefensive_work_rate text NULL,\ncrossing bigint NULL,\nfinishing bigint NULL,\nheading_accuracy bigint NULL,\nshort_passing bigint NULL,\nvolleys bigint NULL,\ndribbling bigint NULL,\ncurve bigint NULL,\nfree_kick_accuracy bigint NULL,\nlong_passing bigint NULL,\nball_control bigint NULL,\nacceleration bigint NULL,\nsprint_speed bigint NULL,\nagility bigint NULL,\nreactions bigint NULL,\nbalance bigint NULL,\nshot_power bigint NULL,\njumping bigint NULL,\nstamina bigint NULL,\nstrength bigint NULL,\nlong_shots bigint NULL,\naggression bigint NULL,\ninterceptions bigint NULL,\npositioning bigint NULL,\nvision bigint NULL,\npenalties bigint NULL,\nmarking bigint NULL,\nstanding_tackle bigint NULL,\nsliding_tackle bigint NULL,\ngk_diving bigint NULL,\ngk_handling bigint NULL,\ngk_kicking bigint NULL,\ngk_positioning bigint NULL,\ngk_reflexes bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_fifa_api_id  player_api_id                date  overall_rating  potential preferred_foot attacking_work_rate defensive_work_rate  crossing  finishing  heading_accuracy  short_passing  volleys  dribbling  curve  free_kick_accuracy  long_passing  ball_control  acceleration  sprint_speed  agility  reactions  balance  shot_power  jumping  stamina  strength  long_shots  aggression  interceptions  positioning  vision  penalties  marking  standing_tackle  sliding_tackle  gk_diving  gk_handling  gk_kicking  gk_positioning  gk_reflexes\n  1              218353         505942 2016-02-18 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  2              218353         505942 2015-11-19 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  3              218353         505942 2015-09-21 00:00:00              62         66          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          63             41           45      54         48       65               66              69          6           11          10               8            8\n==================================================\n\n\nCREATE TABLE \"team\" (\nid bigint NOT NULL DEFAULT nextval('team_id_seq'::regclass),\nteam_api_id bigint NULL,\nteam_fifa_api_id bigint NULL,\nteam_long_name text NULL,\nteam_short_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_api_id  team_fifa_api_id   team_long_name team_short_name\n  1         9987               673         KRC Genk             GEN\n  2         9993               675     Beerschot AC             BAC\n  3        10000             15005 SV Zulte-Waregem             ZUL\n==================================================\n\n********************Database: european_football_2********************\n\n# User Query:\nIn the context of european_football_2 database whose match table contains columns such as season, date, home_team_goal, away_team_goal, etc. Now, suppose you want to treat any match ending in a draw (home_team_goal = away_team_goal) as if an invoice were being issued (similar to setting Invoiced = 1). Between two such draws, you might have several other matches that do not end in a draw (equivalent to Invoiced = 0), and for each of those matches, you want to treat the total goals scored (i.e., home_team_goal + away_team_goal) like a running amount you accumulate. Finally, you only want to keep the draw rows, and each of those rows should carry the sum of total goals scored since the last draw.\n# Error SQL:\nSELECT \n    m.id,\n    m.date,\n    CASE WHEN m.home_team_goal = m.away_team_goal THEN 1 ELSE 0 END AS invoiced,\n    SUM(m.home_team_goal + m.away_team_goal)\n        OVER (PARTITION BY (CASE WHEN m.home_team_goal = m.away_team_goal THEN 1 ELSE 0 END)\n              ORDER BY m.id, m.date) AS amount\nFROM match AS m\nORDER BY m.id, m.date;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/75370729/postgresql-get-first-non-true-row-or-last-row", "instance_id": "364_1", "selected_database": "debit_card_specializing", "query": "We have a table called transactions_1k that contains transaction details for multiple customers across different gas stations. Each row in this table has:\n1. transaction date\n2. ransaction time\n3. customerid (the ID of the customer)\n4. gasstationid (the ID of the gas station)\n5. productid (the product involved)\n6. amount (the quantity, e.g., liters purchased)\n7. price (the cost)\n\nWe want to filter these transactions under the following rules, per customer:\n1.  Only the last transaction at each gas station should be considered.\n2.  If the customer has any transaction where amount < 10 (which indicates a potential issue), display the first gas station on which that issue occurred.\n3.  If the customer has no transactions with amount < 10, then display the last gas station on which the customer had a transaction with amount >= 10.\n\nGiven some sample data, we expect the final output to show only:\n1. The last transaction for each gas station where amount >= 10.\n2. The first transaction for each gas station where amount < 10.\n\nWe attempted the following SQL query in PostgreSQL to achieve this, but it does not return the desired results. Instead, it only picks the gas station with the maximum gasstationid for each customer and does not correctly determine the earliest occurrence of amount < 10 chronologically. In other words, this query fails to implement “the last transaction per gas station” and “the first station where amount < 10” correctly.", "error_sql": ["WITH DataSource AS (\n  SELECT\n    *,\n    MIN(CASE WHEN amount < 10 THEN gasstationid END) \n      OVER (PARTITION BY customerid) AS first_issue_gasstation,\n    ROW_NUMBER() OVER (PARTITION BY customerid ORDER BY gasstationid DESC) AS gasstation_id\n  FROM transactions_1k\n  WHERE gasstationid = (\n    SELECT MAX(gasstationid)\n    FROM transactions_1k\n    WHERE customerid = transactions_1k.customerid\n  )\n)\nSELECT \n  customerid,\n  transactionid,\n  gasstationid,\n  amount\nFROM DataSource\nWHERE\n  (first_issue_gasstation IS NULL AND gasstation_id = 1)\n  OR (first_issue_gasstation = gasstationid);"], "sol_sql": ["WITH last_per_station AS (\n  SELECT\n    t.*,\n    ROW_NUMBER() OVER (\n      PARTITION BY customerid, gasstationid\n      ORDER BY transactionid DESC\n    ) AS rn\n  FROM transactions_1k t\n),\nDataSource AS (\n  SELECT\n    lps.*,\n    CASE WHEN amount < 10 THEN transactionid END AS fail_id,\n    CASE WHEN amount >= 10 THEN transactionid END AS pass_id\n  FROM last_per_station lps\n  WHERE rn = 1\n),\nCalculated AS (\n  SELECT\n    ds.*,\n    MIN(fail_id) OVER (PARTITION BY customerid) AS earliest_fail_id,\n    MAX(pass_id) OVER (PARTITION BY customerid) AS last_pass_id\n  FROM DataSource ds\n)\nSELECT\n  customerid,\n  transactionid,\n  date,\n  time,\n  gasstationid,\n  productid,\n  amount,\n  price\nFROM Calculated\nWHERE\n  (earliest_fail_id IS NOT NULL AND fail_id = earliest_fail_id)\n  OR\n  (earliest_fail_id IS NULL AND pass_id = last_pass_id);"], "preprocess_sql": [""], "clean_up_sql": [""], "test_cases": ["def test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: debit_card_specializing********************\nCREATE TABLE \"customers\" (\ncustomerid bigint NOT NULL,\nsegment text NULL,\ncurrency text NULL,\n    PRIMARY KEY (customerid)\n);\n\nExample data:\n customerid segment currency\n          3     SME      EUR\n          5     LAM      EUR\n          6     SME      EUR\n==================================================\n\n\nCREATE TABLE \"gasstations\" (\ngasstationid bigint NOT NULL,\nchainid bigint NULL,\ncountry text NULL,\nsegment text NULL,\n    PRIMARY KEY (gasstationid)\n);\n\nExample data:\n gasstationid  chainid country         segment\n           44       13     CZE Value for money\n           45        6     CZE         Premium\n           46       23     CZE           Other\n==================================================\n\n\nCREATE TABLE \"products\" (\nproductid bigint NOT NULL,\ndescription text NULL,\n    PRIMARY KEY (productid)\n);\n\nExample data:\n productid  description\n         1 Rucní zadání\n         2        Nafta\n         3      Special\n==================================================\n\n\nCREATE TABLE \"yearmonth\" (\ncustomerid bigint NULL,\ndate text NULL,\nconsumption real NULL\n);\n\nExample data:\n customerid   date  consumption\n          5 201207       528.30\n          5 201302      1598.28\n          5 201303      1931.36\n==================================================\n\n\nCREATE TABLE \"transactions_1k\" (\ntransactionid bigint NOT NULL DEFAULT nextval('transactions_1k_transactionid_seq'::regclass),\ndate date NULL,\ntime text NULL,\ncustomerid bigint NULL,\ncardid bigint NULL,\ngasstationid bigint NULL,\nproductid bigint NULL,\namount bigint NULL,\nprice real NULL,\n    PRIMARY KEY (transactionid)\n);\n\nExample data:\n transactionid       date     time  customerid  cardid  gasstationid  productid  amount  price\n             1 2012-08-24 09:41:00       31543  486621          3704          2      28 672.64\n             2 2012-08-24 10:03:00       46707  550134          3704          2      18 430.72\n             3 2012-08-24 10:03:00       46707  550134          3704         23       1 121.99\n==================================================\n\n********************Database: debit_card_specializing********************\n\n# User Query:\nWe have a table called transactions_1k that contains transaction details for multiple customers across different gas stations. Each row in this table has:\n1. transaction date\n2. ransaction time\n3. customerid (the ID of the customer)\n4. gasstationid (the ID of the gas station)\n5. productid (the product involved)\n6. amount (the quantity, e.g., liters purchased)\n7. price (the cost)\n\nWe want to filter these transactions under the following rules, per customer:\n1.  Only the last transaction at each gas station should be considered.\n2.  If the customer has any transaction where amount < 10 (which indicates a potential issue), display the first gas station on which that issue occurred.\n3.  If the customer has no transactions with amount < 10, then display the last gas station on which the customer had a transaction with amount >= 10.\n\nGiven some sample data, we expect the final output to show only:\n1. The last transaction for each gas station where amount >= 10.\n2. The first transaction for each gas station where amount < 10.\n\nWe attempted the following SQL query in PostgreSQL to achieve this, but it does not return the desired results. Instead, it only picks the gas station with the maximum gasstationid for each customer and does not correctly determine the earliest occurrence of amount < 10 chronologically. In other words, this query fails to implement “the last transaction per gas station” and “the first station where amount < 10” correctly.\n# Error SQL:\nWITH DataSource AS (\n  SELECT\n    *,\n    MIN(CASE WHEN amount < 10 THEN gasstationid END) \n      OVER (PARTITION BY customerid) AS first_issue_gasstation,\n    ROW_NUMBER() OVER (PARTITION BY customerid ORDER BY gasstationid DESC) AS gasstation_id\n  FROM transactions_1k\n  WHERE gasstationid = (\n    SELECT MAX(gasstationid)\n    FROM transactions_1k\n    WHERE customerid = transactions_1k.customerid\n  )\n)\nSELECT \n  customerid,\n  transactionid,\n  gasstationid,\n  amount\nFROM DataSource\nWHERE\n  (first_issue_gasstation IS NULL AND gasstation_id = 1)\n  OR (first_issue_gasstation = gasstationid);\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/77085178/efficiently-find-common-ancestor-in-postgresql-directed-acyclic-graph", "instance_id": "540_2", "selected_database": "superhero", "query": "In the superhero database, we have a directed acyclic graph representing the lineage of superheroes. Each superhero has a unique identifier and a parent identifier, which points to their predecessor in the lineage. Given two superheroes, 'Superhero A' and 'Superhero B', we need to find their common ancestor in the lineage. The provided query is inefficient as it traverses the entire lineage until it finds the root, which is not optimal when the common segment of the lineage is large. We need to find an efficient way to determine the common ancestor with a complexity of O(A+B) where A and B are the number of nodes in the lineages of 'Superhero A' and 'Superhero B', respectively.", "error_sql": ["WITH RECURSIVE linked_list(id, parent_id) AS (SELECT id, parent_id FROM lineage WHERE id = 1001 OR id = 1201 UNION ALL SELECT g.id, g.parent_id FROM lineage g INNER JOIN linked_list ll ON ll.parent_id = g.id) SELECT string_agg(id::TEXT, ',') AS ids, parent_id FROM linked_list GROUP BY parent_id HAVING COUNT(DISTINCT id) > 1;"], "sol_sql": ["WITH RECURSIVE linked_list(id, parent_id, depth) AS (SELECT id, parent_id, 0 FROM lineage WHERE id = 1001 OR id = 1201 UNION ALL SELECT g.id, g.parent_id, ll.depth + 1 FROM lineage g INNER JOIN linked_list ll ON ll.parent_id = g.id WHERE depth < 10000) SELECT string_agg(id::TEXT, ',') AS ids, parent_id FROM linked_list GROUP BY parent_id HAVING COUNT(DISTINCT id) > 1;"], "preprocess_sql": ["CREATE TABLE lineage (id INT PRIMARY KEY, parent_id INT);", "INSERT INTO lineage (id, parent_id) SELECT i, CASE WHEN i = 1 THEN NULL ELSE i - 1 END FROM generate_series(1, 1000) AS i;", "INSERT INTO lineage (id, parent_id) SELECT 1000 + i, 1000 + i - 1 FROM generate_series(1, 200) AS i;", "INSERT INTO lineage (id, parent_id) SELECT 1200 + i, 1000 + i - 1 FROM generate_series(1, 200) AS i;"], "clean_up_sql": "DROP TABLE lineage;", "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls_result = execute_queries(pred_sqls, db_name, conn)[0]\n    sol_sqls_result = execute_queries(sol_sqls, db_name, conn)[0]\n    assert pred_sqls_result == sol_sqls_result, f\"Expected pred_result and sol_result are the same but pred_result is {pred_sqls_result} and sol_result is {sol_sqls_result}.\"\n    result = performance_compare_by_qep(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"performance_check returned {result} but expected 1.\"\n    return result\n    "], "efficiency": true, "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: superhero********************\nCREATE TABLE \"gender\" (\nid bigint NOT NULL,\ngender text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id gender\n  1   Male\n  2 Female\n  3    N/A\n==================================================\n\n\nCREATE TABLE \"superpower\" (\nid bigint NOT NULL,\npower_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id          power_name\n  1             Agility\n  2 Accelerated Healing\n  3  Lantern Power Ring\n==================================================\n\n\nCREATE TABLE \"publisher\" (\nid bigint NOT NULL,\npublisher_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    publisher_name\n  1                  \n  2       ABC Studios\n  3 Dark Horse Comics\n==================================================\n\n\nCREATE TABLE \"superhero\" (\nid bigint NOT NULL,\nsuperhero_name text NULL,\nfull_name text NULL,\ngender_id bigint NULL,\neye_colour_id bigint NULL,\nhair_colour_id bigint NULL,\nskin_colour_id bigint NULL,\nrace_id bigint NULL,\npublisher_id bigint NULL,\nalignment_id bigint NULL,\nheight_cm bigint NULL,\nweight_kg bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id superhero_name              full_name  gender_id  eye_colour_id  hair_colour_id  skin_colour_id  race_id  publisher_id  alignment_id  height_cm  weight_kg\n  1        3-D Man       Charles Chandler          1              9              13               1        1            13             1        188         90\n  2         A-Bomb Richard Milhouse Jones          1             33               1               1       24            13             1        203        441\n  3     Abe Sapien         Abraham Sapien          1              7               1               7       33             3             1        191         65\n==================================================\n\n\nCREATE TABLE \"colour\" (\nid bigint NOT NULL,\ncolour text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    colour\n  1 No Colour\n  2     Amber\n  3    Auburn\n==================================================\n\n\nCREATE TABLE \"attribute\" (\nid bigint NOT NULL,\nattribute_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id attribute_name\n  1   Intelligence\n  2       Strength\n  3          Speed\n==================================================\n\n\nCREATE TABLE \"hero_power\" (\nhero_id bigint NULL,\npower_id bigint NULL\n);\n\nExample data:\n hero_id  power_id\n       1         1\n       1        18\n       1        26\n==================================================\n\n\nCREATE TABLE \"race\" (\nid bigint NOT NULL,\nrace text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  race\n  1     -\n  2 Alien\n  3 Alpha\n==================================================\n\n\nCREATE TABLE \"alignment\" (\nid bigint NOT NULL,\nalignment text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id alignment\n  1      Good\n  2       Bad\n  3   Neutral\n==================================================\n\n\nCREATE TABLE \"hero_attribute\" (\nhero_id bigint NULL,\nattribute_id bigint NULL,\nattribute_value bigint NULL\n);\n\nExample data:\n hero_id  attribute_id  attribute_value\n       1             1               80\n       2             1               75\n       3             1               95\n==================================================\n\n********************Database: superhero********************\n\n# User Query:\nIn the superhero database, we have a directed acyclic graph representing the lineage of superheroes. Each superhero has a unique identifier and a parent identifier, which points to their predecessor in the lineage. Given two superheroes, 'Superhero A' and 'Superhero B', we need to find their common ancestor in the lineage. The provided query is inefficient as it traverses the entire lineage until it finds the root, which is not optimal when the common segment of the lineage is large. We need to find an efficient way to determine the common ancestor with a complexity of O(A+B) where A and B are the number of nodes in the lineages of 'Superhero A' and 'Superhero B', respectively.\n# Error SQL:\nWITH RECURSIVE linked_list(id, parent_id) AS (SELECT id, parent_id FROM lineage WHERE id = 1001 OR id = 1201 UNION ALL SELECT g.id, g.parent_id FROM lineage g INNER JOIN linked_list ll ON ll.parent_id = g.id) SELECT string_agg(id::TEXT, ',') AS ids, parent_id FROM linked_list GROUP BY parent_id HAVING COUNT(DISTINCT id) > 1;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/76388701/find-abandoned-searches-from-customer-activities-sql", "instance_id": "541_1", "selected_database": "card_games", "query": "In a digital card trading platform, users perform various actions such as `LOGIN`, `SEARCH`, and `BUY`. An abandoned `SEARCH` action is defined as when a user `LOGIN`s, performs one or more `SEARCH` actions, and does not perform a `BUY` action before the next `LOGIN`. Given a table `user_actions` that records `user_id`, `action`, and `action_time`, determine all abandoned `SEARCH` actions.", "error_sql": ["SELECT c1.user_id, COUNT(*) FROM user_actions c1 LEFT JOIN (SELECT user_id, action, action_time FROM user_actions WHERE action = 'LOGIN') c2 ON c1.user_id = c2.user_id AND c2.action_time > c1.action_time LEFT JOIN (SELECT user_id, action, action_time FROM user_actions WHERE action = 'BUY') c3 ON c1.user_id = c3.user_id AND c3.action_time > c1.action_time AND c3.action_time < c2.action_time WHERE c1.action = 'SEARCH' AND c2.user_id IS NOT NULL AND c3.user_id IS NULL GROUP BY 1"], "sol_sql": ["SELECT * FROM user_actions AS a WHERE a.action = 'SEARCH' AND NOT EXISTS (SELECT 1 FROM user_actions WHERE user_id = a.user_id AND action = 'BUY' AND action_time > a.action_time AND (action_time < (SELECT MIN(action_time) FROM user_actions WHERE user_id = a.user_id AND action = 'LOGIN' AND action_time > a.action_time) OR (SELECT MIN(action_time) FROM user_actions WHERE user_id = a.user_id AND action = 'LOGIN' AND action_time > a.action_time) IS NULL));"], "preprocess_sql": ["CREATE TABLE user_actions(user_id VARCHAR(1) NOT NULL, action VARCHAR(6) NOT NULL, action_time DATE NOT NULL);", "INSERT INTO user_actions(user_id, action, action_time) VALUES ('A', 'LOGIN', '2023-05-01'), ('A', 'SEARCH', '2023-05-02'), ('A', 'SEARCH', '2023-05-03'), ('A', 'BUY', '2023-05-04'), ('B', 'LOGIN', '2023-05-01'), ('B', 'SEARCH', '2023-05-02'), ('B', 'SEARCH', '2023-05-03'), ('B', 'LOGIN', '2023-05-04'), ('B', 'SEARCH', '2023-05-05')"], "clean_up_sql": ["DROP TABLE user_actions"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nIn a digital card trading platform, users perform various actions such as `LOGIN`, `SEARCH`, and `BUY`. An abandoned `SEARCH` action is defined as when a user `LOGIN`s, performs one or more `SEARCH` actions, and does not perform a `BUY` action before the next `LOGIN`. Given a table `user_actions` that records `user_id`, `action`, and `action_time`, determine all abandoned `SEARCH` actions.\n# Error SQL:\nSELECT c1.user_id, COUNT(*) FROM user_actions c1 LEFT JOIN (SELECT user_id, action, action_time FROM user_actions WHERE action = 'LOGIN') c2 ON c1.user_id = c2.user_id AND c2.action_time > c1.action_time LEFT JOIN (SELECT user_id, action, action_time FROM user_actions WHERE action = 'BUY') c3 ON c1.user_id = c3.user_id AND c3.action_time > c1.action_time AND c3.action_time < c2.action_time WHERE c1.action = 'SEARCH' AND c2.user_id IS NOT NULL AND c3.user_id IS NULL GROUP BY 1\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/76317473/postgresql-select-data-from-another-table-by-elements-of-an-array-and-then-disp", "instance_id": "543_1", "selected_database": "card_games", "query": "In the card_games database, there is a table named 'cards' which contains various details about each card, including a unique identifier 'id' and the card's name 'name'. Another table named 'decks' stores information about different decks, where each deck has a unique identifier 'id' and an array 'card_order' that lists the 'id's of the cards in the deck in the order they should be played. When a user selects a deck, they want to see the cards in the order they are listed in the 'card_order' array. However, the current SQL query does not preserve the order of the cards as specified in the 'card_order' array. The user's current SQL query is provided below and it does not maintain the order of the cards.", "error_sql": ["SELECT c.id, c.name FROM cards c WHERE c.id IN (SELECT unnest(card_order) FROM decks WHERE id = 1);"], "sol_sql": ["SELECT cte.id, c.name FROM (SELECT card_order FROM decks WHERE id = 1) d  CROSS JOIN UNNEST(d.card_order) WITH ORDINALITY cte(id, idx)  INNER JOIN cards c ON c.id = cte.id ORDER BY cte.idx;"], "preprocess_sql": ["CREATE TABLE decks (id bigint PRIMARY KEY, card_order bigint[]);", "INSERT INTO decks (id, card_order) VALUES (1, ARRAY[3, 6, 1]), (2, ARRAY[5, 2, 4]);"], "clean_up_sql": ["DROP TABLE decks;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls_result = execute_queries(pred_sqls, db_name, conn)[0]\n    sol_sqls_result = execute_queries(sol_sqls, db_name, conn)[0]\n    assert pred_sqls_result == sol_sqls_result, f\"Expected pred_result and sol_result are the same but pred_result is {pred_sqls_result} and sol_result is {sol_sqls_result}.\"\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nIn the card_games database, there is a table named 'cards' which contains various details about each card, including a unique identifier 'id' and the card's name 'name'. Another table named 'decks' stores information about different decks, where each deck has a unique identifier 'id' and an array 'card_order' that lists the 'id's of the cards in the deck in the order they should be played. When a user selects a deck, they want to see the cards in the order they are listed in the 'card_order' array. However, the current SQL query does not preserve the order of the cards as specified in the 'card_order' array. The user's current SQL query is provided below and it does not maintain the order of the cards.\n# Error SQL:\nSELECT c.id, c.name FROM cards c WHERE c.id IN (SELECT unnest(card_order) FROM decks WHERE id = 1);\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/76124858/sql-how-to-limit-a-join-on-the-first-match-with-criterias", "instance_id": "545_1", "selected_database": "card_games", "query": "In the context of the card_games database, we have two tables: 'card_prices' and 'order_cards'. The 'card_prices' table records the price of each card at different start dates, and the 'order_cards' table records the cards ordered by customers on specific dates. We need to join these two tables to get the price of each card at the time it was ordered. However, the initial attempt to join the tables resulted in duplicate records for some orders. Here are the tables and the problematic query:\\n\\Table 'card_prices':\\n| start_date | card_id | price |\\n|------------|---------|-------|\\n| 2023-04-01 | 1       | 10.0  |\\n| 2023-04-15 | 1       | 20.0  |\\n| 2023-04-01 | 2       | 20.0  |\\n\\Table 'order_cards':\\n| order_date | order_id | card_id |\\n|------------|----------|---------|\\n| 2023-04-01 | 10001    | 1       |\\n| 2023-04-01 | 10001    | 2       |\\n| 2023-04-02 | 10002    | 1       |\\n| 2023-04-02 | 10002    | 2       |\\n| 2023-04-16 | 10003    | 1       |\\n| 2023-04-16 | 10003    | 2       |\\n\\nThe desired result is:\\n| order_date | order_id | card_id | price |\\n|------------|----------|---------|-------|\\n| 2023-04-01 | 10001    | 1       | 10.0  |\\n| 2023-04-01 | 10001    | 2       | 20.0  |\\n| 2023-04-02 | 10002    | 1       | 10.0  |\\n| 2023-04-02 | 10002    | 2       | 20.0  |\\n| 2023-04-16 | 10003    | 1       | 20.0  |\\n| 2023-04-16 | 10003    | 2       | 20.0  |\\nHowever, the initial attempt resulted in duplicate records for some orders.\\n", "error_sql": ["SELECT ord.order_date, ord.order_id, ord.card_id, prd.price FROM order_cards ord LEFT JOIN (SELECT * FROM card_prices ORDER BY start_date ASC) AS prd ON ord.card_id = prd.card_id AND ord.order_date >= prd.start_date"], "sol_sql": ["SELECT ord.*, prd.price FROM order_cards ord LEFT JOIN LATERAL (SELECT prd.* FROM card_prices prd WHERE prd.card_id = ord.card_id and prd.start_date <= ord.order_date ORDER BY start_date DESC LIMIT 1) prd ON TRUE"], "preprocess_sql": ["CREATE TABLE card_prices (start_date DATE, card_id BIGINT, price NUMERIC);", "INSERT INTO card_prices (start_date, card_id, price) VALUES ('2023-04-01', 1, 10.0), ('2023-04-15', 1, 20.0), ('2023-04-01', 2, 20.0);", "CREATE TABLE order_cards (order_date DATE, order_id BIGINT, card_id BIGINT);", "INSERT INTO order_cards (order_date, order_id, card_id) VALUES ('2023-04-01', 10001, 1), ('2023-04-01', 10001, 2), ('2023-04-02', 10002, 1), ('2023-04-02', 10002, 2), ('2023-04-16', 10003, 1), ('2023-04-16', 10003, 2);"], "clean_up_sql": ["DROP TABLE card_prices;", "DROP TABLE order_cards;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: card_games********************\nCREATE TABLE \"legalities\" (\nid bigint NOT NULL DEFAULT nextval('legalities_id_seq'::regclass),\nformat text NULL,\nstatus text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id    format status                                 uuid\n  1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n\nCREATE TABLE \"cards\" (\nid bigint NOT NULL DEFAULT nextval('cards_id_seq'::regclass),\nartist text NULL,\nasciiname text NULL,\navailability text NULL,\nbordercolor text NULL,\ncardkingdomfoilid text NULL,\ncardkingdomid text NULL,\ncoloridentity text NULL,\ncolorindicator text NULL,\ncolors text NULL,\nconvertedmanacost real NULL,\ndueldeck text NULL,\nedhrecrank bigint NULL,\nfaceconvertedmanacost real NULL,\nfacename text NULL,\nflavorname text NULL,\nflavortext text NULL,\nframeeffects text NULL,\nframeversion text NULL,\nhand text NULL,\nhasalternativedecklimit bigint NULL DEFAULT '0'::bigint,\nhascontentwarning bigint NULL DEFAULT '0'::bigint,\nhasfoil bigint NULL DEFAULT '0'::bigint,\nhasnonfoil bigint NULL DEFAULT '0'::bigint,\nisalternative bigint NULL DEFAULT '0'::bigint,\nisfullart bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nisoversized bigint NULL DEFAULT '0'::bigint,\nispromo bigint NULL DEFAULT '0'::bigint,\nisreprint bigint NULL DEFAULT '0'::bigint,\nisreserved bigint NULL DEFAULT '0'::bigint,\nisstarter bigint NULL DEFAULT '0'::bigint,\nisstoryspotlight bigint NULL DEFAULT '0'::bigint,\nistextless bigint NULL DEFAULT '0'::bigint,\nistimeshifted bigint NULL DEFAULT '0'::bigint,\nkeywords text NULL,\nlayout text NULL,\nleadershipskills text NULL,\nlife text NULL,\nloyalty text NULL,\nmanacost text NULL,\nmcmid text NULL,\nmcmmetaid text NULL,\nmtgarenaid text NULL,\nmtgjsonv4id text NULL,\nmtgofoilid text NULL,\nmtgoid text NULL,\nmultiverseid text NULL,\nname text NULL,\nnumber text NULL,\noriginalreleasedate text NULL,\noriginaltext text NULL,\noriginaltype text NULL,\notherfaceids text NULL,\npower text NULL,\nprintings text NULL,\npromotypes text NULL,\npurchaseurls text NULL,\nrarity text NULL,\nscryfallid text NULL,\nscryfallillustrationid text NULL,\nscryfalloracleid text NULL,\nsetcode text NULL,\nside text NULL,\nsubtypes text NULL,\nsupertypes text NULL,\ntcgplayerproductid text NULL,\ntext text NULL,\ntoughness text NULL,\ntype text NULL,\ntypes text NULL,\nuuid text NULL,\nvariations text NULL,\nwatermark text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       artist asciiname availability bordercolor cardkingdomfoilid cardkingdomid coloridentity colorindicator colors  convertedmanacost dueldeck  edhrecrank faceconvertedmanacost facename flavorname                                flavortext frameeffects frameversion hand  hasalternativedecklimit  hascontentwarning  hasfoil  hasnonfoil  isalternative  isfullart  isonlineonly  isoversized  ispromo  isreprint  isreserved  isstarter  isstoryspotlight  istextless  istimeshifted     keywords layout leadershipskills life loyalty  manacost mcmid mcmmetaid mtgarenaid                          mtgjsonv4id mtgofoilid mtgoid multiverseid              name number originalreleasedate                                                                                                                                                                      originaltext            originaltype otherfaceids power                                             printings promotypes                                                                                                                                                                         purchaseurls   rarity                           scryfallid               scryfallillustrationid                     scryfalloracleid setcode side     subtypes supertypes tcgplayerproductid toughness                    type    types                                 uuid                           variations watermark\n  1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W                7.0     None       15650                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None\n  2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W                5.0     None       12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None\n  3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W                4.0     None       11081                  None     None       None                                      None         None         2003 None                        0                  0        0           1              0          0             0            0        0          1           0          0                 0           0              0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None\n==================================================\n\n\nCREATE TABLE \"rulings\" (\nid bigint NOT NULL DEFAULT nextval('rulings_id_seq'::regclass),\ndate date NULL,\ntext text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id       date                                 uuid\n  1 2007-07-15 6d268c95-c176-5766-9a46-c14f739aba1c\n  2 2007-02-01 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n  3 2007-07-15 56f4935b-f6c5-59b9-88bf-9bcce20247ce\n==================================================\n\n\nCREATE TABLE \"set_translations\" (\nid bigint NOT NULL DEFAULT nextval('set_translations_id_seq'::regclass),\nlanguage text NULL,\nsetcode text NULL,\ntranslation text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id            language setcode     translation\n  1  Chinese Simplified     10E         核心系列第十版\n  2 Chinese Traditional     10E         核心系列第十版\n  3              French     10E Dixième édition\n==================================================\n\n\nCREATE TABLE \"sets\" (\nid bigint NOT NULL DEFAULT nextval('sets_id_seq'::regclass),\nbasesetsize bigint NULL,\nblock text NULL,\nbooster text NULL,\ncode text NULL,\nisfoilonly bigint NULL DEFAULT '0'::bigint,\nisforeignonly bigint NULL DEFAULT '0'::bigint,\nisnonfoilonly bigint NULL DEFAULT '0'::bigint,\nisonlineonly bigint NULL DEFAULT '0'::bigint,\nispartialpreview bigint NULL DEFAULT '0'::bigint,\nkeyrunecode text NULL,\nmcmid bigint NULL,\nmcmidextras bigint NULL,\nmcmname text NULL,\nmtgocode text NULL,\nname text NULL,\nparentcode text NULL,\nreleasedate date NULL,\ntcgplayergroupid bigint NULL,\ntotalsetsize bigint NULL,\ntype text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  basesetsize    block code  isfoilonly  isforeignonly  isnonfoilonly  isonlineonly  ispartialpreview keyrunecode  mcmid  mcmidextras        mcmname mtgocode              name parentcode releasedate  tcgplayergroupid  totalsetsize    type\n  1          383 Core Set  10E           0              0              0             0                 0         10E   74.0          NaN  Tenth Edition      10E     Tenth Edition       None  2007-07-13                 1           508    core\n  2          302 Core Set  2ED           0              0              1             0                 0         2ED    NaN          NaN           None     None Unlimited Edition       None  1993-12-01               115           302    core\n  3          332     None  2XM           0              0              0             0                 0         2XM 3204.0       3209.0 Double Masters      2XM    Double Masters       None  2020-08-07              2655           384 masters\n==================================================\n\n\nCREATE TABLE \"foreign_data\" (\nid bigint NOT NULL DEFAULT nextval('foreign_data_id_seq'::regclass),\nflavortext text NULL,\nlanguage text NULL,\nmultiverseid bigint NULL,\nname text NULL,\ntext text NULL,\ntype text NULL,\nuuid text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id language  multiverseid                     name                                 uuid\n  1   German        148411 Ausgewählter der Ahnfrau 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  2  Spanish        150317 Elegido de la Antepasada 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n  3   French        149934         Élu de l'Ancêtre 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c\n==================================================\n\n********************Database: card_games********************\n\n# User Query:\nIn the context of the card_games database, we have two tables: 'card_prices' and 'order_cards'. The 'card_prices' table records the price of each card at different start dates, and the 'order_cards' table records the cards ordered by customers on specific dates. We need to join these two tables to get the price of each card at the time it was ordered. However, the initial attempt to join the tables resulted in duplicate records for some orders. Here are the tables and the problematic query:\\n\\Table 'card_prices':\\n| start_date | card_id | price |\\n|------------|---------|-------|\\n| 2023-04-01 | 1       | 10.0  |\\n| 2023-04-15 | 1       | 20.0  |\\n| 2023-04-01 | 2       | 20.0  |\\n\\Table 'order_cards':\\n| order_date | order_id | card_id |\\n|------------|----------|---------|\\n| 2023-04-01 | 10001    | 1       |\\n| 2023-04-01 | 10001    | 2       |\\n| 2023-04-02 | 10002    | 1       |\\n| 2023-04-02 | 10002    | 2       |\\n| 2023-04-16 | 10003    | 1       |\\n| 2023-04-16 | 10003    | 2       |\\n\\nThe desired result is:\\n| order_date | order_id | card_id | price |\\n|------------|----------|---------|-------|\\n| 2023-04-01 | 10001    | 1       | 10.0  |\\n| 2023-04-01 | 10001    | 2       | 20.0  |\\n| 2023-04-02 | 10002    | 1       | 10.0  |\\n| 2023-04-02 | 10002    | 2       | 20.0  |\\n| 2023-04-16 | 10003    | 1       | 20.0  |\\n| 2023-04-16 | 10003    | 2       | 20.0  |\\nHowever, the initial attempt resulted in duplicate records for some orders.\\n\n# Error SQL:\nSELECT ord.order_date, ord.order_id, ord.card_id, prd.price FROM order_cards ord LEFT JOIN (SELECT * FROM card_prices ORDER BY start_date ASC) AS prd ON ord.card_id = prd.card_id AND ord.order_date >= prd.start_date\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/75960285/postgres-sql-how-to-split-and-map-two-array-columns-into-separate-columns", "instance_id": "546_1", "selected_database": "european_football_2", "query": "In the database 'european_football_2', there is a table named 'player_stats' that records the performance statistics of football players across different matches. Each row in the table represents a player's performance in a specific match. The table has two columns, 'stats_keys' and 'stats_values', which store the performance metrics and their corresponding values as comma-separated strings. For example, 'stats_keys' might contain 'goals,assists,yellow_cards' and 'stats_values' might contain '2,1,0'. The task is to transform this table into a format where each performance metric is a separate column, with the corresponding values filled in for each player's match performance.", "error_sql": ["select player_id, stats_keys, stats_values from player_stats"], "sol_sql": ["SELECT player_id, cols ->> 'goals' AS goals, cols ->> 'assists' AS assists, cols ->> 'yellow_cards' AS yellow_cards, cols ->> 'red_cards' AS red_cards FROM (SELECT player_id, (SELECT jsonb_object_agg(k, v) FROM unnest(string_to_array(stats_keys, ','), string_to_array(stats_values, ',')) AS x(k, v)) AS cols FROM player_stats) x ORDER BY player_id;"], "preprocess_sql": ["CREATE TABLE player_stats (player_id INT, stats_keys TEXT, stats_values TEXT);", "INSERT INTO player_stats (player_id, stats_keys, stats_values) VALUES (1, 'goals,assists,yellow_cards', '2,1,0'), (2, 'assists,yellow_cards', '0,1'), (3, 'goals,yellow_cards', '1,0'), (4, 'assists,yellow_cards,red_cards', '2,1,0');"], "clean_up_sql": ["DROP TABLE player_stats;"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: european_football_2********************\nCREATE TABLE \"team_attributes\" (\nid bigint NOT NULL DEFAULT nextval('team_attributes_id_seq'::regclass),\nteam_fifa_api_id bigint NULL,\nteam_api_id bigint NULL,\ndate text NULL,\nbuildupplayspeed bigint NULL,\nbuildupplayspeedclass text NULL,\nbuildupplaydribbling bigint NULL,\nbuildupplaydribblingclass text NULL,\nbuildupplaypassing bigint NULL,\nbuildupplaypassingclass text NULL,\nbuildupplaypositioningclass text NULL,\nchancecreationpassing bigint NULL,\nchancecreationpassingclass text NULL,\nchancecreationcrossing bigint NULL,\nchancecreationcrossingclass text NULL,\nchancecreationshooting bigint NULL,\nchancecreationshootingclass text NULL,\nchancecreationpositioningclass text NULL,\ndefencepressure bigint NULL,\ndefencepressureclass text NULL,\ndefenceaggression bigint NULL,\ndefenceaggressionclass text NULL,\ndefenceteamwidth bigint NULL,\ndefenceteamwidthclass text NULL,\ndefencedefenderlineclass text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_fifa_api_id  team_api_id                date  buildupplayspeed buildupplayspeedclass  buildupplaydribbling buildupplaydribblingclass  buildupplaypassing buildupplaypassingclass buildupplaypositioningclass  chancecreationpassing chancecreationpassingclass  chancecreationcrossing chancecreationcrossingclass  chancecreationshooting chancecreationshootingclass chancecreationpositioningclass  defencepressure defencepressureclass  defenceaggression defenceaggressionclass  defenceteamwidth defenceteamwidthclass defencedefenderlineclass\n  1               434         9930 2010-02-22 00:00:00                60              Balanced                   NaN                    Little                  50                   Mixed                   Organised                     60                     Normal                      65                      Normal                      55                      Normal                      Organised               50               Medium                 55                  Press                45                Normal                    Cover\n  2               434         9930 2014-09-19 00:00:00                52              Balanced                  48.0                    Normal                  56                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n  3               434         9930 2015-09-10 00:00:00                47              Balanced                  41.0                    Normal                  54                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n==================================================\n\n\nCREATE TABLE \"player\" (\nid bigint NOT NULL DEFAULT nextval('player_id_seq'::regclass),\nplayer_api_id bigint NULL,\nplayer_name text NULL,\nplayer_fifa_api_id bigint NULL,\nbirthday text NULL,\nheight bigint NULL,\nweight bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_api_id        player_name  player_fifa_api_id            birthday  height  weight\n  1         505942 Aaron Appindangoye              218353 1992-02-29 00:00:00     182     187\n  2         155782    Aaron Cresswell              189615 1989-12-15 00:00:00     170     146\n  3         162549        Aaron Doran              186170 1991-05-13 00:00:00     170     163\n==================================================\n\n\nCREATE TABLE \"match\" (\nid bigint NOT NULL DEFAULT nextval('match_id_seq'::regclass),\ncountry_id bigint NULL,\nleague_id bigint NULL,\nseason text NULL,\nstage bigint NULL,\ndate text NULL,\nmatch_api_id bigint NULL,\nhome_team_api_id bigint NULL,\naway_team_api_id bigint NULL,\nhome_team_goal bigint NULL,\naway_team_goal bigint NULL,\ngoal text NULL,\nshoton text NULL,\nshotoff text NULL,\nfoulcommit text NULL,\ncard text NULL,\ncross text NULL,\ncorner text NULL,\npossession text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  country_id  league_id    season  stage                date  match_api_id  home_team_api_id  away_team_api_id  home_team_goal  away_team_goal\n  1           1          1 2008/2009      1 2008-08-17 00:00:00        492473              9987              9993               1               1\n  2           1          1 2008/2009      1 2008-08-16 00:00:00        492474             10000              9994               0               0\n  3           1          1 2008/2009      1 2008-08-16 00:00:00        492475              9984              8635               0               3\n==================================================\n\n\nCREATE TABLE \"league\" (\nid bigint NOT NULL DEFAULT nextval('league_id_seq'::regclass),\ncountry_id bigint NULL,\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id  country_id                   name\n   1           1 Belgium Jupiler League\n1729        1729 England Premier League\n4769        4769         France Ligue 1\n==================================================\n\n\nCREATE TABLE \"country\" (\nid bigint NOT NULL DEFAULT nextval('country_id_seq'::regclass),\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id    name\n   1 Belgium\n1729 England\n4769  France\n==================================================\n\n\nCREATE TABLE \"player_attributes\" (\nid bigint NOT NULL DEFAULT nextval('player_attributes_id_seq'::regclass),\nplayer_fifa_api_id bigint NULL,\nplayer_api_id bigint NULL,\ndate text NULL,\noverall_rating bigint NULL,\npotential bigint NULL,\npreferred_foot text NULL,\nattacking_work_rate text NULL,\ndefensive_work_rate text NULL,\ncrossing bigint NULL,\nfinishing bigint NULL,\nheading_accuracy bigint NULL,\nshort_passing bigint NULL,\nvolleys bigint NULL,\ndribbling bigint NULL,\ncurve bigint NULL,\nfree_kick_accuracy bigint NULL,\nlong_passing bigint NULL,\nball_control bigint NULL,\nacceleration bigint NULL,\nsprint_speed bigint NULL,\nagility bigint NULL,\nreactions bigint NULL,\nbalance bigint NULL,\nshot_power bigint NULL,\njumping bigint NULL,\nstamina bigint NULL,\nstrength bigint NULL,\nlong_shots bigint NULL,\naggression bigint NULL,\ninterceptions bigint NULL,\npositioning bigint NULL,\nvision bigint NULL,\npenalties bigint NULL,\nmarking bigint NULL,\nstanding_tackle bigint NULL,\nsliding_tackle bigint NULL,\ngk_diving bigint NULL,\ngk_handling bigint NULL,\ngk_kicking bigint NULL,\ngk_positioning bigint NULL,\ngk_reflexes bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_fifa_api_id  player_api_id                date  overall_rating  potential preferred_foot attacking_work_rate defensive_work_rate  crossing  finishing  heading_accuracy  short_passing  volleys  dribbling  curve  free_kick_accuracy  long_passing  ball_control  acceleration  sprint_speed  agility  reactions  balance  shot_power  jumping  stamina  strength  long_shots  aggression  interceptions  positioning  vision  penalties  marking  standing_tackle  sliding_tackle  gk_diving  gk_handling  gk_kicking  gk_positioning  gk_reflexes\n  1              218353         505942 2016-02-18 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  2              218353         505942 2015-11-19 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  3              218353         505942 2015-09-21 00:00:00              62         66          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          63             41           45      54         48       65               66              69          6           11          10               8            8\n==================================================\n\n\nCREATE TABLE \"team\" (\nid bigint NOT NULL DEFAULT nextval('team_id_seq'::regclass),\nteam_api_id bigint NULL,\nteam_fifa_api_id bigint NULL,\nteam_long_name text NULL,\nteam_short_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_api_id  team_fifa_api_id   team_long_name team_short_name\n  1         9987               673         KRC Genk             GEN\n  2         9993               675     Beerschot AC             BAC\n  3        10000             15005 SV Zulte-Waregem             ZUL\n==================================================\n\n********************Database: european_football_2********************\n\n# User Query:\nIn the database 'european_football_2', there is a table named 'player_stats' that records the performance statistics of football players across different matches. Each row in the table represents a player's performance in a specific match. The table has two columns, 'stats_keys' and 'stats_values', which store the performance metrics and their corresponding values as comma-separated strings. For example, 'stats_keys' might contain 'goals,assists,yellow_cards' and 'stats_values' might contain '2,1,0'. The task is to transform this table into a format where each performance metric is a separate column, with the corresponding values filled in for each player's match performance.\n# Error SQL:\nselect player_id, stats_keys, stats_values from player_stats\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/75743767/remove-an-object-from-a-json-array", "instance_id": "548_1", "selected_database": "european_football_2", "query": "In the 'european_football_2' database, there is a table named 'teams_config' which holds information about various football teams. Each team has a 'configurations' column of type jsonb that stores an array of objects representing different team settings. Each object in the array has an 'id', 'name', and 'settings'. For example, one row in the 'teams_config' table might have the following 'configurations':\n[\n    {\n             \"id\": 100, \n            \"name\": \"testOne\", \n            \"settings\": \"settingOne\" \n       },\n         {\n            \"id\": 101,\n            \"name\": \"testTwo\",\n            \"settings\": \"settingTwo\"\n        },\n]", "error_sql": ["UPDATE teams_config SET configurations = jsonb_set(configurations, '{settings}', (configurations->'id') - (SELECT DISTINCT position - 1 FROM teams_config, jsonb_array_elements(configurations) WITH ORDINALITY arr(elem, position) WHERE elem->>'id' = '101')::int);"], "sol_sql": ["UPDATE teams_config t SET configurations = (SELECT jsonb_agg(a.elem) FROM jsonb_array_elements(t.configurations) AS a(elem) WHERE (a.elem ->> 'id' = '101') IS NOT TRUE) WHERE t.configurations @> '[{\"id\":101}]';"], "preprocess_sql": ["CREATE TABLE teams_config (configurations jsonb);", "INSERT INTO teams_config VALUES ('[{\"id\": 100, \"name\": \"testOne\", \"settings\": \"settingOne\"}, {\"id\": 101, \"name\": \"testTwo\", \"settings\": \"settingTwo\"}]');"], "clean_up_sql": ["DROP TABLE teams_config"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    test_pred_sqls_result = execute_queries([\"SELECT * FROM teams_config;\"], db_name, conn)[0]\n    assert test_pred_sqls_result[0][0] == [{'id': 100, 'name': 'testOne', 'settings': 'settingOne'}], f'Expected the object with id = 101 is deleted and only the object with id = 100 is left in the configurations column. But got: {test_pred_sqls_result[0][0]}'\n"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: european_football_2********************\nCREATE TABLE \"team_attributes\" (\nid bigint NOT NULL DEFAULT nextval('team_attributes_id_seq'::regclass),\nteam_fifa_api_id bigint NULL,\nteam_api_id bigint NULL,\ndate text NULL,\nbuildupplayspeed bigint NULL,\nbuildupplayspeedclass text NULL,\nbuildupplaydribbling bigint NULL,\nbuildupplaydribblingclass text NULL,\nbuildupplaypassing bigint NULL,\nbuildupplaypassingclass text NULL,\nbuildupplaypositioningclass text NULL,\nchancecreationpassing bigint NULL,\nchancecreationpassingclass text NULL,\nchancecreationcrossing bigint NULL,\nchancecreationcrossingclass text NULL,\nchancecreationshooting bigint NULL,\nchancecreationshootingclass text NULL,\nchancecreationpositioningclass text NULL,\ndefencepressure bigint NULL,\ndefencepressureclass text NULL,\ndefenceaggression bigint NULL,\ndefenceaggressionclass text NULL,\ndefenceteamwidth bigint NULL,\ndefenceteamwidthclass text NULL,\ndefencedefenderlineclass text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_fifa_api_id  team_api_id                date  buildupplayspeed buildupplayspeedclass  buildupplaydribbling buildupplaydribblingclass  buildupplaypassing buildupplaypassingclass buildupplaypositioningclass  chancecreationpassing chancecreationpassingclass  chancecreationcrossing chancecreationcrossingclass  chancecreationshooting chancecreationshootingclass chancecreationpositioningclass  defencepressure defencepressureclass  defenceaggression defenceaggressionclass  defenceteamwidth defenceteamwidthclass defencedefenderlineclass\n  1               434         9930 2010-02-22 00:00:00                60              Balanced                   NaN                    Little                  50                   Mixed                   Organised                     60                     Normal                      65                      Normal                      55                      Normal                      Organised               50               Medium                 55                  Press                45                Normal                    Cover\n  2               434         9930 2014-09-19 00:00:00                52              Balanced                  48.0                    Normal                  56                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n  3               434         9930 2015-09-10 00:00:00                47              Balanced                  41.0                    Normal                  54                   Mixed                   Organised                     54                     Normal                      63                      Normal                      64                      Normal                      Organised               47               Medium                 44                  Press                54                Normal                    Cover\n==================================================\n\n\nCREATE TABLE \"player\" (\nid bigint NOT NULL DEFAULT nextval('player_id_seq'::regclass),\nplayer_api_id bigint NULL,\nplayer_name text NULL,\nplayer_fifa_api_id bigint NULL,\nbirthday text NULL,\nheight bigint NULL,\nweight bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_api_id        player_name  player_fifa_api_id            birthday  height  weight\n  1         505942 Aaron Appindangoye              218353 1992-02-29 00:00:00     182     187\n  2         155782    Aaron Cresswell              189615 1989-12-15 00:00:00     170     146\n  3         162549        Aaron Doran              186170 1991-05-13 00:00:00     170     163\n==================================================\n\n\nCREATE TABLE \"match\" (\nid bigint NOT NULL DEFAULT nextval('match_id_seq'::regclass),\ncountry_id bigint NULL,\nleague_id bigint NULL,\nseason text NULL,\nstage bigint NULL,\ndate text NULL,\nmatch_api_id bigint NULL,\nhome_team_api_id bigint NULL,\naway_team_api_id bigint NULL,\nhome_team_goal bigint NULL,\naway_team_goal bigint NULL,\ngoal text NULL,\nshoton text NULL,\nshotoff text NULL,\nfoulcommit text NULL,\ncard text NULL,\ncross text NULL,\ncorner text NULL,\npossession text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  country_id  league_id    season  stage                date  match_api_id  home_team_api_id  away_team_api_id  home_team_goal  away_team_goal\n  1           1          1 2008/2009      1 2008-08-17 00:00:00        492473              9987              9993               1               1\n  2           1          1 2008/2009      1 2008-08-16 00:00:00        492474             10000              9994               0               0\n  3           1          1 2008/2009      1 2008-08-16 00:00:00        492475              9984              8635               0               3\n==================================================\n\n\nCREATE TABLE \"league\" (\nid bigint NOT NULL DEFAULT nextval('league_id_seq'::regclass),\ncountry_id bigint NULL,\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id  country_id                   name\n   1           1 Belgium Jupiler League\n1729        1729 England Premier League\n4769        4769         France Ligue 1\n==================================================\n\n\nCREATE TABLE \"country\" (\nid bigint NOT NULL DEFAULT nextval('country_id_seq'::regclass),\nname text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n  id    name\n   1 Belgium\n1729 England\n4769  France\n==================================================\n\n\nCREATE TABLE \"player_attributes\" (\nid bigint NOT NULL DEFAULT nextval('player_attributes_id_seq'::regclass),\nplayer_fifa_api_id bigint NULL,\nplayer_api_id bigint NULL,\ndate text NULL,\noverall_rating bigint NULL,\npotential bigint NULL,\npreferred_foot text NULL,\nattacking_work_rate text NULL,\ndefensive_work_rate text NULL,\ncrossing bigint NULL,\nfinishing bigint NULL,\nheading_accuracy bigint NULL,\nshort_passing bigint NULL,\nvolleys bigint NULL,\ndribbling bigint NULL,\ncurve bigint NULL,\nfree_kick_accuracy bigint NULL,\nlong_passing bigint NULL,\nball_control bigint NULL,\nacceleration bigint NULL,\nsprint_speed bigint NULL,\nagility bigint NULL,\nreactions bigint NULL,\nbalance bigint NULL,\nshot_power bigint NULL,\njumping bigint NULL,\nstamina bigint NULL,\nstrength bigint NULL,\nlong_shots bigint NULL,\naggression bigint NULL,\ninterceptions bigint NULL,\npositioning bigint NULL,\nvision bigint NULL,\npenalties bigint NULL,\nmarking bigint NULL,\nstanding_tackle bigint NULL,\nsliding_tackle bigint NULL,\ngk_diving bigint NULL,\ngk_handling bigint NULL,\ngk_kicking bigint NULL,\ngk_positioning bigint NULL,\ngk_reflexes bigint NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  player_fifa_api_id  player_api_id                date  overall_rating  potential preferred_foot attacking_work_rate defensive_work_rate  crossing  finishing  heading_accuracy  short_passing  volleys  dribbling  curve  free_kick_accuracy  long_passing  ball_control  acceleration  sprint_speed  agility  reactions  balance  shot_power  jumping  stamina  strength  long_shots  aggression  interceptions  positioning  vision  penalties  marking  standing_tackle  sliding_tackle  gk_diving  gk_handling  gk_kicking  gk_positioning  gk_reflexes\n  1              218353         505942 2016-02-18 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  2              218353         505942 2015-11-19 00:00:00              67         71          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          71             70           45      54         48       65               69              69          6           11          10               8            8\n  3              218353         505942 2015-09-21 00:00:00              62         66          right              medium              medium        49         44                71             61       44         51     45                  39            64            49            60            64       59         47       65          55       58       54        76          35          63             41           45      54         48       65               66              69          6           11          10               8            8\n==================================================\n\n\nCREATE TABLE \"team\" (\nid bigint NOT NULL DEFAULT nextval('team_id_seq'::regclass),\nteam_api_id bigint NULL,\nteam_fifa_api_id bigint NULL,\nteam_long_name text NULL,\nteam_short_name text NULL,\n    PRIMARY KEY (id)\n);\n\nExample data:\n id  team_api_id  team_fifa_api_id   team_long_name team_short_name\n  1         9987               673         KRC Genk             GEN\n  2         9993               675     Beerschot AC             BAC\n  3        10000             15005 SV Zulte-Waregem             ZUL\n==================================================\n\n********************Database: european_football_2********************\n\n# User Query:\nIn the 'european_football_2' database, there is a table named 'teams_config' which holds information about various football teams. Each team has a 'configurations' column of type jsonb that stores an array of objects representing different team settings. Each object in the array has an 'id', 'name', and 'settings'. For example, one row in the 'teams_config' table might have the following 'configurations':\n[\n    {\n             \"id\": 100, \n            \"name\": \"testOne\", \n            \"settings\": \"settingOne\" \n       },\n         {\n            \"id\": 101,\n            \"name\": \"testTwo\",\n            \"settings\": \"settingTwo\"\n        },\n]\n# Error SQL:\nUPDATE teams_config SET configurations = jsonb_set(configurations, '{settings}', (configurations->'id') - (SELECT DISTINCT position - 1 FROM teams_config, jsonb_array_elements(configurations) WITH ORDINALITY arr(elem, position) WHERE elem->>'id' = '101')::int);\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
{"url": "https://stackoverflow.com/questions/74852923/how-to-get-the-full-calendar-months-between-two-dates-in-postgresql", "instance_id": "549_3", "selected_database": "formula_1", "query": "I have a table race_dates which stores the begin_date and end_date of races, e.g. '2022-01-03' and '2022-03-04', is there any neat way to calculate ONLY the completed full calendar months between these dates? Some examples with their requested outputs: '2022-01-03' and '2022-03-04' full calendar months = 1 since only February was a full calendar month between this timespan. '2022-01-01' and '2022-05-30' full calendar months = 4 since May has 31 days total. '2022-01-31' and '2022-05-31' full calendar months = 3 since the month of May is not completed. I tried subtracting the dates but it gives me the days difference between these dates. I also tried the function AGE() but it is based also in the days difference, since it is using days to calculate years months etc.", "error_sql": ["SELECT begin_date, end_date, age(CASE WHEN end_date = date_trunc('month', end_date) + interval '1 month - 1 day' THEN end_date + interval '1 day' ELSE date_trunc('month', end_date) END::date, CASE WHEN begin_date = date_trunc('month', begin_date) THEN begin_date ELSE date_trunc('month', begin_date) + interval '1 month' END::date) AS calculated_months FROM race_dates;"], "sol_sql": ["SELECT begin_date, end_date, (DATE_PART('year', end_date) - DATE_PART('year', begin_date)) * 12 + DATE_PART('month', end_date) - DATE_PART('month', begin_date) - CASE WHEN begin_date > date_trunc('month', begin_date) THEN 1 ELSE 0 END AS full_calendar_months FROM race_dates;"], "preprocess_sql": ["CREATE TABLE race_dates (begin_date DATE NOT NULL, end_date DATE NOT NULL)", "INSERT INTO race_dates (begin_date, end_date) VALUES ('2022-01-03', '2022-03-04'), ('2022-01-01', '2022-05-30'), ('2022-01-31', '2022-05-31'), ('2021-11-15', '2022-02-10'), ('2021-12-01', '2022-05-31');"], "clean_up_sql": ["DROP TABLE race_dates"], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    pred_sqls = remove_distinct(pred_sqls)\n    sol_sqls = remove_distinct(sol_sqls)\n    result = ex_base(pred_sqls, sol_sqls, db_name, conn)\n    assert result == 1, f\"ex_base returned {result} but expected 1.\"\n    return result"], "prompt": "You are a SQL assistant to help a user with their SQL queries.\n# Database Schema:\n********************Database: formula_1********************\nCREATE TABLE \"circuits\" (\ncircuitid bigint NOT NULL DEFAULT nextval('circuits_circuitid_seq'::regclass),\ncircuitref text NULL DEFAULT ''::text,\nname text NULL DEFAULT ''::text,\nlocation text NULL,\ncountry text NULL,\nlat real NULL,\nlng real NULL,\nalt bigint NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (circuitid)\n);\n\nExample data:\n circuitid circuitref                           name     location  country      lat       lng  alt                                                         url\n         2     sepang   Sepang International Circuit Kuala Lumpur Malaysia  2.76083 101.73800 None   http://en.wikipedia.org/wiki/Sepang_International_Circuit\n         3    bahrain  Bahrain International Circuit       Sakhir  Bahrain 26.03250  50.51060 None  http://en.wikipedia.org/wiki/Bahrain_International_Circuit\n         4  catalunya Circuit de Barcelona-Catalunya     Montmeló    Spain 41.57000   2.26111 None http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya\n==================================================\n\n\nCREATE TABLE \"status\" (\nstatusid bigint NOT NULL DEFAULT nextval('status_statusid_seq'::regclass),\nstatus text NULL DEFAULT ''::text,\n    PRIMARY KEY (statusid)\n);\n\nExample data:\n statusid       status\n        1     Finished\n        2 Disqualified\n        3     Accident\n==================================================\n\n\nCREATE TABLE \"drivers\" (\ndriverid bigint NOT NULL DEFAULT nextval('drivers_driverid_seq'::regclass),\ndriverref text NULL DEFAULT ''::text,\nnumber bigint NULL,\ncode text NULL,\nforename text NULL DEFAULT ''::text,\nsurname text NULL DEFAULT ''::text,\ndob date NULL,\nnationality text NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (driverid)\n);\n\nExample data:\n driverid driverref  number code forename  surname        dob nationality                                         url\n        1  hamilton    44.0  HAM    Lewis Hamilton 1985-01-07     British http://en.wikipedia.org/wiki/Lewis_Hamilton\n        2  heidfeld     NaN  HEI     Nick Heidfeld 1977-05-10      German  http://en.wikipedia.org/wiki/Nick_Heidfeld\n        3   rosberg     6.0  ROS     Nico  Rosberg 1985-06-27      German   http://en.wikipedia.org/wiki/Nico_Rosberg\n==================================================\n\n\nCREATE TABLE \"driverstandings\" (\ndriverstandingsid bigint NOT NULL DEFAULT nextval('driverstandings_driverstandingsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nposition bigint NULL,\npositiontext text NULL,\nwins bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (driverstandingsid)\n);\n\nExample data:\n driverstandingsid  raceid  driverid  points  position  wins positiontext\n                 1      18         1    10.0         1     1            1\n                 2      18         2     8.0         2     0            2\n                 3      18         3     6.0         3     0            3\n==================================================\n\n\nCREATE TABLE \"races\" (\nraceid bigint NOT NULL DEFAULT nextval('races_raceid_seq'::regclass),\nyear bigint NULL DEFAULT '0'::bigint,\nround bigint NULL DEFAULT '0'::bigint,\ncircuitid bigint NULL DEFAULT '0'::bigint,\nname text NULL DEFAULT ''::text,\ndate date NULL,\ntime text NULL,\nurl text NULL,\n    PRIMARY KEY (raceid),\n    FOREIGN KEY (year) REFERENCES seasons(year)\n);\n\nExample data:\n raceid  year  round  circuitid                 name       date     time                                                    url\n      2  2009      2          2 Malaysian Grand Prix 2009-04-05 09:00:00 http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix\n      3  2009      3         17   Chinese Grand Prix 2009-04-19 07:00:00   http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix\n      4  2009      4          3   Bahrain Grand Prix 2009-04-26 12:00:00   http://en.wikipedia.org/wiki/2009_Bahrain_Grand_Prix\n==================================================\n\n\nCREATE TABLE \"constructors\" (\nconstructorid bigint NOT NULL DEFAULT nextval('constructors_constructorid_seq'::regclass),\nconstructorref text NULL DEFAULT ''::text,\nname text NULL DEFAULT ''::text,\nnationality text NULL,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (constructorid)\n);\n\nExample data:\n constructorid constructorref       name nationality                                                          url\n             1        mclaren    McLaren     British                         http://en.wikipedia.org/wiki/McLaren\n             2     bmw_sauber BMW Sauber      German                      http://en.wikipedia.org/wiki/BMW_Sauber\n             3       williams   Williams     British http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering\n==================================================\n\n\nCREATE TABLE \"constructorresults\" (\nconstructorresultsid bigint NOT NULL DEFAULT nextval('constructorresults_constructorresultsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\npoints real NULL,\nstatus text NULL,\n    PRIMARY KEY (constructorresultsid)\n);\n\nExample data:\n constructorresultsid  raceid  constructorid  points status\n                    1      18              1    14.0   None\n                    2      18              2     8.0   None\n                    3      18              3     9.0   None\n==================================================\n\n\nCREATE TABLE \"laptimes\" (\nraceid bigint NOT NULL,\ndriverid bigint NOT NULL,\nlap bigint NOT NULL,\nposition bigint NULL,\ntime text NULL,\nmilliseconds bigint NULL,\n    PRIMARY KEY (raceid, driverid, lap)\n);\n\nExample data:\n raceid  driverid  lap  position     time  milliseconds\n      2         1    1        10 1:52.965        112965\n      2         1    2        10 1:41.865        101865\n      2         1    3        10 1:40.869        100869\n==================================================\n\n\nCREATE TABLE \"qualifying\" (\nqualifyid bigint NOT NULL DEFAULT nextval('qualifying_qualifyid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\nnumber bigint NULL DEFAULT '0'::bigint,\nposition bigint NULL,\nq1 text NULL,\nq2 text NULL,\nq3 text NULL,\n    PRIMARY KEY (qualifyid)\n);\n\nExample data:\n qualifyid  raceid  driverid  constructorid  number  position       q1       q2       q3\n        23      19        13              6       2         1 1:35.347 1:34.412 1:35.748\n        24      19         8              6       1         2 1:35.645 1:34.188 1:36.230\n        25      19         5              1      23         3 1:35.227 1:34.759 1:36.613\n==================================================\n\n\nCREATE TABLE \"pitstops\" (\nraceid bigint NOT NULL,\ndriverid bigint NOT NULL,\nstop bigint NOT NULL,\nlap bigint NULL,\ntime text NULL,\nduration text NULL,\nmilliseconds bigint NULL,\n    PRIMARY KEY (raceid, driverid, stop)\n);\n\nExample data:\n raceid  driverid  stop  lap     time duration  milliseconds\n    842         1     1   12 16:24:40   22.552         22552\n    842         1     2   24 16:45:48   22.611         22611\n    842         1     3   37 17:08:28   25.382         25382\n==================================================\n\n\nCREATE TABLE \"seasons\" (\nyear bigint NOT NULL DEFAULT '0'::bigint,\nurl text NULL DEFAULT ''::text,\n    PRIMARY KEY (year)\n);\n\nExample data:\n year                                                  url\n 1950 http://en.wikipedia.org/wiki/1950_Formula_One_season\n 1951 http://en.wikipedia.org/wiki/1951_Formula_One_season\n 1952 http://en.wikipedia.org/wiki/1952_Formula_One_season\n==================================================\n\n\nCREATE TABLE \"constructorstandings\" (\nconstructorstandingsid bigint NOT NULL DEFAULT nextval('constructorstandings_constructorstandingsid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nposition bigint NULL,\npositiontext text NULL,\nwins bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (constructorstandingsid)\n);\n\nExample data:\n constructorstandingsid  raceid  constructorid  points  position positiontext  wins\n                      1      18              1    14.0         1            1     1\n                      2      18              2     8.0         3            3     0\n                      3      18              3     9.0         2            2     0\n==================================================\n\n\nCREATE TABLE \"results\" (\nresultid bigint NOT NULL DEFAULT nextval('results_resultid_seq'::regclass),\nraceid bigint NULL DEFAULT '0'::bigint,\ndriverid bigint NULL DEFAULT '0'::bigint,\nconstructorid bigint NULL DEFAULT '0'::bigint,\nnumber bigint NULL,\ngrid bigint NULL DEFAULT '0'::bigint,\nposition bigint NULL,\npositiontext text NULL DEFAULT ''::text,\npositionorder bigint NULL DEFAULT '0'::bigint,\npoints real NULL DEFAULT '0'::real,\nlaps bigint NULL DEFAULT '0'::bigint,\ntime text NULL,\nmilliseconds bigint NULL,\nfastestlap bigint NULL,\nrank bigint NULL DEFAULT '0'::bigint,\nfastestlaptime text NULL,\nfastestlapspeed text NULL,\nstatusid bigint NULL DEFAULT '0'::bigint,\n    PRIMARY KEY (resultid)\n);\n\nExample data:\n resultid  raceid  driverid  constructorid  number  grid  position positiontext  positionorder  points  laps        time  milliseconds  fastestlap  rank fastestlaptime fastestlapspeed  statusid\n       23      19         8              6       1     2         1            1              1    10.0    56 1:31:18.555       5478555          37     2       1:35.405         209.158         1\n       24      19         9              2       4     4         2            2              2     8.0    56     +19.570       5498125          39     6       1:35.921         208.033         1\n       25      19         5              1      23     8         3            3              3     6.0    56     +38.450       5517005          19     7       1:35.922         208.031         1\n==================================================\n\n********************Database: formula_1********************\n\n# User Query:\nI have a table race_dates which stores the begin_date and end_date of races, e.g. '2022-01-03' and '2022-03-04', is there any neat way to calculate ONLY the completed full calendar months between these dates? Some examples with their requested outputs: '2022-01-03' and '2022-03-04' full calendar months = 1 since only February was a full calendar month between this timespan. '2022-01-01' and '2022-05-30' full calendar months = 4 since May has 31 days total. '2022-01-31' and '2022-05-31' full calendar months = 3 since the month of May is not completed. I tried subtracting the dates but it gives me the days difference between these dates. I also tried the function AGE() but it is based also in the days difference, since it is using days to calculate years months etc.\n# Error SQL:\nSELECT begin_date, end_date, age(CASE WHEN end_date = date_trunc('month', end_date) + interval '1 month - 1 day' THEN end_date + interval '1 day' ELSE date_trunc('month', end_date) END::date, CASE WHEN begin_date = date_trunc('month', begin_date) THEN begin_date ELSE date_trunc('month', begin_date) + interval '1 month' END::date) AS calculated_months FROM race_dates;\nYour task is to solve the user's query referring to the database schema provided above. Please wrap your solution SQLs with ```sql\n [Your Fixed SQL] \n``` tags in your response."}
