2024-12-11 16:08:58,107 - INFO - ================ running test for 32 ================
2024-12-11 16:08:58,108 - INFO - Running test command:
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,108 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    try:
        expected_result = [2, 3, 4]
        result_ids = [row[0] for row in result]
        assert result_ids == expected_result
        print('Issue resolved')
    except AssertionError:
        print('Issue reproduced')
        return
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,121 - INFO - Test output:
Issue resolved

2024-12-11 16:08:58,125 - INFO - Running test command:
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,127 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    try:
        expected_result = [2, 3, 4]
        assert result == expected_result
        print('Issue resolved')
    except AssertionError:
        print('Issue reproduced')
        return
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,137 - INFO - Test output:
Issue reproduced

2024-12-11 16:08:58,138 - INFO - Running test command:
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,138 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    try:
        expected_result = [2, 3, 4]
        result_ids = [row[0] for row in result]
        assert result_ids == expected_result
        print('Issue resolved')
    except AssertionError:
        print('Issue reproduced')
        return
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,147 - INFO - Test output:
Issue reproduced
Issue resolved

2024-12-11 16:08:58,149 - INFO - Running test command:
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,149 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    try:
        expected_result = [2, 3, 4]
        assert result == expected_result
        print('Issue resolved')
    except AssertionError:
        print('Issue reproduced')
        return
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,156 - INFO - Test output:
Issue reproduced

2024-12-11 16:08:58,158 - INFO - Running test command:
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,158 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    try:
        expected_result = [2, 3, 4]
        result_ids = [row[0] for row in result]
        assert result_ids == expected_result
        print('Issue resolved')
    except AssertionError:
        print('Issue reproduced')
        return
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,168 - INFO - Test output:
Difference between left join and inner join counts: 25
Issue reproduced
Issue reproduced

2024-12-11 16:08:58,169 - INFO - Running test command:
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,169 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    try:
        expected_result = [2, 3, 4]
        result_ids = [row[0] for row in result]
        assert result_ids == expected_result
        print('Issue resolved')
    except AssertionError:
        print('Issue reproduced')
        return
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,171 - INFO - Test output:
Issue reproduced

2024-12-11 16:08:58,172 - INFO - Running test command:
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,173 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    try:
        expected_result = [2, 3, 4]
        result_ids = [row[0] for row in result]
        assert result_ids == expected_result
        print('Issue resolved')
    except AssertionError:
        print('Issue reproduced')
        return
test_func('SELECT DISTINCT cards.id FROM cards LEFT JOIN decks ON cards.id = decks.card1_id OR cards.id = decks.card2_id WHERE cards.id <> 1 AND (decks.card1_id IS NULL OR decks.card1_id <> 1) AND (decks.card2_id IS NULL OR decks.card2_id <> 1)', 'card_games')
2024-12-11 16:08:58,176 - INFO - Test output:
Difference between left join and inner join counts: 25
Issue reproduced

2024-12-11 16:08:58,176 - INFO - No solutions resolved the issue.
2024-12-11 16:08:58,271 - INFO - ================ re-ranking solutions for 32 ================
2024-12-11 16:08:58,272 - INFO - No valid parsed solutions found.
