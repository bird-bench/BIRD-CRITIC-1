2024-12-11 16:08:58,121 - INFO - ================ running test for 29 ================
2024-12-11 16:08:58,124 - INFO - Running test command:
test_func('WITH code_status_3 AS (SELECT release_id, code_id, code_status_id, code_created_date FROM card_release WHERE code_status_id = 3), code_status_2 AS (SELECT release_id, code_id, code_status_id, code_created_date FROM card_release WHERE code_status_id = 2) SELECT COALESCE(c3.release_id, c2.release_id) AS release_id, COALESCE(c3.code_id, c2.code_id) AS code_id, COALESCE(c3.code_status_id, c2.code_status_id) AS code_status_id, COALESCE(c3.code_created_date, c2.code_created_date) AS code_created_date FROM (SELECT DISTINCT code_id FROM card_release) AS all_codes LEFT JOIN code_status_3 AS c3 ON all_codes.code_id = c3.code_id LEFT JOIN (SELECT code_id, MAX(release_id) AS release_id FROM code_status_2 GROUP BY code_id) AS max_release_2 ON all_codes.code_id = max_release_2.code_id LEFT JOIN code_status_2 AS c2 ON max_release_2.code_id = c2.code_id AND max_release_2.release_id = c2.release_id', 'card_games')
2024-12-11 16:08:58,124 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    expected_results = [(1, 3, '2023-01-01'), (2, 2, '2023-02-01'), (3, 3, '2023-03-01')]
    try:
        for (i, row) in enumerate(result):
            assert row == expected_results[i], f'Row {i} does not match expected result'
        print('Issue resolved')
    except AssertionError as e:
        print('Issue reproduced')
        return
test_func('WITH code_status_3 AS (SELECT release_id, code_id, code_status_id, code_created_date FROM card_release WHERE code_status_id = 3), code_status_2 AS (SELECT release_id, code_id, code_status_id, code_created_date FROM card_release WHERE code_status_id = 2) SELECT COALESCE(c3.release_id, c2.release_id) AS release_id, COALESCE(c3.code_id, c2.code_id) AS code_id, COALESCE(c3.code_status_id, c2.code_status_id) AS code_status_id, COALESCE(c3.code_created_date, c2.code_created_date) AS code_created_date FROM (SELECT DISTINCT code_id FROM card_release) AS all_codes LEFT JOIN code_status_3 AS c3 ON all_codes.code_id = c3.code_id LEFT JOIN (SELECT code_id, MAX(release_id) AS release_id FROM code_status_2 GROUP BY code_id) AS max_release_2 ON all_codes.code_id = max_release_2.code_id LEFT JOIN code_status_2 AS c2 ON max_release_2.code_id = c2.code_id AND max_release_2.release_id = c2.release_id', 'card_games')
2024-12-11 16:08:58,133 - INFO - Test output:

2024-12-11 16:08:58,134 - INFO - Running test command:
test_func('WITH ranked_codes AS (SELECT code_id, release_id, code_status_id, code_created_date, ROW_NUMBER() OVER (PARTITION BY code_id ORDER BY CASE WHEN code_status_id = 3 THEN 1 WHEN code_status_id = 2 THEN 2 ELSE 3 END, release_id DESC) AS rn FROM card_release) SELECT code_id, release_id, code_status_id, code_created_date FROM ranked_codes WHERE rn = 1', 'card_games')
2024-12-11 16:08:58,135 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    expected_results = [(1, 3, '2023-01-01'), (2, 2, '2023-02-01'), (3, 3, '2023-03-01')]
    try:
        for (i, row) in enumerate(result):
            assert row == expected_results[i], f'Row {i} does not match expected result'
        print('Issue resolved')
    except AssertionError as e:
        print('Issue reproduced')
        return
test_func('WITH ranked_codes AS (SELECT code_id, release_id, code_status_id, code_created_date, ROW_NUMBER() OVER (PARTITION BY code_id ORDER BY CASE WHEN code_status_id = 3 THEN 1 WHEN code_status_id = 2 THEN 2 ELSE 3 END, release_id DESC) AS rn FROM card_release) SELECT code_id, release_id, code_status_id, code_created_date FROM ranked_codes WHERE rn = 1', 'card_games')
2024-12-11 16:08:58,142 - INFO - Test output:
Issue reproduced

2024-12-11 16:08:58,145 - INFO - Running test command:
test_func('WITH prioritized_rows AS (SELECT code_id, release_id, code_status_id, code_created_date, ROW_NUMBER() OVER (PARTITION BY code_id ORDER BY CASE WHEN code_status_id = 3 THEN 1 WHEN code_status_id = 2 THEN 2 ELSE 3 END, release_id DESC) AS rn FROM card_release) SELECT code_id, release_id, code_status_id, code_created_date FROM prioritized_rows WHERE rn = 1', 'card_games')
2024-12-11 16:08:58,146 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    expected_results = [(1, 3, '2023-01-01'), (2, 2, '2023-02-01'), (3, 3, '2023-03-01')]
    try:
        for (i, row) in enumerate(result):
            assert row == expected_results[i], f'Row {i} does not match expected result'
        print('Issue resolved')
    except AssertionError as e:
        print('Issue reproduced')
        return
test_func('WITH prioritized_rows AS (SELECT code_id, release_id, code_status_id, code_created_date, ROW_NUMBER() OVER (PARTITION BY code_id ORDER BY CASE WHEN code_status_id = 3 THEN 1 WHEN code_status_id = 2 THEN 2 ELSE 3 END, release_id DESC) AS rn FROM card_release) SELECT code_id, release_id, code_status_id, code_created_date FROM prioritized_rows WHERE rn = 1', 'card_games')
2024-12-11 16:08:58,151 - INFO - Test output:
Issue reproduced

2024-12-11 16:08:58,153 - INFO - Running test command:
test_func('WITH code_status_3 AS (SELECT code_id, release_id, code_status_id, code_created_date FROM card_release WHERE code_status_id = 3), code_status_2 AS (SELECT code_id, MAX(release_id) AS max_release_id FROM card_release WHERE code_status_id = 2 GROUP BY code_id) SELECT c.release_id, c.code_id, c.code_status_id, c.code_created_date FROM card_release AS c WHERE c.code_status_id = 3 OR (c.code_status_id = 2 AND c.release_id = (SELECT max_release_id FROM code_status_2 WHERE code_status_2.code_id = c.code_id)) ORDER BY c.code_id, c.release_id DESC', 'card_games')
2024-12-11 16:08:58,153 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    expected_results = [(1, 3, '2023-01-01'), (2, 2, '2023-02-01'), (3, 3, '2023-03-01')]
    try:
        for (i, row) in enumerate(result):
            assert row == expected_results[i], f'Row {i} does not match expected result'
        print('Issue resolved')
    except AssertionError as e:
        print('Issue reproduced')
        return
test_func('WITH code_status_3 AS (SELECT code_id, release_id, code_status_id, code_created_date FROM card_release WHERE code_status_id = 3), code_status_2 AS (SELECT code_id, MAX(release_id) AS max_release_id FROM card_release WHERE code_status_id = 2 GROUP BY code_id) SELECT c.release_id, c.code_id, c.code_status_id, c.code_created_date FROM card_release AS c WHERE c.code_status_id = 3 OR (c.code_status_id = 2 AND c.release_id = (SELECT max_release_id FROM code_status_2 WHERE code_status_2.code_id = c.code_id)) ORDER BY c.code_id, c.release_id DESC', 'card_games')
2024-12-11 16:08:58,160 - INFO - Test output:
Issue reproduced

2024-12-11 16:08:58,163 - INFO - Running test command:
test_func('WITH code_status_3 AS (SELECT release_id, code_id, code_status_id, code_created_date FROM card_release WHERE code_status_id = 3), code_status_2 AS (SELECT release_id, code_id, code_status_id, code_created_date FROM card_release WHERE code_status_id = 2) SELECT COALESCE(c3.release_id, c2.release_id) AS release_id, COALESCE(c3.code_id, c2.code_id) AS code_id, COALESCE(c3.code_status_id, c2.code_status_id) AS code_status_id, COALESCE(c3.code_created_date, c2.code_created_date) AS code_created_date FROM (SELECT DISTINCT code_id FROM card_release) AS all_codes LEFT JOIN code_status_3 AS c3 ON all_codes.code_id = c3.code_id LEFT JOIN (SELECT code_id, MAX(release_id) AS release_id FROM code_status_2 GROUP BY code_id) AS max_release_id ON all_codes.code_id = max_release_id.code_id LEFT JOIN code_status_2 AS c2 ON max_release_id.code_id = c2.code_id AND max_release_id.release_id = c2.release_id', 'card_games')
2024-12-11 16:08:58,165 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    expected_results = [(1, 3, '2023-01-01'), (2, 2, '2023-02-01'), (3, 3, '2023-03-01')]
    try:
        for (i, row) in enumerate(result):
            assert row == expected_results[i], f'Row {i} does not match expected result'
        print('Issue resolved')
    except AssertionError as e:
        print('Issue reproduced')
        return
test_func('WITH code_status_3 AS (SELECT release_id, code_id, code_status_id, code_created_date FROM card_release WHERE code_status_id = 3), code_status_2 AS (SELECT release_id, code_id, code_status_id, code_created_date FROM card_release WHERE code_status_id = 2) SELECT COALESCE(c3.release_id, c2.release_id) AS release_id, COALESCE(c3.code_id, c2.code_id) AS code_id, COALESCE(c3.code_status_id, c2.code_status_id) AS code_status_id, COALESCE(c3.code_created_date, c2.code_created_date) AS code_created_date FROM (SELECT DISTINCT code_id FROM card_release) AS all_codes LEFT JOIN code_status_3 AS c3 ON all_codes.code_id = c3.code_id LEFT JOIN (SELECT code_id, MAX(release_id) AS release_id FROM code_status_2 GROUP BY code_id) AS max_release_id ON all_codes.code_id = max_release_id.code_id LEFT JOIN code_status_2 AS c2 ON max_release_id.code_id = c2.code_id AND max_release_id.release_id = c2.release_id', 'card_games')
2024-12-11 16:08:58,170 - INFO - Test output:

2024-12-11 16:08:58,171 - INFO - No solutions resolved the issue.
2024-12-11 16:08:58,271 - INFO - ================ re-ranking solutions for 29 ================
2024-12-11 16:08:58,271 - INFO - No valid parsed solutions found.
