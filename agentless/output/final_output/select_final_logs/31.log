2024-12-11 16:08:58,105 - INFO - ================ running test for 31 ================
2024-12-11 16:08:58,106 - INFO - Running test command:
test_func('SELECT SUM(expense.cost) AS total_expense, SUM(budget.amount) AS total_budget, budget.link_to_event FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget GROUP BY budget.link_to_event', 'student_club')
2024-12-11 16:08:58,106 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    try:
        for row in result:
            (total_expense, total_budget, link_to_event) = row
            assert total_budget <= total_expense, f'Unexpected large total_budget: {total_budget} for link_to_event: {link_to_event}'
        print('Issue resolved')
    except AssertionError as e:
        print('Issue reproduced')
        return
test_func('SELECT SUM(expense.cost) AS total_expense, SUM(budget.amount) AS total_budget, budget.link_to_event FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget GROUP BY budget.link_to_event', 'student_club')
2024-12-11 16:08:58,124 - INFO - Test output:

2024-12-11 16:08:58,126 - INFO - Running test command:
test_func('SELECT SUM(expense.cost) AS total_expense, SUM(budget.amount) AS total_budget, budget.link_to_event FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget GROUP BY budget.link_to_event', 'student_club')
2024-12-11 16:08:58,127 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    try:
        for row in result:
            (total_expense, total_budget, link_to_event) = row
            assert total_budget <= total_expense, f'Unexpected large total_budget: {total_budget} for link_to_event: {link_to_event}'
        print('Issue resolved')
    except AssertionError as e:
        print('Issue reproduced')
        return
test_func('SELECT SUM(expense.cost) AS total_expense, SUM(budget.amount) AS total_budget, budget.link_to_event FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget GROUP BY budget.link_to_event', 'student_club')
2024-12-11 16:08:58,140 - INFO - Test output:

2024-12-11 16:08:58,141 - INFO - Running test command:
test_func('SELECT SUM(expense.cost) AS total_expense, SUM(budget.amount) AS total_budget, budget.link_to_event FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget GROUP BY budget.link_to_event', 'student_club')
2024-12-11 16:08:58,142 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    try:
        for row in result:
            (total_expense, total_budget, link_to_event) = row
            assert total_budget <= total_expense, f'Unexpected large total_budget: {total_budget} for link_to_event: {link_to_event}'
        print('Issue resolved')
    except AssertionError as e:
        print('Issue reproduced')
        return
test_func('SELECT SUM(expense.cost) AS total_expense, SUM(budget.amount) AS total_budget, budget.link_to_event FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget GROUP BY budget.link_to_event', 'student_club')
2024-12-11 16:08:58,153 - INFO - Test output:
Issue reproduced

2024-12-11 16:08:58,154 - INFO - Running test command:
test_func('SELECT SUM(expense.cost) AS total_expense, SUM(budget.amount) AS total_budget, budget.link_to_event FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget GROUP BY budget.link_to_event', 'student_club')
2024-12-11 16:08:58,155 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    try:
        for row in result:
            (total_expense, total_budget, link_to_event) = row
            assert total_budget <= total_expense, f'Unexpected large total_budget: {total_budget} for link_to_event: {link_to_event}'
        print('Issue resolved')
    except AssertionError as e:
        print('Issue reproduced')
        return
test_func('SELECT SUM(expense.cost) AS total_expense, SUM(budget.amount) AS total_budget, budget.link_to_event FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget GROUP BY budget.link_to_event', 'student_club')
2024-12-11 16:08:58,166 - INFO - Test output:

2024-12-11 16:08:58,167 - INFO - Running test command:
test_func('SELECT SUM(expense.cost) AS total_expense, SUM(budget.amount) AS total_budget, budget.link_to_event FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget GROUP BY budget.link_to_event', 'student_club')
2024-12-11 16:08:58,167 - INFO - Running test with:
def test_func(sql, db) -> None:
    try:
        (result, conn) = perform_query_on_mysql_databases(sql, db)
    except Exception as e:
        print('Issue reproduced')
        return
    try:
        for row in result:
            (total_expense, total_budget, link_to_event) = row
            assert total_budget <= total_expense, f'Unexpected large total_budget: {total_budget} for link_to_event: {link_to_event}'
        print('Issue resolved')
    except AssertionError as e:
        print('Issue reproduced')
        return
test_func('SELECT SUM(expense.cost) AS total_expense, SUM(budget.amount) AS total_budget, budget.link_to_event FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget GROUP BY budget.link_to_event', 'student_club')
2024-12-11 16:08:58,171 - INFO - Test output:
Issue reproduced

2024-12-11 16:08:58,172 - INFO - No solutions resolved the issue.
2024-12-11 16:08:58,270 - INFO - ================ re-ranking solutions for 31 ================
2024-12-11 16:08:58,270 - INFO - No valid parsed solutions found.
